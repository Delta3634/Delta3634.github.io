<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>go_beginning_250514</title>
    <link href="/2025/05/14/go-beginning-250514/"/>
    <url>/2025/05/14/go-beginning-250514/</url>
    
    <content type="html"><![CDATA[<h2 id="go"><a href="#go" class="headerlink" title="go"></a><code>go</code></h2><p>2025年5月14 日，正式开始学习go语言。</p><p>安装go语言、搭建开发环境看的是csdn上这篇<a href="%5B%E5%AE%89%E8%A3%85Go%E8%AF%AD%E8%A8%80%E3%80%81%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E3%80%81%E4%BE%9D%E8%B5%96%E5%8C%85%E4%B8%8B%E8%BD%BD%EF%BC%88%E4%BF%9D%E5%A7%86%E6%95%99%E7%A8%8B%EF%BC%89_go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/qq_38105536/article/details/142635132)">教程</a>  </p><p>同时在看的还有B站up主无闻的视频，笔记及视频资源可以在他的Github主页看到：[go_fundamental_programming](<a href="https://github.com/unknwon/go-fundamental-programming">unknwon&#x2F;go-fundamental-programming: 《Go 编程基础》是一套针对 Google 出品的 Go 语言的视频语音教程，主要面向新手级别的学习者。</a>)</p><h3 id="梦开始的地方："><a href="#梦开始的地方：" class="headerlink" title="梦开始的地方："></a><strong>梦开始的地方：</strong></h3><img src="/2025/05/14/go-beginning-250514/1.png" class=""><p>查看GOPATH路径的结果：</p><img src="/2025/05/14/go-beginning-250514/2.png" class=""><p>进行到Go语言开发工具包时遇到的问题：</p><p>未出现全选的选项，但一段时间之后终端出现了如下显示：</p><img src="/2025/05/14/go-beginning-250514/3.png" class=""><p>新建一个<code>go_projects</code>的文件夹，在vscode中打开此文件夹，切换终端为<code>cmd</code></p><p>使用下列语句新建<strong>属于<code>go</code>的<code>hello</code>文件</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go mod init gohello<br></code></pre></td></tr></table></figure><p>之后<strong>新建<code>main.go</code>文件</strong>，并输入下列代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main <span class="hljs-comment">//导入main包，表明当前是一个可执行程序</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-comment">//导入内置fmt包</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//main函数，是程序执行的入口</span><br>fmt.Println(<span class="hljs-string">&quot;Go Hello !&quot;</span>) <span class="hljs-comment">// 在终端打印Go Hello !</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2025/05/14/go-beginning-250514/4.png" class=""><p>在终端运行<code>main.go</code>程序，便可得到<code>Go Hello !</code>的输出：</p><img src="/2025/05/14/go-beginning-250514/5.png" class=""><p><code>go build</code>编译，运行程序</p><p>在终端依次输入下列指令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go build ##进行编译,之后会生成gohello.exe文件<br><br>gohello.exe ##便可以得到Go Hello!的输出<br></code></pre></td></tr></table></figure><img src="/2025/05/14/go-beginning-250514/6.png" class="">]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>language</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前后端基础</title>
    <link href="/2025/05/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="前后端关系"><a href="#前后端关系" class="headerlink" title="前后端关系"></a>前后端关系</h1><h2 id="一、前端"><a href="#一、前端" class="headerlink" title="一、前端"></a>一、前端</h2><ul><li><p>看的见得页面（可视</p></li><li><p><strong>响应式</strong>——APP、PC端、小程序、桌面程序</p></li><li><p>使用的语言：</p><ul><li><p>网页三件套：HTML、CSS、JavaScript</p></li><li><p>iOS APP：Object-C</p></li><li><p>Android APP： Java</p></li><li><p>桌面程序：C++</p></li></ul></li></ul><h2 id="二、后端"><a href="#二、后端" class="headerlink" title="二、后端"></a>二、后端</h2><ul><li>给页面提供数据，与服务器打交道</li><li>具体：<ul><li>处理业务逻辑</li><li>处理文件</li><li>处理数据库</li><li>把处理好的结果返回给前端（之后前端将数据展示出来）</li></ul></li><li>语言：<ul><li>Java</li><li>PHP</li><li>Python</li><li>Go</li><li>JavaScript</li></ul></li></ul><h2 id="三、前后端关系"><a href="#三、前后端关系" class="headerlink" title="三、前后端关系"></a>三、前后端关系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs meimaid"><br></code></pre></td></tr></table></figure><p><img src="/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="前后端关系图"></p><p>前后端分离，前端——静态界面，数据写死；后端——处理数据后通过接口返回给前端</p><blockquote><p>耕耘技术宅</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用hexo和GithubPages搭建个人网站</title>
    <link href="/2025/04/25/%E5%88%A9%E7%94%A8hexo%E5%92%8CGithubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <url>/2025/04/25/%E5%88%A9%E7%94%A8hexo%E5%92%8CGithubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="利用hexo和Github-Pages搭建个人网站"><a href="#利用hexo和Github-Pages搭建个人网站" class="headerlink" title="利用hexo和Github Pages搭建个人网站"></a>利用hexo和Github Pages搭建个人网站</h1><p>启发点：B站up主</p><p>使用的教程有：</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络</title>
    <link href="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p><strong>写在前面：</strong></p><ul><li>声明：本文所有图片均来自<code>bilibili</code>up主<code>编程八点档</code>的讲解视频，点击即可跳转其主页<a href="https://space.bilibili.com/1056179587?spm_id_from=333.337.0.0">编程八点档</a></li><li>写这个学习笔记的本意是想要<strong>快速入门</strong>机器学习，并跑通在<code>Github</code>上找到的<code>minst手写数字识别</code>的代码 所以没有去听大名鼎鼎的吴恩达机器学习..在B站找了很多视频发现<code>编程八点档</code>讲的很清楚且时长比较短，适合短期内想要对机器学习和神经网络有一个大体了解的小白观看~~~</li></ul><h1 id="（一）机器学习要素"><a href="#（一）机器学习要素" class="headerlink" title="（一）机器学习要素"></a>（一）机器学习要素</h1><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%871_%E5%9B%9B%E5%A4%A7%E8%A6%81%E7%B4%A0.png" class=""><ul><li>训练集上表现良好，新样本集上表现较差：<strong>泛化能力差</strong></li></ul><h2 id="一、分类"><a href="#一、分类" class="headerlink" title="一、分类"></a>一、分类</h2><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%872_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%88%86%E7%B1%BB.png" class="" title="style&#x3D;transform: scale(0.8);"><h3 id="1-监督学习："><a href="#1-监督学习：" class="headerlink" title="1.监督学习："></a>1.监督学习：</h3><ul><li><strong>多个含有输入x和标签y的样本对组成</strong>，机器通过样本来学习正确答案</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%873_%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BF%87%E7%A8%8B.png" class="" title="style&#x3D;transform: scale(0.8);"><ul><li>训练时，输入$x$送入映射函数$f(x)$，得到输出$y尖$，用正确答案标签$y$来监督$y尖$的偏差，从而修正函数，得到更准确的输出$y尖$;</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%874.png" class=""><h4 id="监督学习的目标："><a href="#监督学习的目标：" class="headerlink" title="监督学习的目标："></a>监督学习的目标：</h4><p>构建从 $输入x到输出y$ 之间的映射关系</p><h4 id="解决的两种问题：分类-回归"><a href="#解决的两种问题：分类-回归" class="headerlink" title="解决的两种问题：分类&amp;回归"></a>解决的两种问题：分类&amp;回归</h4><ul><li><strong>分类</strong>：对样本进行区分（根据标签——机器只能识别数字，所以将标签对应到具体的数字上），输出内容为<strong>离散值</strong></li><li><strong>回归</strong>：预测一个<strong>连续的值</strong>，例如：股价预测——<strong>用特征向量</strong>（包含了n个特征，每个特征都是一维的，n维特征向量，所有的特征都要转为数值来处理）<strong>来表征待预测的对象</strong></li></ul><h3 id="2-无监督学习："><a href="#2-无监督学习：" class="headerlink" title="2.无监督学习："></a>2.无监督学习：</h3><ul><li><p>训练集只有$输入x$而没有$标签y$——没有正确答案来监督输出</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%875_%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.png" class="" title="style&#x3D;transform: scale(0.5);"></li></ul><h4 id="无监督学习常见的任务"><a href="#无监督学习常见的任务" class="headerlink" title="无监督学习常见的任务"></a>无监督学习常见的任务</h4><p><strong>聚类</strong>，自行挖掘出数据的内在结构，讲给定的数据分成不同的类别</p><h3 id="3-半监督学习"><a href="#3-半监督学习" class="headerlink" title="3.半监督学习"></a>3.半监督学习</h3><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%876_%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.png" class="" title="style&#x3D;transform: scale(0.8);"><p>使用场景：<strong>标签数据比较昂贵，或有稳定数据流</strong>；</p><p>例如：检测社交网络的违规信息（手动标注部分数据，用半监督技术来修正对位标注数据的理解）；</p><h3 id="4-强化学习"><a href="#4-强化学习" class="headerlink" title="4.强化学习"></a>4.强化学习</h3><p>机器通过与环境的交互来实现目标的一种算法</p><h2 id="二、数据集的划分"><a href="#二、数据集的划分" class="headerlink" title="二、数据集的划分"></a>二、数据集的划分</h2><h3 id="1-训练集"><a href="#1-训练集" class="headerlink" title="1.训练集"></a>1.训练集</h3><p>上课学的东西，用来<strong>训练模型</strong>，学会知识点</p><h3 id="2-验证集"><a href="#2-验证集" class="headerlink" title="2.验证集"></a>2.验证集</h3><p>课后习题，用来<strong>纠正和强化</strong>知识点，用来评估不同超参数训练出的模型效果，从而优化模型</p><h3 id="3-测试集"><a href="#3-测试集" class="headerlink" title="3.测试集"></a>3.测试集</h3><p>（闭卷！）考试，用来<strong>评估最终模型的效果</strong></p><h2 id="三、模型"><a href="#三、模型" class="headerlink" title="三、模型"></a>三、模型</h2><ul><li>模型是机器学习的结果</li><li>它描述了从输入到输出之间的映射关系</li><li>可以理解为是一个函数</li><li><strong>本质</strong>：算法＋参数的组合</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%877_%E4%B8%80%E4%B8%AA%E6%9E%84%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E6%A8%A1%E5%9E%8B%E4%BE%8B%E5%AD%90.png" class="" title="style&#x3D;transform: scale(0.8);"><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%878.png" class="" title="style&#x3D;transform: scale(0.8);"><ul><li><strong>超参数</strong>：训练模型前，还需要设定其他的参数</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%879_%E8%B6%85%E5%8F%82%E6%95%B0%E6%B6%89%E5%8F%8A%E7%9A%84%E9%97%AE%E9%A2%98.png" class="" title="style&#x3D;transform: scale(0.8);"><p>————很难用解析解&#x2F;梯度下降等传统方式获得，一般只能不断试错得到（但上面的a,b也属于超参数）</p><p><strong>测试集和训练集要严格分开，所以先将测试集固定下来</strong>，之后再讲剩下的数据划分为训练集和验证集，<strong>训练集用来训练模型，验证集用来评估模型，不断地调整超参数以找到最终的&#x3D;&#x3D;最优超参数&#x3D;&#x3D;</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8710_%E4%B8%8D%E6%96%AD%E8%B0%83%E6%95%B4%E7%9B%B4%E5%88%B0%E6%89%BE%E5%88%B0%E8%B6%85%E5%8F%82%E6%95%B0%E7%9A%84%E8%BF%87%E7%A8%8B.png" class=""><p><strong>数据集足够时</strong>，我们采取上述调参流程，不断调整，最终使得<strong>模型评估值最高</strong>的超参数值即为我们要找的<strong>最优超参数</strong>；</p><p><strong>数据值不足一万时</strong>，采用<strong>交叉验证</strong>（——》<strong>训练集与验证集</strong>之间的数据相互转换《——）</p><ul><li><strong>K折交叉验证</strong>——将训练集分为K份的交叉验证方式</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8711_%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.png" class=""><p>此时在<strong>均值曲线</strong>上，使得模型评估值最大的超参数值即为最优超参数值</p><p>出现多个超参数时，采用的就是一个超参数组合</p><ul><li><p><strong>留一交叉验证</strong>——（样本量极少时——<em><strong>小于50</strong></em>才用）缺乏样本的情况下，每次只取一个样本作为验证集，此时的K和数据个数相等</p></li><li><p><strong>常规的数据集划分比例</strong>：</p></li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8712_%E5%B8%B8%E8%A7%84%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%92%E5%88%86%E6%83%85%E5%86%B5.png" class=""><ul><li>数据集数量庞大时不可这样划分：<ul><li>验证集是为了得到最优超参数，1万左右的数据即可达到效果；</li><li>测试集是为了验证模型正确性，1万左右的数据即具有代表性；</li><li>划分比例变为——$100:1:1$</li></ul></li></ul><h2 id="四、损失函数——得到的值无正负之分"><a href="#四、损失函数——得到的值无正负之分" class="headerlink" title="四、损失函数——得到的值无正负之分"></a>四、损失函数——得到的值无正负之分</h2><ul><li><strong>量化模型预测值与标签真实值之间的差异</strong>，帮助筛选出更好的模型</li></ul><h2 id="五、最终转化成最优化问题"><a href="#五、最终转化成最优化问题" class="headerlink" title="五、最终转化成最优化问题"></a>五、最终转化成最优化问题</h2><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8713_%E4%BD%BF%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%BE%97%E5%88%B0%E7%9A%84%E5%80%BC%E6%9C%80%E5%B0%8F%E5%8C%96.png" class="" title="style&#x3D;transform: scale(0.5);"><ul><li><p>目标：找到一组$\theta$，使$样本x到映射值y尖$之间的偏差最小</p></li><li><p>最优化问题中有两种函数：</p><ul><li><p><strong>凸函数</strong>：任意两点连线组成的线段都在这两点的函数曲线（曲面）的同一方向——<strong>凸函数只有一个全局最优解</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8714_%E5%87%B8%E5%87%BD%E6%95%B0.png" class="" title="style&#x3D;transform: scale(0.8);"><p><strong>求导找到最值点则可找到全局最优解</strong></p><p><strong>沿着梯度下降的方向更新参数，寻找最优解</strong></p></li><li><p><strong>非凸函数</strong>：</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8715_%E9%9D%9E%E5%87%B8%E5%87%BD%E6%95%B0.png" class="" title="style&#x3D;transform: scale(0.8);"></li></ul></li></ul><h1 id="（二）神经网络模型"><a href="#（二）神经网络模型" class="headerlink" title="（二）神经网络模型"></a>（二）神经网络模型</h1><ul><li><p>一种机器学习（有监督学习）模型；</p></li><li><p><strong>深度学习</strong>：深度神经网络（由深的层构成的神经网络模型）</p></li><li><p>神经网络模型由<strong>神经元模型</strong>为单位组成</p></li></ul><h2 id="一、神经元模型"><a href="#一、神经元模型" class="headerlink" title="一、神经元模型"></a>一、神经元模型</h2><ol><li><strong>变量</strong>：<ul><li>输入维度$D$</li><li>$D&#x3D;2$时，两个输入$x_0$和$x_1$</li><li>各自的权重$w_0$和$w_1$</li><li>还有一个值永远为1的虚拟输入（<strong>偏置函数</strong>），其对应的权重$w_2$为偏置参数、偏置项</li><li><strong>激活函数$f$</strong>：早期使用<strong>Sigmoid函数</strong>——一种常用的S型（Sigmoidal）激活函数<ul><li>作用：将任意实数输入映射到**$(0,1)$**的区间内，输出值可以解释为概率</li><li>数学定义：$\sigma(x)&#x3D;\frac{1}{1+e^{-x}}$</li><li>$x$为总输入值，即个实际输入量经过加权求和之后得到的值</li><li>特性：输出范围（0,1），适合表示概率；严格递增函数；处处可导（<strong>在反向传播中便于计算梯度</strong>）</li></ul></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Sigmoid函数</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>/(<span class="hljs-number">1</span>+np.exp(-x))<br><br>x = np.linspace(-<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">100</span>)<br>y = sigmoid(x)<br>plt.plot(x,y)<br>plt.title(<span class="hljs-string">&quot;Sigmoid Function&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;x&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;σ(x)&quot;</span>)<br>plt.grid()<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8717_Sigmoid%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF.png" class="" title="style&#x3D;transform: scale(0.8);"><ul><li>在0的右侧，x越大，输出越接近1；在0的左侧，x越大，输出越接近0；</li></ul><ol start="2"><li><strong>一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果</strong></li></ol><h2 id="二、神经网络模型"><a href="#二、神经网络模型" class="headerlink" title="二、神经网络模型"></a>二、神经网络模型</h2><ul><li><strong>浅层神经网络</strong>：只包含输入层、隐藏层和输出层</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8718_%E6%B5%85%E5%B1%82%E6%A8%A1%E5%9E%8B.png" class=""><h3 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h3><ul><li><p><strong>前馈神经网络</strong>——信号从输入层向输出层单向传输的网络</p><ul><li><p>信号传输：<strong>前向传播</strong>、<strong>反向传播（BP算法）</strong></p><ul><li><p>&#x3D;&#x3D;前向传播&#x3D;&#x3D;：信号传入模型，经过一层层运算得到输出</p></li><li><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8719_%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%AD.png" class=""><p>输入层、输出层都有两个神经元：说明输入和输出的数据都是二维的</p><p>在这里我们在隐藏层和输出层都采用$Sigmoid函数$来作为激活函数</p></li><li><p>&#x3D;&#x3D;<strong>反向传播</strong>&#x3D;&#x3D;：输出层往回传（<strong>前向传播的相反过程，所以回传的时候要考虑清楚</strong>）——<strong>用于传输误差</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8720_%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD.png" class=""><p>往回传，$E_{o1}$先经过$o_1$的激活单元再经过加权单元，最后再传给$w20$——过程本质上是<strong>链式法则求偏导</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8721_%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E5%88%B0w11%E7%9A%84%E6%83%85%E5%86%B5.png" class=""><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8722_%E6%B1%82%E5%81%8F%E5%AF%BC%E7%9A%84%E8%BF%87%E7%A8%8B.png" class=""><p>红色公式：梯度下降法的权重更新公式更新$w_11$的值</p></li></ul></li></ul></li><li><p><strong>循环神经网络（记忆网络）</strong>——信号除了向后传输之外还会回传给自身的网络，当前神经元节点上$t时刻$的输出值在$t+1$时刻还会作为输入重新传输回来，使得网络<strong>具备记忆能力</strong></p></li><li><p><strong>图神经网络</strong>——由一个额外的图来定义，基本单位：&#x3D;&#x3D;一组神经元&#x3D;&#x3D;</p></li></ul><h3 id="2-网络结构"><a href="#2-网络结构" class="headerlink" title="2.网络结构"></a>2.网络结构</h3><ul><li>要素：网络层数（网络深度）、每层神经元的个数（网络宽度）</li></ul><p>——网络深度增加，模型能够拟合更复杂的函数，完成更复杂的任务，但运算量也暴增、梯度消失、梯度爆炸</p><p>————需要根据应用场景和综合算力来综合权衡</p><h3 id="3-激活函数"><a href="#3-激活函数" class="headerlink" title="3.激活函数"></a>3.激活函数</h3><p>前向激活、反向梯度回传（链式法则）</p><h4 id="（1）-Sigmoid-函数"><a href="#（1）-Sigmoid-函数" class="headerlink" title="（1）$Sigmoid$函数"></a>（1）$Sigmoid$函数</h4><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8723_Sigmoid%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%AF%BC%E6%95%B0.png" class=""><ul><li><strong>双侧饱和</strong></li><li>全为正梯度饱和会影响神经网络的收敛，会出现<strong>梯度消失</strong></li></ul><h4 id="（2）-tanh-函数"><a href="#（2）-tanh-函数" class="headerlink" title="（2）$tanh$函数"></a>（2）$tanh$函数</h4><p>——又叫双曲正切函数：</p><p>$tanh(x)&#x3D;\frac{e^x-e^{-x}}{e^x+e^{-x}}$</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8724_tahn%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%AF%BC%E6%95%B0.png" class=""><ul><li><p>有正有负，可以有效解决$sigmoid函数恒大于0$带来的收敛慢的问题</p></li><li><p>但也存在梯度饱和，所以也会出现梯度消失</p></li><li><p>运算效率</p></li></ul><h4 id="（3）-ReLU-函数"><a href="#（3）-ReLU-函数" class="headerlink" title="（3）$ReLU$函数"></a>（3）$ReLU$函数</h4><p>——又叫线性整流函数</p><p>$ReLU(x)&#x3D;max(0,x)$</p><p>解决了梯度消失和运算效率的问题</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8725_Relu%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%AF%BC%E6%95%B0.png" class=""><ul><li><strong>单侧饱和</strong></li><li>函数输入为负值时，输出为0；</li></ul><p>​        函数输入为正值时，输出等于输入值；</p><ul><li>函数输入为正值时，梯度值恒为1——有效解决了梯度消失的问题；</li><li>只存在<strong>线性关系</strong>，计算量比$sigmoid和tanh函数$少很多；</li><li><strong>缺陷</strong>：学习率过大时，一些神经元会永久性失活——影响网络正常更新</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8726_%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E6%97%B6%E5%8F%97%E5%BD%B1%E5%93%8D%E7%9A%84%E5%8E%9F%E5%9B%A0.png" class="" title="style&#x3D;transform: scale(0.8);"><p>学习率过大时，会导致$\mu\Delta w^t$大于$w^t$的情况，使得$w^{t+1}$的值变为负值</p><p>——》权重为负值时，输入网络的正值会在和权重相乘后也变为负值</p><p>——》负值经过$ReLU$变为0，对应的$ReLU$导数也为0</p><p>——》导致$\mu\Delta w^t$为0</p><p>——》$w$得不到更新，一直为负</p><p>——》其神经元一直输出0，永久失活</p><p>——》<strong>死亡ReLU问题</strong></p><h4 id="（4）-Leaky-ReLU-函数"><a href="#（4）-Leaky-ReLU-函数" class="headerlink" title="（4）$Leaky\  ReLU$函数"></a>（4）$Leaky\  ReLU$函数</h4><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8727_Leaky_ReLU%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" class="" title="style&#x3D;transform: scale(0.8);"><p>针对<strong>Dead ReLU</strong>而提出的激活函数</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8728.png" class=""><hr><p><strong>好的激活函数</strong>应该满足两个条件：</p><ul><li>单侧饱和</li><li>输出值分布在0的两侧</li></ul><hr><h4 id="（5）-ELU-函数"><a href="#（5）-ELU-函数" class="headerlink" title="（5）$ELU$函数"></a>（5）$ELU$函数</h4><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8729_ELU%E5%87%BD%E6%95%B0.png" class=""><h4 id="（6）-swish-函数"><a href="#（6）-swish-函数" class="headerlink" title="（6）$swish$函数"></a>（6）$swish$函数</h4><p>表达式：$Swish(x)&#x3D;x\cdot \sigma(\beta \cdot x)$</p><ul><li>$\sigma$：$Sigmoid函数$</li><li>$\beta$：可调节参数</li><li>$\sigma(\beta \cdot x)$：$\frac{1}{1+e^{-\beta x}}$</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8730_Swish%E5%87%BD%E6%95%B0.png" class=""><ul><li><p>$Sigmoid$ 函数：起到了门控单元的作用</p></li><li><p>先通过门控单元得到的输出在于输入信号相乘得到输出值</p></li><li><p><strong>满足单侧饱和、输出值分布在0的两侧</strong></p></li></ul><h2 id="三、全连接神经网络——多层感知机"><a href="#三、全连接神经网络——多层感知机" class="headerlink" title="三、全连接神经网络——多层感知机"></a>三、全连接神经网络——多层感知机</h2><p>有缺陷</p><h2 id="四、卷积神经网络（CNN）"><a href="#四、卷积神经网络（CNN）" class="headerlink" title="四、卷积神经网络（CNN）"></a>四、卷积神经网络（CNN）</h2><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8731_%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" class=""><p>——<strong>特征提取器</strong>，能够对图像、音频等数据进行特征提取（卷积赋予的）</p><h3 id="1-系统分类："><a href="#1-系统分类：" class="headerlink" title="1.系统分类："></a>1.系统分类：</h3><ul><li><strong>无记忆系统</strong>：系统输出只与当前输入有关 $y_t&#x3D;f(x_t)$<ul><li>e.g 信号放大器</li></ul></li><li><strong>记忆系统</strong>：输出与当前输入及历史输入都有关系</li></ul><h3 id="2-卷积：用来计算有记忆系统的输出问题"><a href="#2-卷积：用来计算有记忆系统的输出问题" class="headerlink" title="2.卷积：用来计算有记忆系统的输出问题"></a>2.<strong>卷积</strong>：用来计算<strong>有记忆系统的输出问题</strong></h3><ul><li><p>系统输出要满足的两个条件：</p><ul><li>线性——输入和输出成比例</li><li>时不变——不同的时刻，相同的输入应得到相同的输出</li></ul></li><li><p>为什么要<strong>卷</strong>（<strong>对响应函数先进行翻转</strong>）：系统有处理时间延迟，所以信号衰减了，这个时刻的输出是前一段时刻输入的总信号的总和影响的</p></li><li><p><strong>离散卷积（一维）</strong>：$y(t)&#x3D;f(t)*g(t)&#x3D;\sum^{+\infty}_{i&#x3D;-\infty}f(i)\cdot g(t-i)$</p><ul><li><p>此处的$*$：表示卷积运算</p></li><li><p>$y(t)$：$t$时刻的响应输出</p></li><li><p>例子：</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8732.png" class="" title="style&#x3D;transform: scale(0.8);"><p>$g(t)变为g(-t)$，计算t时刻的响应输出，再把$g(-t)$平移$t$个单位</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8733.png" class="" title="style&#x3D;transform: scale(0.8);"><ul><li>卷积结果就等于0和1时刻两函数对应值分别相乘，乘积再相加的结果</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8734.png" class="" title="style&#x3D;transform: scale(0.8);"><p>假设在$T&#x3D;6$时刻运算结束，就可以得到一个长度为7的输出序列</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8735.png" class="" title="style&#x3D;transform: scale(0.8);"></li></ul></li><li><p><strong>连续卷积（一维）</strong>：$y(t)&#x3D;\int ^{+\infty}_{-\infty}f(i)\cdot g(t-i)di$</p><ul><li>$i$：积分变量</li><li>$t$：函数$g(-i)$平移的量</li></ul></li><li><p><strong>二维 离散卷积</strong>：$y(i,j)&#x3D;f(i,j)*g(i,j)&#x3D;\sum_m \sum_n f(m,n)\cdot g(i-m,j-n)$</p></li><li><p><strong>响应函数的处理</strong>：上下、左右翻转，之后先沿横坐标方向，再沿纵坐标方向平移</p></li></ul><h3 id="3-卷积运算过程"><a href="#3-卷积运算过程" class="headerlink" title="3.卷积运算过程"></a>3.卷积运算过程</h3><h4 id="（1）单通道的二维数据："><a href="#（1）单通道的二维数据：" class="headerlink" title="（1）单通道的二维数据："></a>（1）<strong>单通道的二维数据：</strong></h4><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8736_%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%BF%87%E7%A8%8B.png" class=""><ul><li><strong>特征图</strong>：</li><li><strong>权重</strong>：卷积核</li><li><strong>步长</strong>：超参数，在设计卷积层时手动设定（——》影响卷积大小和尺寸——》影响特征提取的效果和运算量<ul><li>要压缩信息、减小输出尺寸时：设定较大的步长</li></ul></li><li><strong>填充（padding）</strong>：超参数——卷积操作会使得图像逐渐减小（特征图减小到1×1时就没办法再卷积）+<strong>图像边缘处的信息没有被充分利用</strong>（边缘的只参与一次卷积运算，影响一个输出结果）——》padding出现，来解决这些问题<ul><li><strong>padding的具体操作</strong>：沿着图像边缘做填充</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># padding值为1：表示填充一个像素</span><br><span class="hljs-comment"># ————》填充：上下左右（边）各填充一个像素</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">####</span><br><span class="hljs-string">#  #</span><br><span class="hljs-string">#  #</span><br><span class="hljs-string">####</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># padding职为2：表示填充两个像素</span><br><span class="hljs-comment"># ————》图像周围填充两个像素</span><br></code></pre></td></tr></table></figure><ul><li><strong>目的</strong>：填充（padding）后，得到的特征图大小不变</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8737.png" class=""><p><strong>&#x3D;&#x3D;$w_{out}&#x3D;floor(\frac{w_{in}+2*padding-F}{stride})+1$&#x3D;&#x3D;</strong>    ——》默认宽高相同，不同时则需要将宽和高分别带入式子计算得出输出尺寸</p><ul><li>$w_{out}$：输出尺寸</li><li>$w_{in}$：输入尺寸</li><li>$padding$：填充像素个数</li><li>$F$：卷积核大小</li><li>$stride$：步长</li><li>$floor$：向下取整</li></ul><hr><h4 id="（2）多通道卷积："><a href="#（2）多通道卷积：" class="headerlink" title="（2）多通道卷积："></a>（2）<strong>多通道卷积</strong>：</h4><p>卷积核的通道个数要和输入数据的通道个数一致，卷积结果为所有通道的卷积和，<strong>最终输出仍为一个二维的特征图</strong>；</p><p>e.g：RGB——<strong>三通道输入，但只有一个卷积核——所以输出只有一个通道</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8738_%E4%B8%89%E9%80%9A%E9%81%93%E5%8D%B7%E7%A7%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90.png" class=""><ul><li>各通道计算得到的值相加则为输出中对应的值</li></ul><p><em><strong>实际中，每一层都会有&#x3D;&#x3D;多个卷积核&#x3D;&#x3D;参与计算</strong></em></p><p>每个卷积核分别于输入卷积进行运算得到一个单通道的输出</p><p>——》多个单通道的输出拼在一起</p><p>——》多通道的输出</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8739_%E5%8D%B7%E7%A7%AF%E5%B1%82.png" class=""><ul><li>卷积层的参数：卷积核的大小、数量及步长</li></ul><p>——》卷积层的权重参数可以通过训练来优化——》使卷积层能更好地提取输入数据中的特征</p><h3 id="4-卷积层"><a href="#4-卷积层" class="headerlink" title="4.卷积层"></a>4.卷积层</h3><ul><li><strong>边缘特征提取</strong>：图像分类、目标检测的基本任务<ul><li>边缘：灰度值、颜色或纹理结构等突变的地方——表示一个区域的结束，也表示另一个区域的开始</li></ul></li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8740.png" class=""><p>一阶导变化较大，二阶导经过零点</p><ul><li><p>连续一阶微分：$lim_{\epsilon \rightarrow 0}\frac{f(x+\epsilon)-f(x)}{\epsilon}$ 或 $lim_{\epsilon \rightarrow 0}\frac{f(x+\epsilon)-f(x-\epsilon)}{2\epsilon}$</p></li><li><p>离散一阶微分：$y^{‘}(t)&#x3D;\frac{y(t+1)-y(t-1)}{2}$   </p></li><li><p>卷积核：$[- \frac{1}{2},0,\frac{1}{2}]$，系数$\frac{1}{2}$可以舍弃，变为$[-1,0,1]$，与输入层相乘便可得到边缘区域的边缘特征&#x3D;&#x3D;（？）&#x3D;&#x3D;</p></li><li><p>灰度图像：可看做一个<strong>二维离散函数</strong></p><ul><li>图像中任意一行：看做<strong>像素点随着$x轴$变化的信号</strong></li><li>图像中任意一列：看做<strong>像素点随着$y轴$变化的信号</strong></li></ul></li></ul><h4 id="卷积操作的两大特点："><a href="#卷积操作的两大特点：" class="headerlink" title="卷积操作的两大特点："></a>卷积操作的两大特点：</h4><ul><li><p><strong>局部感受野</strong>：感受野——神经元在初始输入数据上所覆盖的区域——即在计算时所看到的输入计算的部分</p><ul><li><p>卷积层中，每一层只和上一层的部分区域有连接——局部——较小的感受野</p></li><li><p>网络层逐渐加深，<strong>卷积+池化</strong>操作——》使得神经元的感受野逐渐扩大——》下一层对上一层的信息进行整合——》最深层对所有信息进行整合——》得到全局的信息——》用于最终的决策任务（分类、检测、分割等）——》此时，<strong>神经元的感受野可以覆盖整个图像</strong></p><p>——层次化学习机制，使得卷积神经网络既可以<strong>感知局部信息</strong>，又有<strong>获取全局信息</strong>的能力</p><p>——从通道上说：每个输出神经元和所有通道保持全连接——so，<strong>卷积层是特殊的全连接层</strong></p></li></ul></li><li><p><strong>权重共享机制</strong></p><ul><li>都用的一个卷积核（权重共享——减少了参数量，降低过拟合风险，提高泛化能力）</li><li>卷积核的通道数和输入通道数相同，卷积核的个数和输出通道相同</li></ul></li></ul><h3 id="5-池化层"><a href="#5-池化层" class="headerlink" title="5.池化层"></a>5.池化层</h3><ul><li>定义：把一个窗口中的所有特征信息浓缩为一个输出</li></ul><p>——》<strong>减小输出尺寸</strong></p><p>——》在模型结构中增加池化层，可以<strong>提高模型对输入图像中物体平移变化的鲁棒性</strong>——<strong>平移不变性</strong></p><ul><li><p>和卷积类似，都是通过<strong>滑动窗口来进行运算</strong>的，但<strong>不需要权重参数</strong>，池化操作的每个通道都是单独计算的</p></li><li><p>输入通道数&#x3D;输出通道数</p><h4 id="常见池化操作："><a href="#常见池化操作：" class="headerlink" title="常见池化操作："></a><strong>常见池化操作</strong>：</h4><ul><li><strong>平均池化（Mean Pooling）</strong>：在窗口内计算平均值作为输出</li><li><strong>最大池化（Max Pooling）</strong>：在窗口内找到最大值作为输出</li></ul></li><li><p>在卷积操作之后进行，<strong>本质是采样</strong>，输入的特征图经过池化层后输出的尺寸会减小（《&#x3D;减少了网络的参数数量&#x3D;》），防止过拟合</p></li></ul><h3 id="6-其他多种卷积操作"><a href="#6-其他多种卷积操作" class="headerlink" title="6.其他多种卷积操作"></a>6.其他多种卷积操作</h3><h4 id="（1）反卷积（转置卷积、逆卷积）"><a href="#（1）反卷积（转置卷积、逆卷积）" class="headerlink" title="（1）反卷积（转置卷积、逆卷积）"></a>（1）反卷积（转置卷积、逆卷积）</h4><ul><li><p><strong>上采样</strong>：使输入较小的图像变为输出更大的图像</p><ul><li><p>常用方法：单线性插值、双线性插值（人为设计的，不能很好地适配）</p></li><li><p>**反卷积（转置卷积、逆卷积）**应运而生：常用于生成式网络</p><ul><li><p>卷积的逆操作</p></li><li><table><thead><tr><th align="center">卷积</th><th align="center">反卷积</th></tr></thead><tbody><tr><td align="center">多对一的映射关系</td><td align="center">一对多的映射关系</td></tr><tr><td align="center"></td><td align="center"></td></tr></tbody></table></li><li></li></ul></li></ul></li></ul><h4 id="（2）空洞卷积（膨胀卷积）"><a href="#（2）空洞卷积（膨胀卷积）" class="headerlink" title="（2）空洞卷积（膨胀卷积）"></a>（2）空洞卷积（膨胀卷积）</h4><p>除了卷积核尺寸、步长和填充外，引入了一个新参数：<strong>膨胀率</strong></p><h4 id="（3）可分离卷积"><a href="#（3）可分离卷积" class="headerlink" title="（3）可分离卷积"></a>（3）可分离卷积</h4><ul><li><strong>空间可分离卷积</strong>：（宽高维度）在空间维度上对卷积核进行拆分——》一个卷积运算转化为多个顺序执行的卷积运算</li><li><strong>深度可分离卷积</strong>：（通道维度）在通道维度上对标准卷积进行拆分处理</li></ul><p><strong>以下代码来自Github</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 训练+测试</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> data<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> cv2<br><br>torch.manual_seed(<span class="hljs-number">1</span>) <span class="hljs-comment"># 使用随机化种子使神经网络的初始化每次都相同</span><br><br><span class="hljs-comment"># 超参数</span><br>EPOCH = <span class="hljs-number">1</span> <span class="hljs-comment"># 训练整批数据的次数</span><br>BATCH_SIZE = <span class="hljs-number">50</span><br>LR = <span class="hljs-number">0.001</span> <span class="hljs-comment">#  学习率</span><br>DOWNLOAD_MNIST = <span class="hljs-literal">True</span> <span class="hljs-comment"># 表示还未下载数据集，若数据集下载好了就写False</span><br><br><span class="hljs-comment"># 下载Mnist手写数据集</span><br>train_data = torchvision.datasets.MNIST(<br>    root = <span class="hljs-string">&#x27;./data/data&#x27;</span>, <span class="hljs-comment"># 保存或提取的位置，放在当前文件夹中</span><br>    train = <span class="hljs-literal">True</span>, <span class="hljs-comment"># true表明用于训练的数据，false表示用于测试的数据</span><br>    transform = torchvision.transforms.ToTensor(), <span class="hljs-comment"># 转换PIL.Image or Numpy.ndarray</span><br><br>    download = DOWNLOAD_MNIST, <span class="hljs-comment"># 已经下载了就无需再下载</span><br>)<br><br>test_data = torchvision.datasets.MNIST(<br>root = <span class="hljs-string">&#x27;./data/data&#x27;</span>, <span class="hljs-comment"># 保存或提取的位置，放在当前文件夹中</span><br>    train = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 测试集</span><br>)<br><br><span class="hljs-comment"># 批训练50个samples， 1 channel，28×28（50,1,28,28）</span><br><span class="hljs-comment"># torch中的Dataloader是用来包装数据的工具，能帮我们有效迭代数据，这样就可以进行批训练</span><br>train_loader = data.DataLoader(<br>    dataset = train_data,<br>    batch_size = BATCH_SIZE,<br>    shuffle = <span class="hljs-literal">True</span> <span class="hljs-comment"># 是否打乱数据（一般都打乱）</span><br>)<br><br><span class="hljs-comment"># 进行测试</span><br><span class="hljs-comment"># 为节省时间，测试时只测试前2000个</span><br><br>test_x = torch.unsqueeze(test_data.train_data,dim=<span class="hljs-number">1</span>).<span class="hljs-built_in">type</span>(torch.FloatTensor)[:<span class="hljs-number">2000</span>]/<span class="hljs-number">255</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># torch.unsqueeze(a):对数据维度进行扩充，这样shape就从(2000,28,28)-&gt;(2000,1,28,28)</span><br><span class="hljs-string"># 图像的pixel本来是0到255之间，除以255对图像进行归一化使取值范围在（0,1）</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test_y = test_data.test_labels[:<span class="hljs-number">2000</span>]<br><br><span class="hljs-comment"># 用class类来建立CNN模型</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># CNN流程：卷积(Conv2d)-&gt;激励函数(ReLU)-&gt;池化(Maxpooling)</span><br><span class="hljs-string">#        -&gt;卷积(Conv2d)-&gt;激励函数(ReLU)-&gt;池化(Maxpooling)</span><br><span class="hljs-string">#        -&gt;展平多维的卷积成的特征图-&gt;接入全连接层(Linear)-&gt;输出</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CNN</span>(nn.Module): <span class="hljs-comment"># 我们建立的CNN集成nn.Module这个模块</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(CNN,<span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 建立第一个卷积(Conv2d)-&gt;激励函数(ReLU)-&gt;池化(Maxpooling)</span><br>        <span class="hljs-variable language_">self</span>.conv1 = nn.Sequential(<br>            <span class="hljs-comment"># 第一个卷积con2d</span><br>            nn.Conv2d( <span class="hljs-comment"># 输入图像大小(1,28,28)</span><br>                in_channels = <span class="hljs-number">1</span>, <span class="hljs-comment"># 输入图片的高度，因为minist数据集为灰度图像（只有一个通道）</span><br>                out_channels = <span class="hljs-number">16</span>, <span class="hljs-comment"># n_filters 卷积核的高度</span><br>                kernel_size = <span class="hljs-number">5</span>, <span class="hljs-comment"># filter size 卷积核的大小 也就是长×宽=5×5</span><br>                stride = <span class="hljs-number">1</span>, <span class="hljs-comment"># 步长</span><br>                padding = <span class="hljs-number">2</span>, <span class="hljs-comment"># 填充 使得con2d输出的图像长宽不变 padding = (kernel_size-1)/2</span><br>            ), <span class="hljs-comment"># 输出图像大小(16,28,28)</span><br>            <span class="hljs-comment"># 激活函数</span><br>            nn.ReLU(),<br>            <span class="hljs-comment"># 池化，下采样</span><br>            nn.MaxPool2d(kernel_size = <span class="hljs-number">2</span>), <span class="hljs-comment"># 在2×2空间下采样</span><br>            <span class="hljs-comment"># 输出图像大小(16,14,14)</span><br><br>        )<br><br>        <span class="hljs-comment"># 建立第二个卷积(Conv2d)-&gt;激励函数(ReLU)-&gt;池化(MaxPooling)</span><br>        <span class="hljs-variable language_">self</span>.conv2 = nn.Sequential(<br>            nn.Conv2d( <span class="hljs-comment"># 也可以直接简化，写成nn.Conv2d(16,32,5,1,2)</span><br>            in_channels = <span class="hljs-number">16</span>,<br>            out_channels =<span class="hljs-number">32</span>,<br>            kernel_size = <span class="hljs-number">5</span>,<br>            stride =<span class="hljs-number">1</span>,<br>            padding = <span class="hljs-number">2</span><br>        ),<br>        <span class="hljs-comment"># 输出图像大小(32,14,14)</span><br>            nn.ReLU(),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>)<br>            <span class="hljs-comment"># 输出图像大小(32,7,7)</span><br>        )<br>        <span class="hljs-comment"># 建立全卷积连接层</span><br>        <span class="hljs-variable language_">self</span>.out = nn.Linear(<span class="hljs-number">32</span>*<span class="hljs-number">7</span>*<span class="hljs-number">7</span>,<span class="hljs-number">10</span>) <span class="hljs-comment"># 输出是10个类</span><br><br>        <span class="hljs-comment"># 下面开始定义x的传播路线</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>            x = <span class="hljs-variable language_">self</span>.conv1(x) <span class="hljs-comment"># x先通过conv1</span><br>            x = <span class="hljs-variable language_">self</span>.conv2(x) <span class="hljs-comment"># 再通过conv2</span><br>            <br>            <span class="hljs-comment"># 把每个批次的每一个输入都拉成一个维度，即(batch_size,32*7*7)</span><br>            <span class="hljs-comment"># 因为pytorch里特征的形式是[bs,channel,h,w]，所以x.size(0)就是batchsize</span><br>            <br>            <br>            x = x.view(x.size(<span class="hljs-number">0</span>),-<span class="hljs-number">1</span>) <span class="hljs-comment"># view就是把x弄成batchsize行个tensor</span><br>            output = <span class="hljs-variable language_">self</span>.out(x)<br>            <span class="hljs-keyword">return</span> output<br><br>cnn = CNN()<br><span class="hljs-built_in">print</span>(cnn)<br><br><span class="hljs-comment"># 训练</span><br><span class="hljs-comment"># 把x和y都放入variable中，然后放入cnn中计算output，最后再计算误差</span><br><br><span class="hljs-comment"># 优化器选择Adam</span><br>optimizer = torch.optim.Adam(cnn.parameters(),lr = LR)<br><span class="hljs-comment"># 损失函数</span><br>loss_func = nn.CrossEntropyLoss() <span class="hljs-comment"># 目标标签就是one-hotted</span><br><br><span class="hljs-comment"># 开始训练</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH):<br>    <span class="hljs-keyword">for</span> step,(b_x,b_y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader): <span class="hljs-comment"># 分配batch data</span><br>        output = cnn(b_x) <span class="hljs-comment"># 现将数据放到cnn中计算output</span><br>        loss = loss_func(output,b_y) <span class="hljs-comment"># 输出和真实标签的loss，二者位置不可颠倒</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 清除之前学到的梯度的参数</span><br>        loss.backward() <span class="hljs-comment"># 反向传播，计算梯度</span><br>        optimizer.step() <span class="hljs-comment"># 应用梯度</span><br><br>        <span class="hljs-keyword">if</span> step % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:<br>            test_output = cnn(test_x)<br>            pred_y = torch.<span class="hljs-built_in">max</span>(test_output,<span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].data.numpy()<br>            accuracy = <span class="hljs-built_in">float</span>((pred_y == test_y.data.numpy()).astype(<span class="hljs-built_in">int</span>).<span class="hljs-built_in">sum</span>())/<span class="hljs-built_in">float</span>(test_y.size(<span class="hljs-number">0</span>))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch:&#x27;</span>,epoch,<span class="hljs-string">&#x27;| train loss: %.4f&#x27;</span> % loss.data.numpy(),<span class="hljs-string">&#x27;|test.accuracy:%.2f&#x27;</span> % accuracy)<br>torch.save(cnn.state_dict(),<span class="hljs-string">&#x27;cnn.pkl&#x27;</span>) <span class="hljs-comment"># 保存模型</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习</title>
    <link href="/2025/04/24/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/24/JavaScript%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript学习"><a href="#JavaScript学习" class="headerlink" title="JavaScript学习"></a>JavaScript学习</h1><h2 id="一、Introduction"><a href="#一、Introduction" class="headerlink" title="一、Introduction"></a>一、Introduction</h2><ol><li><strong><code>javascript</code></strong>:跨平台、面向对象的脚本语言</li></ol><ul><li><code>java</code>：JavaScript遵循大部分Java的表达语法、命名规范以及基础控制流结构，所以改名JavaScript，但也有很多区别：<ul><li>不必声明所有的变量、类和方法。</li><li>不必关心方法是否是公有、私有或者受保护的，也不需要实现接口。</li><li>无需显式指定变量、参数、方法返回值的类型。</li></ul></li><li><code>script</code>：脚本</li></ul><ol start="2"><li><strong>包含</strong>：一个对象标准库（例如，<code>Array</code>、<code>Date</code> 和 <code>Math</code>）和一套核心语言元素（例如，运算符、控制结构和语句）</li></ol><table><thead><tr><th align="left">JavaScript</th><th align="left">Java</th></tr></thead><tbody><tr><td align="left">面向对象。不区分对象类型。继承通过原型机制实现，可以向对象动态地添加属性和方法。</td><td align="left">基于类。对象分为类和实例，所有的继承通过类层级实现。不能向类和实例动态地添加属性或方法。</td></tr><tr><td align="left">不需要声明变量数据类型（动态类型，松散类型）。</td><td align="left">必须声明变量数据类型（静态类型，强类型）。</td></tr><tr><td align="left">不能自动写入硬盘。</td><td align="left">可以自动写入硬盘。</td></tr></tbody></table><ol start="3"><li><p><strong>操作平台</strong>：<code>JavaScript控制台</code>（<code>web控制台/控制台</code>）</p><ul><li><strong>作用</strong>：在当前界面输入并运行JavaScript</li><li><strong>使用方法</strong>：控制台的工作方式正好就像 <code>eval</code>：返回输入的上一个表达式。出于简化的目的，可以这样想象，每次向控制台输入时，输入实际上由 <code>console.log</code> 包围在 <code>eval</code> 周围，就像这样：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;3+5&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>多行输入模式</strong>：默认情况下，在输入一行代码后，如果你按下 Enter（或者 Return，取决于你的键盘），然后会执行你输入的字符串。进入多行输入模式：</p><ul><li>如果你输入的字符串不完整（例如，你输入的是 <code>function foo() &#123;</code>），然后控制台会将 Enter 当作换行，这样你就能输入另一行。</li><li>如果你在按下 Enter 的同时按下 Shift，然后控制台会将其当作换行，这样你就能输入另一行。</li></ul></li></ol><ul><li><strong>初学时的使用框架</strong>：严格模式&amp;立即调用函数表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br>    <span class="hljs-comment">/*代码开始*/</span><br>  <br>    <span class="hljs-comment">/*代码结束*/</span><br>&#125;<br>)();<br></code></pre></td></tr></table></figure><h2 id="二、语法与类型"><a href="#二、语法与类型" class="headerlink" title="二、语法与类型"></a>二、语法与类型</h2><ol><li><p><strong>基础</strong>：</p><ul><li>大小写敏感</li><li>使用<strong>Unicode字符集</strong></li><li>指令称为语句，<strong>用分号(;)分隔</strong>【多条语句在一行，必须加分号；一条语句独占一行的话，可以省略分号】</li></ul></li><li><p><strong>注释</strong>：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释，和C++一样的 但不能直接嵌套哈</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 你可以通过转义正斜杠 /* 嵌套注释 *\/ */</span><br></code></pre></td></tr></table></figure><p>也有别的注释，例如：<strong>hashbang注释</strong>语法（一种用于指定执行脚本的特定 Javascript 引擎路径的特殊注释）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-meta">#!/usr/bin/env node</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>声明</strong>：</li></ol><ul><li><code>var</code>：声明一个变量，可选择将其初始化一个值——可以用来声明<strong>局部</strong>变量和<strong>全局</strong>变量，具体取决于<em>执行上下文</em></li><li><code>let</code>：声明一个块级作用域的局部变量，可选择将其初始化为一个值</li><li><code>const</code>：声明一个块级作用域的只读命名常量</li></ul><ol start="4"><li><strong>变量</strong>：又叫<code>标识符</code>，用作值的符号名</li></ol><ul><li><strong>命名规则</strong>：<strong>字母、下划线以及美元符号</strong>开头  后续可以是字母数字下划线<ul><li>可以在标识符中使用大部分 Unicode 字母，例如 <code>å</code> 和 <code>ü</code></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习</title>
    <link href="/2025/04/24/HTML%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/24/HTML%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML学习"><a href="#HTML学习" class="headerlink" title="HTML学习"></a>HTML学习</h1><h2 id="一、语法规范"><a href="#一、语法规范" class="headerlink" title="一、语法规范"></a>一、语法规范</h2><h3 id="1-基本语法"><a href="#1-基本语法" class="headerlink" title="1. 基本语法"></a>1. 基本语法</h3><ol><li>HTML标签：尖括号包围的关键词</li><li>HTML标签通常<strong>成对出现</strong>，<strong>双标签</strong> e.g.<code>&lt;head&gt; &lt;/head&gt;</code></li><li>但还有的就单个出现，e.g.<code>&lt;br/&gt;</code></li></ol><h3 id="2-标签关系"><a href="#2-标签关系" class="headerlink" title="2. 标签关系"></a>2. 标签关系</h3><p>双标签关系分为：包含关系、并列关系</p><ol><li><p><strong>包含关系</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>并列关系</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二、基本骨架"><a href="#二、基本骨架" class="headerlink" title="二、基本骨架"></a>二、基本骨架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--文档类型的声明标签，必须放在第一行--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span> = <span class="hljs-string">&#x27;en&#x27;</span>&gt;</span><br><span class="hljs-comment">&lt;!--定义网页显示的语言--en:英文网页；CN：中文，但其实里面的字无所谓，但是会触发是否翻译提示--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--在head里面用Meta标签来定义使用的字符集charset--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        学习前端第一天--HTML<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三、常用标签"><a href="#三、常用标签" class="headerlink" title="三、常用标签"></a>三、常用标签</h2><ol><li><p><strong>标题</strong>：<code>&lt;h1&gt;&lt;/h1&gt;</code>~&#96;<h6></h6>&#96;，重要程度、等等逐渐减弱</p></li><li><p><strong>段落</strong>：<code>&lt;p&gt;&lt;/p&gt;</code>，生成的段落之间空隙大</p><ul><li><code>&lt;br /&gt;</code>：<strong>强制换行</strong>，但间隙小，只是简单地另起一行</li></ul></li><li><p><strong>文本格式化标签</strong>：突出重要性，比普通文字重要</p><ul><li><strong>加粗</strong>：<strong><code>&lt;strong&gt;&lt;/strong&gt;</code></strong>（语意更加强烈）,<code>&lt;b&gt;&lt;/b&gt;</code></li><li><strong>倾斜</strong>：<strong><code>&lt;em&gt;&lt;/em&gt;</code></strong>（语意更加强烈）<code>&lt;i&gt;&lt;/i&gt;</code></li><li><strong>删除线</strong>：<strong><code>&lt;del&gt;&lt;/del&gt;</code></strong>（语意更加强烈）,<code>&lt;s&gt;&lt;/s&gt;</code></li><li><strong>下划线</strong>：<strong><code>&lt;ins&gt;&lt;/ins&gt;</code></strong>（同上）,<code>&lt;u&gt;&lt;/u&gt;</code></li><li><strong>highlight</strong>：<strong><code>&lt;mark&gt;&lt;/mark&gt;</code></strong></li><li><strong>下标</strong>：<strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong></li></ul></li><li><p><strong>盛放内容的盒子，无语意</strong>：</p><ul><li><strong><code>&lt;div&gt;&lt;/div&gt;</code></strong>：独占一行</li><li><strong><code>&lt;span&gt;&lt;/span&gt;</code></strong>：在同一行，span互相之间有间隙</li></ul></li><li><p><strong>图像标签</strong>：<strong><code>&lt;img src=&quot;图像URL&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot; width=&quot;设定宽度&quot; height=&quot;设定高度&quot; broder=&quot;边框粗细&quot;&gt;</code></strong></p><ul><li><strong>src</strong>：必须属性，表明路径<ul><li><strong>相对路径</strong>：1. 同一级：直接文件名.jpg；2.下一级：那就所在的文件夹&#x2F;文件名.jpg；3.<strong>上一级</strong>：**<code>../</code>**文件名.jpg；…</li><li><strong>绝对路径</strong>：1.直接复制来的文件地址D:&#x2F;…&#x2F;…&#x2F;…jpg；（不常用，甚至是不用）2.网络中的路径</li></ul></li><li><strong>alt</strong>：图片显示不出来时用该文字替换</li><li><strong>title</strong>：鼠标放到图片上时显示的提示文本</li><li><strong>width&#x2F;height</strong>：一般两个只修改一个，；另一个会自适应地改变；同时修改可能会压缩图片使变形</li><li><strong>broder</strong>：设置边框粗细</li></ul></li><li><p>&#x3D;&#x3D;<strong>超链接标签</strong>&#x3D;&#x3D;：<strong><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</code></strong></p><ul><li><strong>&#x3D;&#x3D;href&#x3D;&#x3D;</strong>：<ul><li><strong>外部链接</strong>：以<code>http://</code>开头</li><li><strong>内部链接</strong>：在同一级目录下</li><li><strong>空链接</strong>：# <code>&lt;a href=&quot;#&quot;&gt;</code></li><li><strong>下载链接</strong>：href中地址是文件或压缩包，点击后会下载该文件</li><li><strong>锚点链接</strong>：在herf中设置属性值为**<code>#名字</code><strong>形式；找到目标位置标签，在其中添加一个</strong><code>id属性</code>**&#x3D;刚才的名字</li></ul></li><li><strong>target</strong>：<code>target=&quot;_self&quot;</code>：当前界面打开；<code>target=&quot;_blank&quot;</code>：在新建标签页中打开</li></ul></li><li><p><strong>表格标签</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头单元格中的文字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>&lt;tr&gt;&lt;/tr&gt;</code>：表格中的行，嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>中</p></li><li><p><code>&lt;td&gt;&lt;/td&gt;</code>：单元格，嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>中</p></li><li><p>作用：显示、展示数据</p></li><li><p><strong>表格标签结构</strong>：分<strong>表头<code>&lt;thead&gt;&lt;/thead&gt;</code><strong>和</strong>表体<code>&lt;tbody&gt;&lt;/tbody&gt;</code></strong></p></li><li><p><strong>表格属性</strong>：后面用<strong>CSS</strong>来</p></li></ul></li></ol><table><thead><tr><th align="center"><strong>属性名</strong></th><th align="center"><strong>属性值</strong></th><th align="center"><strong>描述</strong></th></tr></thead><tbody><tr><td align="center">align</td><td align="center">left、center、right</td><td align="center">规定表格相对周围元素的对齐方式</td></tr><tr><td align="center">border</td><td align="center">1或””</td><td align="center">规定表格单元是否拥有边框，默认为””（无边框）</td></tr><tr><td align="center">cellpadding</td><td align="center">像素值</td><td align="center">规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td align="center">callspacing</td><td align="center">像素值</td><td align="center">规定单元格之间的空白，默认2像素（所以不设置的话，就会有空隙）</td></tr><tr><td align="center">width</td><td align="center">像素值或百分比</td><td align="center">规定表格宽度</td></tr></tbody></table><ul><li><strong>合并单元格</strong>：<ul><li><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250320211056711.png" alt="image-20250320211056711"></li><li>步骤：1. 确定跨行还是跨列；2.找到目标单元格 写上<code>合并方式=合并的单元格数量</code>；e.g：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>；3.删除多余的单元格</li></ul></li></ul><ol start="8"><li><p><strong>列表标签</strong>：</p><ul><li><p><strong>无序列表</strong>：<code>&lt;ul&gt;&lt;/ul&gt;</code>后面只能跟<code>&lt;li&gt;&lt;/li&gt;</code>标签，其余全不能放（标签、文字…）</p><ul><li>使用较多</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>haha<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>有序列表</strong>：<code>&lt;ol&gt;&lt;/ol&gt;</code>后面依然跟<code>&lt;li&gt;&lt;/li&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>heihei<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>&#x3D;&#x3D;<strong>自定义列表</strong>&#x3D;&#x3D;：<code>&lt;dl&gt;&lt;/dl&gt;</code>;<code>&lt;dt&gt;&lt;/dt&gt;</code>;<code>&lt;dd&gt;&lt;/dd&gt;</code>;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>表单列表</strong>：（账号注册收集详细信息那一页用到的）</p><ul><li><p><strong>表单域</strong>：<code>&lt;form&gt;&lt;/form&gt;</code>——将该范围内的表单元素提交给服务器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>    各种表单元素控件<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">属性</th><th align="center">属性值</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">action</td><td align="center">url地址</td><td align="center">指定接收并处理表单数据的服务器的url地址</td></tr><tr><td align="center">method</td><td align="center">get&#x2F;post</td><td align="center">设置表单数据的提交方式，其取值为get或post</td></tr><tr><td align="center">name</td><td align="center">名称</td><td align="center">指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table></li><li><p><strong>表单控件（表单元素）</strong>：</p><ul><li><p><strong>input表单元素</strong>：<code>&lt;input type=&quot;（有给定）属性值&quot; name=&quot;（自定义）属性值&quot; value=&quot;（自定义）属性值&quot; checked=&quot;checked&quot;（这样的话就默认勾选了） maxlength=&quot;正整数&quot;（最多输入的字符数）&gt;</code></p><ul><li><strong>type中的常用属性</strong>：</li></ul><table><thead><tr><th align="center">属性值</th><th align="left">描述（用于定义…</th></tr></thead><tbody><tr><td align="center">button</td><td align="left">可点击按钮（多数情况下，用于通过JavaScript启动脚本）</td></tr><tr><td align="center">checkbox</td><td align="left">复选框</td></tr><tr><td align="center">file</td><td align="left">输入字段和“浏览”按钮，供文件上传</td></tr><tr><td align="center">hidden</td><td align="left">隐藏字段</td></tr><tr><td align="center">image</td><td align="left">图像的提交按钮</td></tr><tr><td align="center">password</td><td align="left">密码字段。（该字段中的字符被掩码）</td></tr><tr><td align="center">radio</td><td align="left">单选按钮</td></tr><tr><td align="center">reset</td><td align="left">重置按钮；会清除表单中的所有数据</td></tr><tr><td align="center">submit</td><td align="left">提交按钮；把表单数据发送到服务器</td></tr><tr><td align="center">text</td><td align="left">单行的输入字段，用户可在其中输入文本。默认宽度：20个字符</td></tr></tbody></table><ul><li><strong>要实现单选功能</strong>：type要设置成radio外，<strong>name也要设置成一样的！！！</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">性别：男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span> 女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span> 不想告知<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>name</strong>：用于区分不同的表单元素（实现单选，必须是一个name）</li><li><strong>value</strong>：表单刚打开时就想默认显示的文字，那就设置到value中去</li><li><strong>checked</strong>：<strong>单选按钮和复选框</strong>可以设置checked属性，当页面打开时可以默认选中这个按钮</li></ul></li><li><p><strong><code>&lt;label&gt;</code>标签</strong>：input元素定义标注（标签）——用于绑定一个表单元素，当点击<code>&lt;label&gt;</code>中的文本时，浏览器会自动将焦点（或光标）转到对应的表单元素上。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">性别：<br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;handsome&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;handsome&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;some&quot;</span>&gt;</span>不想告知<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;some&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--实现了单选且扩大点击域--&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>select下拉表单元素</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>textarea文本域表单元素</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--cols:一行显示的字符数；rows:写几行 但其实不用，实际应用中用CSS--&gt;</span><br>文本内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p><strong>引用</strong></p><ul><li><p><code>&lt;q&gt;&lt;/q&gt;</code>：加引号</p></li><li><p><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;....&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>缩写</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;world health origanization&quot;</span>&gt;</span>WHO<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="html-rgb-color"><a href="#html-rgb-color" class="headerlink" title="html rgb color"></a><strong>html rgb color</strong></h3></li></ul><ol><li>RGB 颜色基础概念</li></ol><p>RGB 代表红(Red)、绿(Green)、蓝(Blue)，是一种加色模型，通过不同比例的三原色混合来创建各种颜色。</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li>每种颜色分量取值范围：0-255</li><li>共可表示 16,777,216 种颜色 (256×256×256)</li><li>广泛应用于电子显示设备</li></ul><ol start="2"><li>HTML&#x2F;CSS 中的 RGB 表示方法</li></ol><p>2.1 函数表示法 <code>rgb()</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">/* 纯红色 */</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">/* 纯绿色 */</span><br><span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>);  <span class="hljs-comment">/* 纯蓝色 */</span><br></code></pre></td></tr></table></figure><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">rgb(red, green, blue)<br></code></pre></td></tr></table></figure><ul><li>参数范围：0-255 的整数</li></ul><p>2.2 十六进制表示法 <code>#RRGGBB</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#FF0000</span>;  <span class="hljs-comment">/* 纯红色 */</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00FF00</span>;  <span class="hljs-comment">/* 纯绿色 */</span><br><span class="hljs-attribute">border-color</span>: <span class="hljs-number">#0000FF</span>;  <span class="hljs-comment">/* 纯蓝色 */</span><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>每两位表示一个颜色分量 (RR, GG, BB)</li><li>不区分大小写 (#ff0000 与 #FF0000 等效)</li><li>简写形式：当每对数字相同时可简写为3位 (#F00 等同于 #FF0000)</li></ul><p>2.3 RGBA 表示法 (带透明度)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);  <span class="hljs-comment">/* 半透明红色 */</span><br></code></pre></td></tr></table></figure><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">rgba(red, green, blue, alpha)<br></code></pre></td></tr></table></figure><ul><li>alpha 参数范围：0.0 (完全透明) - 1.0 (完全不透明)</li></ul><ol start="3"><li>RGB 颜色值计算原理</li></ol><p>3.1 颜色混合示例</p><table><thead><tr><th>颜色组合</th><th>计算结果</th><th>示例代码</th></tr></thead><tbody><tr><td>红 + 绿</td><td>黄色</td><td><code>rgb(255, 255, 0)</code></td></tr><tr><td>红 + 蓝</td><td>品红</td><td><code>rgb(255, 0, 255)</code></td></tr><tr><td>绿 + 蓝</td><td>青色</td><td><code>rgb(0, 255, 255)</code></td></tr><tr><td>全混合</td><td>白色</td><td><code>rgb(255, 255, 255)</code></td></tr><tr><td>无颜色</td><td>黑色</td><td><code>rgb(0, 0, 0)</code></td></tr></tbody></table><p>3.2 灰度色表示</p><p>灰度色是红绿蓝三通道值相等的颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">rgb(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment">/* 中等灰色 */</span><br>rgb(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>)     <span class="hljs-comment">/* 深灰色 */</span><br>rgb(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)  <span class="hljs-comment">/* 浅灰色 */</span><br></code></pre></td></tr></table></figure><ol start="4"><li>实际应用技巧</li></ol><p>4.1 颜色选择工具</p><ul><li>使用开发者工具中的取色器</li><li>在线工具如 Adobe Color, Coolors</li><li>设计软件中的颜色选择面板</li></ul><p>4.2 常用颜色速查表</p><table><thead><tr><th>颜色名称</th><th>RGB 值</th><th>十六进制</th></tr></thead><tbody><tr><td>纯白</td><td>rgb(255,255,255)</td><td>#FFFFFF</td></tr><tr><td>纯黑</td><td>rgb(0,0,0)</td><td>#000000</td></tr><tr><td>红色</td><td>rgb(255,0,0)</td><td>#FF0000</td></tr><tr><td>绿色</td><td>rgb(0,255,0)</td><td>#00FF00</td></tr><tr><td>蓝色</td><td>rgb(0,0,255)</td><td>#0000FF</td></tr><tr><td>黄色</td><td>rgb(255,255,0)</td><td>#FFFF00</td></tr><tr><td>青色</td><td>rgb(0,255,255)</td><td>#00FFFF</td></tr><tr><td>品红</td><td>rgb(255,0,255)</td><td>#FF00FF</td></tr></tbody></table><p>4.3 颜色转换公式</p><p><strong>RGB 转十六进制：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">rgbToHex</span>(<span class="hljs-params">r, g, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#&quot;</span> + ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>) + (r &lt;&lt; <span class="hljs-number">16</span>) + (g &lt;&lt; <span class="hljs-number">8</span>) + b).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>十六进制转 RGB：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hexToRgb</span>(<span class="hljs-params">hex</span>) &#123;<br>  <span class="hljs-keyword">let</span> r = <span class="hljs-built_in">parseInt</span>(hex.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), <span class="hljs-number">16</span>),<br>      g = <span class="hljs-built_in">parseInt</span>(hex.<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), <span class="hljs-number">16</span>),<br>      b = <span class="hljs-built_in">parseInt</span>(hex.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>), <span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;r&#125;</span>, <span class="hljs-subst">$&#123;g&#125;</span>, <span class="hljs-subst">$&#123;b&#125;</span>)`</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>浏览器支持与最佳实践</li></ol><ul><li>所有现代浏览器都完全支持 RGB 颜色表示法</li><li>为保持兼容性，建议同时提供十六进制备用值</li><li>在 CSS 变量中使用 RGB 更方便调整透明度：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--primary-color</span>: <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.element</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-built_in">var</span>(--primary-color));<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-built_in">var</span>(--primary-color), <span class="hljs-number">0.3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="HSL-color"><a href="#HSL-color" class="headerlink" title="HSL color"></a><strong>HSL color</strong></h3><p><strong>HSL颜色</strong>，这正是现代网页开发中推荐的一种颜色写法！</p><p>它是相对于传统的十六进制（<code>#RRGGBB</code>）或者 <code>rgb()</code> 更<strong>直观、可调性强</strong>的一种方式，特别适合在做主题配色或渐变效果时使用。</p><p><strong>HSL颜色简介</strong></p><p>HSL 代表：</p><ul><li><strong>H</strong>（Hue 色相）<ul><li>取值范围：<code>0~360</code>，表示色环上的角度，例如：<ul><li><code>0</code> 是红色</li><li><code>120</code> 是绿色</li><li><code>240</code> 是蓝色</li></ul></li></ul></li><li><strong>S</strong>（Saturation 饱和度）<ul><li>取值：百分比 <code>%</code>，越高越鲜艳，越低越灰。</li></ul></li><li><strong>L</strong>（Lightness 明度）<ul><li>取值：百分比 <code>%</code>，<code>0%</code> 是黑，<code>100%</code> 是白，<code>50%</code> 是最纯的颜色。</li></ul></li></ul><ul><li>✅ 语法格式：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.example</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">50%</span>); <span class="hljs-comment">/* 红色 */</span></span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">120</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">75%</span>); <span class="hljs-comment">/* 淡绿色背景 */</span></span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>✅ 示例说明：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">210</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">95%</span>); <span class="hljs-comment">/* 淡蓝色背景 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">210</span>, <span class="hljs-number">80%</span>, <span class="hljs-number">30%</span>); <span class="hljs-comment">/* 深蓝色标题 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">0</span>, <span class="hljs-number">60%</span>, <span class="hljs-number">40%</span>); <span class="hljs-comment">/* 暗红色段落文字 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello HSL<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph using HSL color.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>✅ HSL vs 旧写法对比</li></ul><table><thead><tr><th>类型</th><th>示例</th><th>是否推荐</th><th>说明</th></tr></thead><tbody><tr><td>旧写法</td><td><code>&lt;font color=&quot;red&quot;&gt;</code></td><td>❌ 不推荐</td><td>HTML中设置颜色已被淘汰</td></tr><tr><td>十六进制</td><td><code>color: #ff0000;</code></td><td>✅ 可用</td><td>常用，但不够直观</td></tr><tr><td><code>rgb()</code></td><td><code>color: rgb(255,0,0);</code></td><td>✅ 可用</td><td>直观但不方便做亮度调整</td></tr><tr><td><code>hsl()</code></td><td><code>color: hsl(0,100%,50%)</code></td><td>✅ 推荐！</td><td>现代开发常用，特别适合渐变和主题</td></tr></tbody></table><hr><hr><h2 id="HTML-知识点总览"><a href="#HTML-知识点总览" class="headerlink" title="HTML 知识点总览"></a>HTML 知识点总览</h2><h3 id="HTML-基础"><a href="#HTML-基础" class="headerlink" title="HTML 基础"></a>HTML 基础</h3><ul><li>什么是 HTML</li><li>HTML 文档结构<ul><li><code>&lt;!DOCTYPE html&gt;</code></li><li><code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code></li></ul></li><li>注释 <code>&lt;!-- comment --&gt;</code></li></ul><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><ul><li>标题标签 <code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code></li><li>段落 <code>&lt;p&gt;</code></li><li>换行 <code>&lt;br&gt;</code></li><li>水平线 <code>&lt;hr&gt;</code></li><li>文本格式化<ul><li><code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;u&gt;</code>, <code>&lt;small&gt;</code>, <code>&lt;mark&gt;</code></li><li><code>&lt;sub&gt;</code>, <code>&lt;sup&gt;</code>, <code>&lt;del&gt;</code>, <code>&lt;ins&gt;</code></li></ul></li></ul><h3 id="超链接与图像"><a href="#超链接与图像" class="headerlink" title="超链接与图像"></a>超链接与图像</h3><ul><li>超链接 <code>&lt;a href=&quot;...&quot;&gt;</code></li><li>图像 <code>&lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;</code></li><li>图像的宽高设置</li><li>target属性（如 <code>_blank</code>）</li></ul><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul><li>无序列表 <code>&lt;ul&gt;</code> + <code>&lt;li&gt;</code></li><li>有序列表 <code>&lt;ol&gt;</code> + <code>&lt;li&gt;</code></li><li>嵌套列表</li><li>描述列表 <code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code></li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul><li><code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;th&gt;</code></li><li>表头 <code>&lt;thead&gt;</code>，表体 <code>&lt;tbody&gt;</code>，表尾 <code>&lt;tfoot&gt;</code></li><li><code>colspan</code>, <code>rowspan</code></li><li>边框、边距、对齐属性（推荐用 CSS 控制）</li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ul><li><code>&lt;form&gt;</code>, <code>action</code>, <code>method</code></li><li>输入元素 <code>&lt;input&gt;</code><ul><li><code>type</code> 属性（text, password, checkbox, radio, submit, file, etc.）</li></ul></li><li>其他表单元素：<ul><li><code>&lt;textarea&gt;</code></li><li><code>&lt;select&gt;</code> + <code>&lt;option&gt;</code></li><li><code>&lt;label&gt;</code></li><li><code>&lt;button&gt;</code></li></ul></li><li>表单验证（必填、类型验证）</li></ul><h3 id="多媒体元素"><a href="#多媒体元素" class="headerlink" title="多媒体元素"></a>多媒体元素</h3><ul><li>音频 <code>&lt;audio src=&quot;...&quot; controls&gt;</code></li><li>视频 <code>&lt;video src=&quot;...&quot; controls&gt;</code></li><li>嵌入资源 <code>&lt;iframe&gt;</code>, <code>&lt;embed&gt;</code>, <code>&lt;object&gt;</code></li></ul><h3 id="语义化标签（HTML5）"><a href="#语义化标签（HTML5）" class="headerlink" title="语义化标签（HTML5）"></a>语义化标签（HTML5）</h3><ul><li><code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;figure&gt;</code>, <code>&lt;figcaption&gt;</code></li><li>好处：可读性高，利于SEO与无障碍支持</li></ul><h3 id="元信息与SEO"><a href="#元信息与SEO" class="headerlink" title="元信息与SEO"></a>元信息与SEO</h3><ul><li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></li><li><code>&lt;title&gt;</code></li><li><code>&lt;meta name=&quot;description&quot; content=&quot;...&quot;&gt;</code></li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></li></ul><h3 id="链接外部资源"><a href="#链接外部资源" class="headerlink" title="链接外部资源"></a>链接外部资源</h3><ul><li>外部 CSS：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</code></li><li>外部 JS：<code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></li><li>字体和图标库（如 Google Fonts, Font Awesome）</li></ul><h3 id="块级元素-vs-行内元素"><a href="#块级元素-vs-行内元素" class="headerlink" title="块级元素 vs 行内元素"></a>块级元素 vs 行内元素</h3><ul><li>块级：<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;~&lt;h6&gt;</code>, <code>&lt;section&gt;</code> 等</li><li>行内：<code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code> 等</li></ul><h3 id="全局属性（适用于所有HTML元素）"><a href="#全局属性（适用于所有HTML元素）" class="headerlink" title="全局属性（适用于所有HTML元素）"></a>全局属性（适用于所有HTML元素）</h3><ul><li><code>id</code></li><li><code>class</code></li><li><code>style</code></li><li><code>title</code></li><li><code>lang</code></li><li><code>data-*</code> 自定义属性</li></ul><h3 id="已淘汰-不推荐的标签和属性（由CSS替代）"><a href="#已淘汰-不推荐的标签和属性（由CSS替代）" class="headerlink" title="已淘汰&#x2F;不推荐的标签和属性（由CSS替代）"></a>已淘汰&#x2F;不推荐的标签和属性（由CSS替代）</h3><ul><li><code>&lt;font&gt;</code></li><li><code>&lt;center&gt;</code></li><li><code>&lt;marquee&gt;</code></li><li><code>bgcolor</code>, <code>align</code>, <code>border</code>, <code>width</code>, <code>height</code> 等旧式属性</li></ul><h3 id="HTML-中的颜色表示"><a href="#HTML-中的颜色表示" class="headerlink" title="HTML 中的颜色表示"></a>HTML 中的颜色表示</h3><ul><li>十六进制 <code>#RRGGBB</code></li><li>RGB <code>rgb(255, 0, 0)</code></li><li>RGBA <code>rgba(255, 0, 0, 0.5)</code></li><li>HSL <code>hsl(0, 100%, 50%)</code></li><li>HSLA <code>hsla(0, 100%, 50%, 0.5)</code></li><li>关键字颜色（如 <code>red</code>, <code>blue</code>, <code>black</code>）</li></ul><hr><p>Use CSS to make a yellow, 1 pixel thick, border around all paragraphs.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--核心语句--&gt;</span></span><br><span class="language-xml"> p&#123;border:1px  solid yellow;&#125;</span><br><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="🎯-题目要求"><a href="#🎯-题目要求" class="headerlink" title="🎯 题目要求"></a>🎯 题目要求</h2><blockquote><p>Use CSS to remove the underline from the link.</p></blockquote><hr><h2 id="✅-正确写法："><a href="#✅-正确写法：" class="headerlink" title="✅ 正确写法："></a>✅ 正确写法：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="🧠-原理解析"><a href="#🧠-原理解析" class="headerlink" title="🧠 原理解析"></a>🧠 原理解析</h2><ol><li><code>text-decoration</code> 是什么？</li></ol><p>这是一个 CSS 属性，用来设置文本的修饰效果，比如：</p><ul><li><code>underline</code> → 下划线（默认链接有）</li><li><code>overline</code> → 上划线</li><li><code>line-through</code> → 删除线</li><li><code>none</code> → 移除所有修饰（就是我们要的）</li></ul><ol start="2"><li>为什么超链接默认有下划线？</li></ol><p>HTML 原始设计中，超链接（<code>&lt;a&gt;</code>）为了在视觉上区分于普通文字，会自动加上下划线并呈蓝色。这是浏览器的默认样式，属于 <strong>User Agent Stylesheet（用户代理样式）</strong>。</p><p>现在的网页几乎都会使用 CSS 重新设计链接的样式：</p><ul><li>在导航栏中，<strong>大多数链接都取消了下划线</strong>，改用颜色、hover 效果、图标等方式来区分；</li><li>只有在正文或文章内的链接（如维基百科、知乎回答），才会保留下划线，以提示这是可点击内容；</li><li>很多现代设计系统（如 Tailwind CSS、Bootstrap）中，链接默认样式就已经重新定义过。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#0077cc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#005599</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://example.com&quot;</span>&gt;</span>Click here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> to visit the site.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个例子中：</p><ul><li>默认没有下划线；</li><li>鼠标悬停时加上下划线，强调交互感。</li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>text-decoration: none;</code></td><td>去掉链接下划线</td></tr><tr><td><code>text-decoration: underline;</code></td><td>添加下划线（可用于 hover）</td></tr></tbody></table><hr><h2 id="hover-伪类选择器简述"><a href="#hover-伪类选择器简述" class="headerlink" title=":hover 伪类选择器简述"></a><code>:hover</code> 伪类选择器简述</h2><p><code>:hover</code> 是 CSS 中的<strong>伪类（pseudo-class）</strong>，用于定义<strong>当用户将鼠标悬停（hover）在某个元素上时</strong>，该元素应该呈现什么样的样式。</p><hr><h2 id="✅-基本语法"><a href="#✅-基本语法" class="headerlink" title="✅ 基本语法"></a>✅ 基本语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">selector<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-comment">/* 鼠标悬停时的样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">text-decoration</span>: underline;<br>&#125;<br>&lt;<span class="hljs-selector-tag">a</span> href=&quot;#&quot;&gt;Hover me!&lt;/<span class="hljs-selector-tag">a</span>&gt;<br></code></pre></td></tr></table></figure><p>这个例子中，当鼠标悬停在链接上时，它会变成红色并加上下划线。</p><hr><h2 id="🧠-原理说明"><a href="#🧠-原理说明" class="headerlink" title="🧠 原理说明"></a>🧠 原理说明</h2><ul><li><code>:hover</code> 是<strong>交互式样式的核心</strong>，不需要 JavaScript 就能实现动态效果。</li><li>它会在<strong>用户把鼠标指针悬停到元素上</strong>的那一刻生效。</li></ul><hr><h2 id="🔥-现代网页应用现状"><a href="#🔥-现代网页应用现状" class="headerlink" title="🔥 现代网页应用现状"></a>🔥 现代网页应用现状</h2><p>在实际开发中，<code>:hover</code> 被广泛应用于：</p><table><thead><tr><th>应用场景</th><th>示例效果</th></tr></thead><tbody><tr><td>超链接</td><td>改变颜色、添加动画，提示点击</td></tr><tr><td>按钮</td><td>改变背景色、加阴影，增强反馈感</td></tr><tr><td>图片</td><td>缩放、模糊、加边框，丰富视觉体验</td></tr><tr><td>卡片元素</td><td>鼠标悬停高亮或弹出详细信息</td></tr></tbody></table><h3 id="举个真实点的例子（按钮-hover）："><a href="#举个真实点的例子（按钮-hover）：" class="headerlink" title="举个真实点的例子（按钮 hover）："></a>举个真实点的例子（按钮 hover）：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#007bff</span>;<br>  <span class="hljs-attribute">color</span>: white;<br>  <span class="hljs-attribute">border</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0056b3</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="💡-补充技巧"><a href="#💡-补充技巧" class="headerlink" title="💡 补充技巧"></a>💡 补充技巧</h2><ul><li><code>:hover</code> 也可以用在 <code>div</code>, <code>img</code>, <code>p</code>, <code>li</code> 等所有可见元素上。</li><li>如果你想实现点击后状态，应该用 <code>:active</code>；如果想设置默认状态，用 <code>:link</code> 或 <code>:visited</code>。</li></ul><hr><h2 id="✅-总结"><a href="#✅-总结" class="headerlink" title="✅ 总结"></a>✅ 总结</h2><table><thead><tr><th>伪类</th><th>含义</th></tr></thead><tbody><tr><td><code>:hover</code></td><td>鼠标悬停时的样式</td></tr><tr><td><code>:active</code></td><td>鼠标按下时的样式</td></tr><tr><td><code>:focus</code></td><td>元素获得焦点时（如点击输入框）</td></tr><tr><td><code>:visited</code></td><td>已访问的链接</td></tr><tr><td><code>:link</code></td><td>未访问的链接</td></tr></tbody></table><hr><h3 id="HTML-图像映射（Image-Map）"><a href="#HTML-图像映射（Image-Map）" class="headerlink" title="HTML 图像映射（Image Map）"></a>HTML 图像映射（Image Map）</h3><p>图像映射允许你为一张图片定义多个点击区域，这些区域可以链接到不同的页面或执行不同的操作。你可以为图片上的不同区域设置不同的超链接。</p><h3 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a><strong>基本原理</strong></h3><p><code>&lt;map&gt;</code> 元素和 <code>&lt;area&gt;</code> 元素一起使用来创建图像映射。每个 <code>&lt;area&gt;</code> 元素定义了图片上的一个点击区域，并且可以设置该区域的目标链接。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a><strong>语法</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">usemap</span>=<span class="hljs-string">&quot;#mapname&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Image&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapname&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;34,44,270,350&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Description&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://example.com&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;450,150,75&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Another link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://anotherexample.com&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a><strong>解释</strong></h3><ol><li><strong><code>&lt;img src=&quot;image.jpg&quot; usemap=&quot;#mapname&quot;&gt;</code></strong>：指定了图片，并将其与 <code>id</code> 为 <code>mapname</code> 的 <code>&lt;map&gt;</code> 元素关联。<code>usemap</code> 属性使得图片成为一个图像映射。</li><li><strong><code>&lt;map name=&quot;mapname&quot;&gt;</code></strong>：这是图像映射的容器，它包含所有的 <code>area</code> 元素，每个 <code>area</code> 元素代表图片的一个可点击区域。</li><li><strong><code>&lt;area&gt;</code> 元素</strong>：定义了一个点击区域，每个区域可以指定：<ul><li><strong><code>shape</code></strong>：区域的形状，常用值有：<ul><li><code>rect</code>：矩形（通过 <code>coords</code> 定义左上角和右下角的坐标）。</li><li><code>circle</code>：圆形（通过 <code>coords</code> 定义圆心坐标和半径）。</li><li><code>poly</code>：多边形（通过 <code>coords</code> 定义多边形的多个点）。</li></ul></li><li><strong><code>coords</code></strong>：定义区域的位置和大小（与 <code>shape</code> 属性配合使用）。例如，矩形的 <code>coords=&quot;x1,y1,x2,y2&quot;</code>，圆形的 <code>coords=&quot;x,y,radius&quot;</code>。</li><li><strong><code>href</code></strong>：点击该区域后跳转到的 URL。</li><li><strong><code>alt</code></strong>：区域的替代文本，帮助访问性和SEO。</li></ul></li></ol><h3 id="完整示例"><a href="#完整示例" class="headerlink" title="完整示例"></a><strong>完整示例</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Image Map Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Image Map Example<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://via.placeholder.com/500&quot;</span> <span class="hljs-attr">usemap</span>=<span class="hljs-string">&quot;#image-map&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Sample Image&quot;</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image-map&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Rectangular area: left-top (34,44), right-bottom (270,350) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;34,44,270,350&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Website 1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Circular area: center (450,150), radius (75) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;450,150,75&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Website 2&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.anotherexample.com&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Polygonal area --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;poly&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;100,100,200,100,150,150&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Polygon Area&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.yetanotherexample.com&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a><strong>说明</strong></h3><ol><li><strong>图片：</strong> <code>&lt;img src=&quot;https://via.placeholder.com/500&quot; usemap=&quot;#image-map&quot;&gt;</code>，这行代码指定了图片以及与其关联的图像映射 <code>#image-map</code>。</li><li><strong>图像映射：</strong> <code>&lt;map name=&quot;image-map&quot;&gt;</code>，指定了一个名为 <code>image-map</code> 的映射区域。所有的 <code>&lt;area&gt;</code> 元素定义了图片上的可点击区域。</li><li><strong>点击区域：</strong><ul><li><strong>矩形区域：</strong> 定义了一个矩形区域，点击后会跳转到 <code>https://www.example.com</code>。</li><li><strong>圆形区域：</strong> 定义了一个圆形区域，点击后会跳转到 <code>https://www.anotherexample.com</code>。</li><li><strong>多边形区域：</strong> 定义了一个多边形区域，点击后会跳转到 <code>https://www.yetanotherexample.com</code>。</li></ul></li></ol><h3 id="常见应用场景"><a href="#常见应用场景" class="headerlink" title="常见应用场景"></a><strong>常见应用场景</strong></h3><ul><li><strong>地图：</strong> 可以用图像映射做互动式地图，点击不同区域显示不同内容。</li><li><strong>产品展示：</strong> 将产品图像与各个部件的链接区域结合，点击某个区域显示该部分的详细信息。</li><li><strong>广告和营销：</strong> 用于图像上的广告链接，点击不同的部分跳转到不同的广告页面。</li></ul><h3 id="小贴士"><a href="#小贴士" class="headerlink" title="小贴士"></a><strong>小贴士</strong></h3><ul><li>在现代设计中，<code>&lt;map&gt;</code> 和 <code>&lt;area&gt;</code> 逐渐被其他方法替代，如 <code>CSS</code> 和 <code>JavaScript</code> 提供的交互效果。</li><li>对于响应式布局，使用图像映射时要注意，不同设备屏幕上的区域可能需要不同的尺寸和坐标，需要进行适配。</li></ul><hr><p><strong>网站图标（左边的那个）</strong></p><h3 id="HTML-Favicon-详细讲解"><a href="#HTML-Favicon-详细讲解" class="headerlink" title="HTML Favicon 详细讲解"></a><strong>HTML Favicon 详细讲解</strong></h3><p><strong>Favicon</strong>（即网站的图标）是显示在浏览器标签页、书签栏、历史记录等位置的小图标。它是网站品牌和标识的视觉表现，帮助用户快速识别网站。</p><p>在 HTML 中，<strong>favicon</strong> 是通过 <code>&lt;link&gt;</code> 标签来指定的，通常被放置在页面的 <code>&lt;head&gt;</code> 部分。它支持多种图像格式，比如 <code>.ico</code>、<code>.png</code>、<code>.jpg</code>、<code>.svg</code> 等。</p><h3 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a><strong>基本语法</strong></h3><p>在 HTML 中，favicon 通过以下的 <code>&lt;link&gt;</code> 标签来定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>&lt;link&gt;</code></strong>: 用来定义当前页面与外部资源的关系。</li><li><strong><code>rel=&quot;icon&quot;</code></strong>: 指明此链接是网站的 favicon。</li><li><strong><code>href=&quot;favicon.ico&quot;</code></strong>: 指定 favicon 的文件路径。<code>favicon.ico</code> 是传统的 favicon 文件名，通常是 <code>.ico</code> 格式。</li><li><strong><code>type=&quot;image/x-icon&quot;</code></strong>: 可选项，指定 favicon 的文件类型。默认情况下，如果是 <code>.ico</code> 文件，浏览器会自动识别。</li></ul><h3 id="常见的-Favicon-格式"><a href="#常见的-Favicon-格式" class="headerlink" title="常见的 Favicon 格式"></a><strong>常见的 Favicon 格式</strong></h3><ol><li><strong>ICO 格式</strong>:<ul><li><code>.ico</code> 是传统的 favicon 格式，它支持多种不同的图像尺寸和色深。</li><li><code>.ico</code> 文件支持 16x16px 和 32x32px 等多个不同分辨率图像，适应不同设备和浏览器的显示需求。</li></ul></li><li><strong>PNG 格式</strong>:<ul><li>现代浏览器支持 <code>.png</code> 格式的 favicon，通常选择 16x16 或 32x32 像素的 <code>.png</code> 文件。</li><li>使用 PNG 格式时，需要指定正确的类型：<code>type=&quot;image/png&quot;</code>。</li></ul></li><li><strong>SVG 格式</strong>:<ul><li>使用 <code>.svg</code> 格式的 favicon 具有更高的清晰度，适合现代浏览器。</li><li>需要指定 <code>type=&quot;image/svg+xml&quot;</code>。</li><li>优点是 SVG 是矢量图，可以在不同尺寸下保持清晰。</li></ul></li><li><strong>其他格式</strong>:<ul><li>也可以使用 <code>.jpg</code>、<code>.gif</code> 等格式，但这些格式通常不推荐用于 favicon，因为它们不像 <code>.ico</code> 和 <code>.png</code> 那样能够灵活适配不同的屏幕尺寸。</li></ul></li></ol><h3 id="不同格式的-Favicon-示例"><a href="#不同格式的-Favicon-示例" class="headerlink" title="不同格式的 Favicon 示例"></a><strong>不同格式的 Favicon 示例</strong></h3><ol><li><strong>ICO 格式的 Favicon</strong>:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><strong>PNG 格式的 Favicon</strong>:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.png&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><strong>SVG 格式的 Favicon</strong>:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.svg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/svg+xml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="不同设备和分辨率支持"><a href="#不同设备和分辨率支持" class="headerlink" title="不同设备和分辨率支持"></a><strong>不同设备和分辨率支持</strong></h3><p>为了在不同的设备上显示最佳的图标，通常需要准备不同尺寸的 favicon。现代网站常常使用多个 <code>link</code> 标签，提供不同尺寸的 favicon 以适配各种设备（如高分辨率屏幕、移动设备等）。</p><p>例如，提供不同尺寸的 favicon 图标：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon-16x16.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;16x16&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon-32x32.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;32x32&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon-48x48.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;48x48&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon-96x96.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;96x96&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Apple-Touch-Icon（iOS-图标）"><a href="#Apple-Touch-Icon（iOS-图标）" class="headerlink" title="Apple Touch Icon（iOS 图标）"></a><strong>Apple Touch Icon（iOS 图标）</strong></h3><p>iOS 设备（如 iPhone、iPad）通常使用 <strong>Apple Touch Icon</strong> 作为网页图标，特别是在用户将网页添加到主屏幕时。你可以通过指定 <code>&lt;link rel=&quot;apple-touch-icon&quot;&gt;</code> 来设置 iOS 的图标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;apple-icon.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此外，iOS 设备也支持不同尺寸的图标。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;57x57&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;apple-icon-57x57.png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;72x72&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;apple-icon-72x72.png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;114x114&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;apple-icon-114x114.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="主题颜色与-Favicon"><a href="#主题颜色与-Favicon" class="headerlink" title="主题颜色与 Favicon"></a><strong>主题颜色与 Favicon</strong></h3><p>现代浏览器（特别是移动设备）允许你设置网页的主题颜色，控制浏览器的工具栏颜色。你可以使用以下代码定义网页的主题颜色，同时配合使用 favicon：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;theme-color&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;#ffffff&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="如何选择合适的-Favicon"><a href="#如何选择合适的-Favicon" class="headerlink" title="如何选择合适的 Favicon"></a><strong>如何选择合适的 Favicon</strong></h3><ul><li><strong>尺寸</strong>：常见的尺寸是 16x16px 和 32x32px，适用于大多数浏览器和设备。如果需要支持高分辨率显示器（如 Retina 屏幕），则需要更大的图标尺寸（如 64x64px 或更大）。</li><li><strong>格式</strong>：<code>.ico</code> 是最传统和兼容性最好的格式，但如果你不需要兼容旧版浏览器，<code>.png</code> 或 <code>.svg</code> 是更现代且优质的选择。</li><li><strong>透明背景</strong>：为了让 favicon 在不同的背景下显示得更好，建议使用透明背景的图片（例如 <code>.png</code> 或 <code>.svg</code> 格式）。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h3><ol><li>Favicon 通过 <code>&lt;link&gt;</code> 标签在 <code>&lt;head&gt;</code> 中定义，使用 <code>rel=&quot;icon&quot;</code> 来指定图标。</li><li>常见的格式有 <code>.ico</code>、<code>.png</code> 和 <code>.svg</code>。</li><li>对于不同的设备，使用多个 <code>link</code> 标签来提供不同尺寸的图标。</li><li>对于 iOS 设备，可以使用 <code>apple-touch-icon</code> 来设置应用图标。</li><li>主题颜色和 favicon 可以一起使用，为用户提供一致的视觉体验。</li></ol><p>使用合适的 favicon 能提高网站的品牌辨识度，也能提升用户的体验。</p><hr><p>The CSS font size unit you’re referring to is:</p><h3 id="✅-vw-—-Viewport-Width✅-vw-—-视口宽度"><a href="#✅-vw-—-Viewport-Width✅-vw-—-视口宽度" class="headerlink" title="✅ vw — Viewport Width✅ vw —  视口宽度"></a>✅ <code>vw</code> — <em>Viewport Width</em>✅ <code>vw</code> —  <em>视口宽度</em></h3><hr><h3 id="🔍-What-is-vw"><a href="#🔍-What-is-vw" class="headerlink" title="🔍 What is vw?"></a>🔍 <strong>What is <code>vw</code>?</strong></h3><ul><li><code>vw</code> stands for <strong>viewport width</strong>.</li><li><code>1vw</code> &#x3D; <strong>1% of the width of the browser window</strong> (the viewport).</li><li>It’s a <strong>relative unit</strong>, so it scales depending on the device&#x2F;screen size.</li></ul><hr><p>定义变量：用<code>&lt;var&gt;&lt;/var&gt;</code></p><hr><p>当然可以！下面是关于 <strong>HTML 实体（HTML Entities）</strong> 的全面知识点，结构清晰，适合你用在 Typora 或做速通总结，使用 Markdown 编写，从 <code>###</code> 标题开始：</p><hr><h3 id="HTML-实体（HTML-Entities）"><a href="#HTML-实体（HTML-Entities）" class="headerlink" title="HTML 实体（HTML Entities）"></a>HTML 实体（HTML Entities）</h3><p>HTML 实体用于在网页中显示一些特殊字符，这些字符在 HTML 语法中具有特殊含义，或者在键盘上不容易输入。</p><hr><h4 id="为什么需要实体？"><a href="#为什么需要实体？" class="headerlink" title="为什么需要实体？"></a>为什么需要实体？</h4><ul><li>避免和 HTML 语法冲突（例如 <code>&lt;</code>, <code>&gt;</code>）</li><li>显示不可输入或保留的字符（例如版权符号 ©）</li><li>保证在不同浏览器中一致显示字符</li></ul><hr><h3 id="常用-HTML-实体一览表"><a href="#常用-HTML-实体一览表" class="headerlink" title="常用 HTML 实体一览表"></a>常用 HTML 实体一览表</h3><table><thead><tr><th>字符</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>和号</td><td><code>&amp;</code></td><td><code>&amp;</code></td></tr><tr><td><code>&lt;</code></td><td>小于号</td><td><code>&lt;</code></td><td><code>&lt;</code></td></tr><tr><td><code>&gt;</code></td><td>大于号</td><td><code>&gt;</code></td><td><code>&gt;</code></td></tr><tr><td><code>&quot;</code></td><td>双引号</td><td><code>&quot;</code></td><td><code>&quot;</code></td></tr><tr><td><code>&#39;</code></td><td>单引号</td><td><code>&#39;</code></td><td><code>&#39;</code></td></tr><tr><td><code>©</code></td><td>版权符号</td><td><code>©</code></td><td><code>©</code></td></tr><tr><td><code>®</code></td><td>注册商标</td><td><code>®</code></td><td><code>®</code></td></tr><tr><td><code>€</code></td><td>欧元符号</td><td><code>€</code></td><td><code>€</code></td></tr><tr><td><code> </code></td><td>不断行空格</td><td><code> </code></td><td><code> </code></td></tr></tbody></table><hr><h3 id="两种写法：命名-vs-数值"><a href="#两种写法：命名-vs-数值" class="headerlink" title="两种写法：命名 vs 数值"></a>两种写法：命名 vs 数值</h3><ul><li><strong>命名实体</strong>（更常用，可读性高）：<code>&lt;</code>, <code>©</code></li><li><strong>数值实体</strong>（兼容性好）：<code>&lt;</code>, <code>©</code></li></ul><p>两者效果完全一样，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>div<span class="hljs-symbol">&amp;gt;</span>Hello<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>会显示：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span>&gt;Hello&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="特殊空格："><a href="#特殊空格：" class="headerlink" title="特殊空格： "></a>特殊空格：<code> </code></h3><ul><li>表示不间断空格（Non-Breaking Space）</li><li>常用于强制两个词不被断行、手动控制排版空格</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我喜欢<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>你。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="在代码中显示-HTML-标签的方法："><a href="#在代码中显示-HTML-标签的方法：" class="headerlink" title="在代码中显示 HTML 标签的方法："></a>在代码中显示 HTML 标签的方法：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>h1<span class="hljs-symbol">&amp;gt;</span>Title<span class="hljs-symbol">&amp;lt;</span>/h1<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/04/24/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/04/24/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<img src="/2025/04/24/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/DIY%E6%B5%B7%E7%BB%B5%E5%AE%9D%E5%AE%9D.jpg" class=""><p>这是我的第一次博客网站创建尝试，参考很多人的教程，修删改很多次。。。</p><p>这个<code>yaml</code>的语法真的很严谨啊，光是这个缩进我都报错好多次，感谢GPT大大和csdn各路大佬的教程贴！！！！</p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/24/hello-world/"/>
    <url>/2025/04/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
