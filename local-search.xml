<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>hexo主题中配置emoji显示</title>
    <link href="/2025/05/24/hexo%E4%B8%BB%E9%A2%98%E4%B8%AD%E9%85%8D%E7%BD%AEemoji%E6%98%BE%E7%A4%BA/"/>
    <url>/2025/05/24/hexo%E4%B8%BB%E9%A2%98%E4%B8%AD%E9%85%8D%E7%BD%AEemoji%E6%98%BE%E7%A4%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="hexo-博客中配置-emoji-表情显示适用于-fluid-主题"><a class="markdownIt-Anchor" href="#hexo-博客中配置-emoji-表情显示适用于-fluid-主题"></a> Hexo 博客中配置 Emoji 表情显示（适用于 Fluid 主题）</h2><p>在 Hexo 博客中，如果你想通过 markdown 的 <code>&lt;span class=&quot;emoji&quot; alias=&quot;smile&quot; style=&quot;&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8&quot;&gt;&amp;#x1f604;&lt;/span&gt;</code> 语法来插入 emoji 表情，可以按照以下步骤进行配置。本教程以<strong>我使用的 Fluid 主题</strong>为例，进行配置。</p><hr><h3 id="1卸载默认的-markdown-渲染器"><a class="markdownIt-Anchor" href="#1卸载默认的-markdown-渲染器"></a> 1.卸载默认的 Markdown 渲染器</h3><p>Hexo 默认使用 <code>hexo-renderer-marked</code> 渲染器，它不支持 emoji 插件，因此我们要换成增强版的 <code>hexo-renderer-markdown-it-plus</code>。</p><p>在博客根目录打开终端，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm uninstall hexo-renderer-markdown-it<br></code></pre></td></tr></table></figure><hr><h3 id="2安装增强版渲染器及插件支持"><a class="markdownIt-Anchor" href="#2安装增强版渲染器及插件支持"></a> 2.安装增强版渲染器及插件支持</h3><p>继续在终端中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-renderer-markdown-it-plus --save<br></code></pre></td></tr></table></figure><hr><h3 id="3在-_configyml-中添加-emoji-插件配置"><a class="markdownIt-Anchor" href="#3在-_configyml-中添加-emoji-插件配置"></a> 3.在 <code>_config.yml</code> 中添加 emoji 插件配置</h3><p>打开 Hexo 根目录下的 <code>_config.yml</code> 文件，添加如下配置（可以放在文件末尾）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">markdown_it_plus:</span><br>  <span class="hljs-attr">highlight:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">html:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">xhtmlOut:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">breaks:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">linkify:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">typographer:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">plugins:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">plugin:</span><br>        <span class="hljs-attr">name:</span> <span class="hljs-string">markdown-it-emoji</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>确保缩进正确，否则会导致 Hexo 报错。</li><li>如果你之前配置过 <code>markdown:</code> 字段，请删除它。</li></ul><hr><h3 id="4清除缓存并重新生成部署"><a class="markdownIt-Anchor" href="#4清除缓存并重新生成部署"></a> 4.清除缓存并重新生成部署</h3><p>在终端中运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo g -d<br></code></pre></td></tr></table></figure><hr><h3 id="5写一篇测试博文试试看"><a class="markdownIt-Anchor" href="#5写一篇测试博文试试看"></a> 5.写一篇测试博文试试看！</h3><p>在你的 <code>.md</code> 文件中加入如下语法：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">Hello Emoji! <span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">&#x1f604;</span> <span class="emoji" alias="heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8">&#x2764;</span> <span class="emoji" alias="rocket" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8">&#x1f680;</span><br></code></pre></td></tr></table></figure><p>如果配置成功，则会显示如下：</p><p>Hello Emoji! <span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span> <span class="emoji" alias="heart" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8">❤</span> <span class="emoji" alias="rocket" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f680.png?v8">🚀</span></p><h3 id="示例效果"><a class="markdownIt-Anchor" href="#示例效果"></a> 示例效果</h3><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs txt">我今天好开心！<span class="emoji" alias="blush" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f60a.png?v8">&#x1f60a;</span><br>坚持梦想！<span class="emoji" alias="muscle" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f4aa.png?v8">&#x1f4aa;</span> <span class="emoji" alias="star" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/2b50.png?v8">&#x2b50;</span><br></code></pre></td></tr></table></figure><p>渲染后就是：</p><p>我今天好开心！😊<br>坚持梦想！💪 ⭐</p><hr><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><table><thead><tr><th>项目</th><th>说明</th></tr></thead><tbody><tr><td>渲染器更换</td><td><code>hexo-renderer-markdown-it-plus</code></td></tr><tr><td>插件支持方式</td><td><code>markdown_it_plus.plugins</code></td></tr><tr><td>插件名称</td><td><code>markdown-it-emoji</code></td></tr><tr><td>主题适配性</td><td>Fluid 主题完全兼容</td></tr><tr><td>适用语法</td><td><code>&lt;span class=&quot;emoji&quot; alias=&quot;smile&quot; style=&quot;&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8&quot;&gt;&amp;#x1f604;&lt;/span&gt;</code>、<code>&lt;span class=&quot;emoji&quot; alias=&quot;heart&quot; style=&quot;&quot; fallback-src=&quot;https://github.githubassets.com/images/icons/emoji/unicode/2764.png?v8&quot;&gt;&amp;#x2764;&lt;/span&gt;</code> 等 emoji 表情</td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>教程分享</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>梦想中的10年后</title>
    <link href="/2025/05/24/%E6%A2%A6%E6%83%B3%E4%B8%AD%E7%9A%8410%E5%B9%B4%E5%90%8E/"/>
    <url>/2025/05/24/%E6%A2%A6%E6%83%B3%E4%B8%AD%E7%9A%8410%E5%B9%B4%E5%90%8E/</url>
    
    <content type="html"><![CDATA[<h1 id="梦想中的十年后"><a class="markdownIt-Anchor" href="#梦想中的十年后"></a> 梦想中的十年后</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>看完zhan 丨的新视频，他说确定自己当下人生选择的最好方法是想象十年后的自己，希望自己是一个怎样的人，希望自己会在哪里，从事着什么样的工作。</p><p>最近我焦虑万分，看着即将到来的各种ddl，疲于行动。于是我坐在电脑前，new了一篇新blog，就是这篇：梦想中的十年后。</p><h2 id="具体希望"><a class="markdownIt-Anchor" href="#具体希望"></a> 具体希望</h2><h3 id="事业"><a class="markdownIt-Anchor" href="#事业"></a> 事业</h3><p>不是那种整天为了工作忙的焦头烂额的社畜，有正常的双休，坐在一间有落地窗的大办公室里，这个时候我可能以及自己创业成功了，可能是影视界的新星，也可能是很厉害的决策层领导，可以有时间出门旅游。可以像19岁的我一样<strong>在凌晨的机场摊开日记本听着歌，书写着自己对即将到来的旅途的期待</strong>。</p><p>可以在上海工作那就更好了。</p><p>那时的工资可以让我不用心疼往返于家乡和工作目的地的路费</p><p>如果10年后我就可以赚够让自己退休的钱那就更好了</p><h3 id="生活"><a class="markdownIt-Anchor" href="#生活"></a> 生活</h3><p>有一间我喜欢的房子，不用很大，但也可以很大，希望那时我已经可以让我的奶奶外婆爸爸妈妈姑姑等等亲人过上好日子。可以带奶奶姑姑爸爸妈妈去云南去海南旅游，在飞机上看漂亮的云。</p><p>已经去过或正要去<strong>德国</strong>，慕尼黑、汉堡等等都是我想去的城市。</p><p>去<strong>都柏林</strong>，2024年的暑假，我在经历了人生中第一次独自面对的大挫折后，躺在家里的沙发上看《我是加百列》中朴宝剑在都柏林以卢里的身份生活的这一期。好感动，好喜欢这种氛围。——》后来在小红书那种写一句关于自己名字的话，根据翻译来看自己的好运城市是哪一座时，我的名字得出来的结果就是<strong>都柏林</strong></p><p>看到了<strong>Adele</strong>的现场，亲耳听她唱一次《<strong>Love in The Dark</strong>》，这是我的入坑曲<span class="emoji" alias="cry" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f622.png?v8">😢</span></p><p>不再为同龄人的成就焦虑。每个人都有自己的生活节奏，他强任他强，清风拂山岗。</p><h3 id="爱情"><a class="markdownIt-Anchor" href="#爱情"></a> 爱情</h3><p>这个爱情，好虚无缥缈，至少在2025年、19岁的今天，我还从未感受过我梦想中的那种爱情。</p><p>希望能遇到一个很温柔的人吧，能带给我安全感就足够了</p><p>长得合我眼缘就好</p><p>如果遇不到这种人，我也不要去相亲。。。。</p><h2 id="后记"><a class="markdownIt-Anchor" href="#后记"></a> 后记</h2><p>其实，你非要我写，我真不知道我想成为什么样的人，小时候的自己对未来想成为一个什么样的人还是很有规划和想法的，但在大学的这两年，我渐渐地不敢想以后的生活，因为离我太近了。</p><blockquote><p>这种感觉就像是你可以管我要100万，但不能管我要100块，因为我真的有100块。。</p></blockquote><p><strong>我好像能够明确地知道什么样的人我暂时成为不了，什么人我不再愿意成为。</strong></p><blockquote><p>就像我现在如果考虑研究生的学校的话，不会再考虑清华北大了，甚至在高中时候就已经不再考虑清华北大了。虽然这也算是给自己设限，但换个角度看这个叫做有自知之明。</p><p>总之，我不再幻想自己是什么最厉害的人了。</p><p>。。。。</p></blockquote><p><strong>我失去天马行空地想象的权利了</strong>，至少在我看来，我已经成为这样一个人了。</p><p>年初在上海写给5年后自己的一封信时，我言语匮乏，我不知道要给五年后打开这封信的自己说些什么，我不知道。甚至我怕，那种言语的力量，使得事与愿违，那种言以泄败的恐惧感让我不敢说话，不敢表达，甚至于不敢想象。</p><p>希望十年后的自己天天开心，生活顺利。</p>]]></content>
    
    
    
    <tags>
      
      <tag>心情随笔</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Django初始</title>
    <link href="/2025/05/15/%E5%88%9D%E8%AF%86Django/"/>
    <url>/2025/05/15/%E5%88%9D%E8%AF%86Django/</url>
    
    <content type="html"><![CDATA[<h1 id="django框架"><a class="markdownIt-Anchor" href="#django框架"></a> Django框架</h1><h2 id="一-简介"><a class="markdownIt-Anchor" href="#一-简介"></a> 一、简介</h2><ol><li>python Web 框架</li><li><strong>MVC模式</strong>：Model（模型） View（视图） Controller（控制器）</li><li>实际是<strong>MVT模式</strong></li></ol><h2 id="二-初识django项目"><a class="markdownIt-Anchor" href="#二-初识django项目"></a> 二、初识Django项目</h2><h3 id="1django-admin命令行指令"><a class="markdownIt-Anchor" href="#1django-admin命令行指令"></a> 1.<strong><code>django-admin</code></strong>：命令行指令</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs CMD">Available subcommands:<br><br>[django]<br>    check      # 校验项目的完整性<br>    compilemessages<br>    createcachetable<br>    dbshell<br>    diffsettings<br>    dumpdata        # （数据库相关）把数据库数据导出到文件<br>    flush<br>    inspectdb<br>    loaddata        # （数据库相关）把文件数据导入到数据库<br>    makemessages<br>    makemigrations  # （数据库相关）创建模型变更的迁移文件<br>    migrate         # （数据库相关）执行上一个命令创建的迁移文件<br>    optimizemigration<br>    runserver      # 进入Django环境并且运行Django的项目（本地简易运行）<br>    sendtestemail<br>    shell          # 进入Django项目的python shell环境<br>    showmigrations<br>    sqlflush<br>    sqlmigrate<br>    sqlsequencereset<br>    squashmigrations<br>    startapp      # 创建一个Django应用<br>    startproject  # 创建一个Django项目<br>    test          # 跑一些需要单元测试的命令（执行Django用例测试）<br>    testserver<br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">基本常用命令</th><th style="text-align:center">介绍</th></tr></thead><tbody><tr><td style="text-align:center">startproject</td><td style="text-align:center">创建一个Django项目</td></tr><tr><td style="text-align:center">startapp</td><td style="text-align:center">创建一个Django应用</td></tr><tr><td style="text-align:center">test</td><td style="text-align:center">跑一些需要单元测试的命令（执行Django用例测试）</td></tr><tr><td style="text-align:center">shell</td><td style="text-align:center">进入Django项目的python shell环境</td></tr><tr><td style="text-align:center">runserver</td><td style="text-align:center">进入Django环境并且运行Django的项目（本地简易运行）</td></tr><tr><td style="text-align:center">check</td><td style="text-align:center">校验项目的完整性</td></tr></tbody></table><table><thead><tr><th style="text-align:center">数据库常用命令</th><th style="text-align:center">简介</th></tr></thead><tbody><tr><td style="text-align:center">makemigrations</td><td style="text-align:center">创建模型变更的迁移文件</td></tr><tr><td style="text-align:center">migrate</td><td style="text-align:center">执行上一个命令创建的迁移文件</td></tr><tr><td style="text-align:center">dumpdata</td><td style="text-align:center">把数据库数据导出到文件</td></tr><tr><td style="text-align:center">loaddata</td><td style="text-align:center">把文件数据导入到数据库</td></tr></tbody></table><h3 id="2-创建项目并认识项目的框架文件"><a class="markdownIt-Anchor" href="#2-创建项目并认识项目的框架文件"></a> 2. 创建项目并认识项目的框架文件</h3><h4 id="1python-managepy-startproject-django_introduction创建一个django项目"><a class="markdownIt-Anchor" href="#1python-managepy-startproject-django_introduction创建一个django项目"></a> （1）<code>python manage.py startproject django_introduction</code>创建一个Django项目</h4><p>环境、管理文件、项目创建命令、项目名称</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322154321008.png" alt="image-20250322154321008" style="zoom: 80%;" /><h4 id="2项目目录初始化项目的必备文件"><a class="markdownIt-Anchor" href="#2项目目录初始化项目的必备文件"></a> （2）项目目录–初始化项目的必备文件</h4><p><strong><code>settings.py</code></strong>：Django项目的配置文件</p><p><strong><code>urls.py</code></strong>：Django的路由文件</p><p><strong><code>wsgi.py</code></strong>：Django作为wsgj文件所需要的文件</p><h4 id="3managepy文件"><a class="markdownIt-Anchor" href="#3managepy文件"></a> （3）manage.py文件</h4><p>项目的管理文件</p><h4 id="4-通过python-managepy-runserver运行初始化项目"><a class="markdownIt-Anchor" href="#4-通过python-managepy-runserver运行初始化项目"></a> （4） 通过<code>python manage.py runserver</code>运行初始化项目</h4><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322154942417.png" alt="image-20250322154942417" style="zoom:67%;" /><p>出现此界面则初始化成功！</p><h2 id="三-初识django应用"><a class="markdownIt-Anchor" href="#三-初识django应用"></a> 三、初识Django应用</h2><h3 id="1django应用-vs-django项目"><a class="markdownIt-Anchor" href="#1django应用-vs-django项目"></a> 1.Django应用 VS Django项目</h3><ul><li>Django项目：包含Django项目</li></ul><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Django项目</th><th style="text-align:center">Django应用</th></tr></thead><tbody><tr><td style="text-align:center">定义</td><td style="text-align:center">基于Django的Web应用</td><td style="text-align:center">可重用的python软件包（不可以直接运行）</td></tr><tr><td style="text-align:center">包含关系</td><td style="text-align:center">一个Django项目包含<strong>一组配置</strong>和<strong>若干个Django应用</strong></td><td style="text-align:center">每个应用可以自己管理模型、视图、模版、路由和静态文件等</td></tr></tbody></table><h3 id="2django应用目录介绍"><a class="markdownIt-Anchor" href="#2django应用目录介绍"></a> 2.Django应用目录介绍</h3><h4 id="1python-managepy-startapp-blog创建一个django应用"><a class="markdownIt-Anchor" href="#1python-managepy-startapp-blog创建一个django应用"></a> （1）<code>python manage.py startapp blog</code>创建一个Django应用</h4><p>环境、管理文件、应用创建命令、应用名称</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322160316486.png" alt="image-20250322160316486" style="zoom:80%;" /><h4 id="2应用目录"><a class="markdownIt-Anchor" href="#2应用目录"></a> （2）应用目录</h4><p><strong><code>views.py</code></strong>：视图处理</p><p><strong><code>models.py</code></strong>：定义应用模型</p><p><strong><code>admin.py</code></strong>：定义Admin模块管理对象</p><p><strong><code>apps.py</code></strong>：声明应用</p><p><strong><code>tests.py</code></strong>：编写应用测试用例</p><p><strong><code>urls.py</code></strong>：<strong>（自行创建）</strong>，管理应用路由</p><h2 id="四-django-helloworld"><a class="markdownIt-Anchor" href="#四-django-helloworld"></a> 四、Django HelloWorld</h2><h3 id="1-django视图what-why和how"><a class="markdownIt-Anchor" href="#1-django视图what-why和how"></a> 1. Django视图（what、why和how）</h3><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322163548504.png" alt="image-20250322163548504" style="zoom:50%;" /><p>在**<code>views.py</code><strong>文件中定义函数，引入</strong><code>HttpResponse</code>**，然后封装</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">from django.http import HttpResponse</span><br></code></pre></td></tr></table></figure><p>视图函数定义如下：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">def hello_world(request): </span><br><span class="language-xml">    return HttpResponse(&quot;Hello World&quot;) </span><br></code></pre></td></tr></table></figure><h3 id="2-django路由what-why和how"><a class="markdownIt-Anchor" href="#2-django路由what-why和how"></a> 2. Django路由（what、why和how）</h3><ul><li>只定义视图不能成功显示**（请求没办法到达刚才的视图函数）<strong>，还需要</strong>配置路由**（<strong>绑定视图函数和URL</strong>）</li></ul><h4 id="路由层次应用层次项目层次"><a class="markdownIt-Anchor" href="#路由层次应用层次项目层次"></a> 路由层次——应用层次&amp;项目层次</h4><p><em><strong>先应用层次再项目层次</strong></em></p><h4 id="1应用层次"><a class="markdownIt-Anchor" href="#1应用层次"></a> （1）应用层次</h4><ul><li><strong>创建<code>urls.py</code>文件</strong>，引入该有的包</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">from django.urls import path,include # 要引入path和include</span><br><span class="language-xml"></span><br><span class="language-xml"># import blog.views # blog是该应用的名称，引入其中的views，出现了报错——注释掉这一句</span><br><span class="language-xml">#采用新的方式：</span><br><span class="language-xml">from . import views # 现在OK了</span><br><span class="language-xml"></span><br><span class="language-xml">urlpatterns = [</span><br><span class="language-xml">    path(&#x27;hello_world&#x27;,views.hello_world)</span><br><span class="language-xml">]  # 设置url配置，检测到hello_world，那就映射到blog.views文件中的hello_world函数</span><br></code></pre></td></tr></table></figure><h4 id="2项目层次"><a class="markdownIt-Anchor" href="#2项目层次"></a> （2）项目层次</h4><ul><li><strong>补充引入该有的包<code>include</code></strong>：</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">from django.contrib import admin</span><br><span class="language-xml">from django.urls import path,include # 就是在这里（引入include</span><br></code></pre></td></tr></table></figure><ul><li><strong>在<code>urlpatterns</code>中添加路由配置</strong>：</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">urlpatterns = [</span><br><span class="language-xml">    path(&#x27;admin/&#x27;, admin.site.urls),</span><br><span class="language-xml">    path(&#x27;blog/&#x27;,include(&#x27;blog.urls&#x27;)) # 这里是添加的 意义为：地址中有了blog，那就将其转发到刚刚实现的blog里的urls</span><br><span class="language-xml">]</span><br></code></pre></td></tr></table></figure><ul><li><strong>在<code>setting.py</code>中添加应用</strong>：</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">INSTALLED_APPS = [</span><br><span class="language-xml">    &#x27;django.contrib.admin&#x27;,</span><br><span class="language-xml">    &#x27;django.contrib.auth&#x27;,</span><br><span class="language-xml">    &#x27;django.contrib.contenttypes&#x27;,</span><br><span class="language-xml">    &#x27;django.contrib.sessions&#x27;,</span><br><span class="language-xml">    &#x27;django.contrib.messages&#x27;,</span><br><span class="language-xml">    &#x27;django.contrib.staticfiles&#x27;,</span><br><span class="language-xml"></span><br><span class="language-xml">    # myapp  在这里加一句这个</span><br><span class="language-xml">    &#x27;blog.apps.BlogConfig&#x27; # 这个可以在应用层面（blog）的apps.py中看到</span><br><span class="language-xml">]</span><br></code></pre></td></tr></table></figure><h4 id="请求过程"><a class="markdownIt-Anchor" href="#请求过程"></a> 请求过程</h4><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322172523465.png" alt="image-20250322172523465" style="zoom: 67%;" /><h2 id="五-初识django模型层"><a class="markdownIt-Anchor" href="#五-初识django模型层"></a> 五、初识DJango模型层</h2><h3 id="1模型层简介"><a class="markdownIt-Anchor" href="#1模型层简介"></a> 1.模型层简介</h3><h4 id="1what"><a class="markdownIt-Anchor" href="#1what"></a> （1）what：</h4><ul><li><p>位于DJango视图层和数据库之间</p></li><li><p><strong>实现python对象和数据库表之间的转换</strong></p></li></ul><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322173328088.png" alt="image-20250322173328088" style="zoom:50%;" /><h4 id="2why"><a class="markdownIt-Anchor" href="#2why"></a> （2）why：</h4><ul><li><p>屏蔽不同数据库之间的差异</p></li><li><p>开发者更加专注于业务逻辑的开发</p></li><li><p>提供很多便捷工具有助于开发</p></li></ul><h4 id="3how模型层的配置"><a class="markdownIt-Anchor" href="#3how模型层的配置"></a> （3）how——模型层的配置</h4><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">DATABASES = &#123;</span><br><span class="language-xml">    &#x27;default&#x27;: &#123;</span><br><span class="language-xml">        &#x27;ENGINE&#x27;: &#x27;django.db.backends.sqlite3&#x27;,</span><br><span class="language-xml">        &#x27;NAME&#x27;: BASE_DIR / &#x27;db.sqlite3&#x27;,</span><br><span class="language-xml">    &#125;</span><br><span class="language-xml">&#125;</span><br></code></pre></td></tr></table></figure><ul><li>默认的数据库配置</li></ul><h3 id="2创建博客模型"><a class="markdownIt-Anchor" href="#2创建博客模型"></a> 2.创建博客模型</h3><h4 id="1设计博客模型"><a class="markdownIt-Anchor" href="#1设计博客模型"></a> （1）设计博客模型</h4><ul><li><strong>确定所需内容及对应的类型</strong>：<ul><li>文章标题——文本类型</li><li>文章摘要——文本类型</li><li>文章内容——文本类型</li><li>唯一ID标记——Int数字类型（自增、主键）</li><li>发布日期——日期类型</li></ul></li></ul><h4 id="2模型层定义字段在modelspy中进行"><a class="markdownIt-Anchor" href="#2模型层定义字段在modelspy中进行"></a> （2）模型层定义字段–在<code>models.py</code>中进行</h4><ul><li>数字类型：IntegerField</li><li>文本类型：TextField</li><li>日期类型：DateTimeField</li><li>自增ID：AutoField</li><li>主键定义：primary_key属性</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">from django.db import models</span><br><span class="language-xml"></span><br><span class="language-xml"># Create your models here.</span><br><span class="language-xml"></span><br><span class="language-xml">class Article(models.Model):</span><br><span class="language-xml">    # 文章的唯一ID</span><br><span class="language-xml">    article_id = models.AutoField(primary_key=True)</span><br><span class="language-xml">    # 文章标题</span><br><span class="language-xml">    title = models.TextField()</span><br><span class="language-xml">    # 文章摘要</span><br><span class="language-xml">    brief_content = models.TextField()</span><br><span class="language-xml">    # 文章的主要内容</span><br><span class="language-xml">    content = models.TextField()</span><br><span class="language-xml">    # 文章的发布日期——未指定的话就默认以当前的时间为发布日期</span><br><span class="language-xml">    publish_date = models.DateTimeField(auto_now=True)</span><br></code></pre></td></tr></table></figure><h4 id="3创建模型变更的迁移文件"><a class="markdownIt-Anchor" href="#3创建模型变更的迁移文件"></a> （3）创建模型变更的迁移文件</h4><p>在terminal：调用对应的命令</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">python manage.py makemigrations<br></code></pre></td></tr></table></figure><p>响应如下：</p><p><img src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250322181842991.png" alt="image-20250322181842991"></p><p>——已经在<code>migrations</code>文件目录下创建了<code>0001_initial.py</code>的文件</p><h4 id="4将模型及迁移文件同步到数据库中"><a class="markdownIt-Anchor" href="#4将模型及迁移文件同步到数据库中"></a> （4）将模型及迁移文件同步到数据库中</h4><p>运行指令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">python manage.py migrate<br></code></pre></td></tr></table></figure><p>响应如下：</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322182131544.png" alt="image-20250322182131544" style="zoom:67%;" /><p><strong>此时使用的是默认的Sqlite3数据库</strong>（为了简单，跳过设置MySQL数据库那些步骤</p><h3 id="3初识django-shell"><a class="markdownIt-Anchor" href="#3初识django-shell"></a> 3.初识DJango Shell</h3><h4 id="1what-2"><a class="markdownIt-Anchor" href="#1what-2"></a> （1）what</h4><ul><li>python Shell：用于交互式的python编程</li><li>DJango Shell：与Python Shell类似，继承DJango项目环境</li></ul><h4 id="2why方便开发-调试-debug"><a class="markdownIt-Anchor" href="#2why方便开发-调试-debug"></a> （2）why——方便开发、调试、debug</h4><ul><li>临时性操作使用DJango Shell更方便（不用新建应用）</li><li>小范围debug更简单，不需要运行整个项目来测试</li></ul><h4 id="3how"><a class="markdownIt-Anchor" href="#3how"></a> （3）how</h4><ul><li>运行下列指令进入DJango Shell：</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs CMD">python manage.py shell<br></code></pre></td></tr></table></figure><p>响应如下：</p><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322183650296.png" alt="image-20250322183650296" style="zoom:67%;" /><ul><li>输入如下指令</li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cmd">&gt;&gt;&gt; from blog.models import Article # 引入模型<br>&gt;&gt;&gt; a = Article() # 新建一篇文章<br>&gt;&gt;&gt; a.<span class="hljs-built_in">title</span> = &#x27;Test django shell&#x27; # 定义标题<br>&gt;&gt;&gt; a.brief_content = &#x27;Test django shell by dongdongqiang teacher.&#x27;  # 定义摘要<br>&gt;&gt;&gt; a.content = &#x27;Test django shell,new article,main content.&#x27;  # 定义文章内容<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt;<br>&gt;&gt;&gt; <span class="hljs-built_in">print</span>(a) # 打印文章<br>Article object (None)  # 响应（None）：未保存到数据库中<br>&gt;&gt;&gt; a.save()  # 保存新建的文章<br>&gt;&gt;&gt; articles = Article.objects.all()  # 读取模型中保存的所有文章<br>&gt;&gt;&gt; article = article[<span class="hljs-number">0</span>]  # 读取第一篇文章（即我们刚刚新建的文章），，但是我这里articles打错了。。<br>Traceback (most recent <span class="hljs-keyword">call</span> last):<br>  File &quot;&lt;console&gt;&quot;, line <span class="hljs-number">1</span>, <span class="hljs-keyword">in</span> &lt;module&gt;<br><span class="hljs-function">NameError: <span class="hljs-title">name</span> &#x27;<span class="hljs-title">article</span>&#x27; <span class="hljs-title">is</span> <span class="hljs-title">not</span> <span class="hljs-title">defined</span>. <span class="hljs-title">Did</span> <span class="hljs-title">you</span> <span class="hljs-title">mean</span>: &#x27;<span class="hljs-title">Article</span>&#x27;?</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">article</span> = <span class="hljs-title">articles</span>[0]  # 正确拼写</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-title">article.title</span>)   # 再打印标题</span><br><span class="hljs-function"><span class="hljs-title">Test</span> <span class="hljs-title">django</span> <span class="hljs-title">shell</span>          # <span class="hljs-title">OK</span>的</span><br><span class="hljs-function">&gt;&gt;&gt; <span class="hljs-title">print</span>(<span class="hljs-title">article.brief_content</span>)  # 再试试摘要</span><br><span class="hljs-function"><span class="hljs-title">Test</span> <span class="hljs-title">django</span> <span class="hljs-title">shell</span> <span class="hljs-title">by</span> <span class="hljs-title">dongdongqiang</span> <span class="hljs-title">teacher</span>.  # 也<span class="hljs-title">OK</span>，就这样了</span><br></code></pre></td></tr></table></figure><ul><li><p>退出时运行:</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd"><span class="hljs-keyword">exit</span>()<br></code></pre></td></tr></table></figure></li></ul><h3 id="4初识django-admin模块"><a class="markdownIt-Anchor" href="#4初识django-admin模块"></a> 4.初识DJango Admin模块</h3><h4 id="1what-3"><a class="markdownIt-Anchor" href="#1what-3"></a> （1）what</h4><ul><li><strong>DJango的后台管理工具</strong></li><li>读取定义的模型元数据，提供强大的管理使用页面</li></ul><h4 id="2why-2"><a class="markdownIt-Anchor" href="#2why-2"></a> （2）why</h4><ul><li>最直接的：DJango Shell新增文章太复杂了（3中的操作）</li><li><strong>管理页面</strong>是基础设施中重要的部分</li><li>认证用户、显示管理模型、校验输入等功能类似</li></ul><h4 id="3how-2"><a class="markdownIt-Anchor" href="#3how-2"></a> （3）how</h4><ul><li><strong>创建管理员用户</strong></li></ul><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python manage.py createsuperuser<br></code></pre></td></tr></table></figure><p>响应如下：</p><p><img src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250322185646952.png" alt="image-20250322185646952"></p><p>输入用户名和密码**（不会显示出来，所以不要疑惑地重输好多遍，放心大胆地输入就完了）**即可，email address可以不写</p><ul><li><p><strong>登录页面进行管理</strong></p><ul><li><p>输入：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">python manage.py runserver<br></code></pre></td></tr></table></figure></li><li><p>进入admin界面——直接在URL上定向到admin</p></li><li><p>响应如下：</p></li><li><p>输入刚刚superuser的用户名和密码登录即可</p></li><li><p>![](C:\Users\Lenovo\Pictures\Screenshots\屏幕截图 2025-03-22 185942.png)</p></li><li><p>此时 只有users和groups可以管理——<strong>那刚刚新建的博客文章呢？</strong></p></li><li><p><strong>该博客未注册到admin中</strong></p></li><li><p>点击进入**<code>admin.py</code>**</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">from django.contrib import admin</span><br><span class="language-xml"></span><br><span class="language-xml"># Register your models here.</span><br><span class="language-xml"></span><br><span class="language-xml"># 从模型中引入定义好的Article模型</span><br><span class="language-xml">from .models import Article</span><br><span class="language-xml"></span><br><span class="language-xml"># 将Article注册到admin中</span><br><span class="language-xml">admin.site.register(Article)</span><br></code></pre></td></tr></table></figure></li><li><p>之后便可以在网页中看到：</p><p><img src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250322191352406.png" alt="image-20250322191352406"></p></li><li><p>点击<code>articles</code>即可看到我们新建的文章，也可以直接在此界面新建另一篇。</p></li><li><p><strong>但是，文章均以<code>article(编号)</code>的形式显示，无法根据题目判断文章</strong></p></li><li><p>进入**<code>models.py</code>**，重新定义一个新函数来解决这个问题（在原先模型定义的基础上）</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">def __str__(self):</span><br><span class="language-xml">    return self.title</span><br></code></pre></td></tr></table></figure><p>响应如下：</p><p><img src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250322192053283.png" alt="image-20250322192053283"></p></li></ul></li></ul><h3 id="5实现博客数据返回页面"><a class="markdownIt-Anchor" href="#5实现博客数据返回页面"></a> 5.实现博客数据返回页面</h3><h4 id="1视图"><a class="markdownIt-Anchor" href="#1视图"></a> （1）视图</h4><ul><li>**<code>views.py</code>**中定义如下函数：</li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">def article_content(request):</span><br><span class="language-xml">    article = Article.objects.all()[0]</span><br><span class="language-xml">    title = article.title</span><br><span class="language-xml">    brief_content = article.brief_content</span><br><span class="language-xml">    content = article.content</span><br><span class="language-xml">    article_id = article.article_id</span><br><span class="language-xml">    publish_date = article.publish_date</span><br><span class="language-xml">    return_str = &#x27;title:%s,brief_content:%s,&#x27;\</span><br><span class="language-xml">            &#x27;content:%s,article_id:%s,publish_date:%s&#x27; % (title,</span><br><span class="language-xml">                                                        brief_content,</span><br><span class="language-xml">                                                        content,</span><br><span class="language-xml">                                                        article_id,</span><br><span class="language-xml">                                                        publish_date)</span><br><span class="language-xml">    return HttpResponse(return_str)</span><br></code></pre></td></tr></table></figure><h4 id="2配置路由"><a class="markdownIt-Anchor" href="#2配置路由"></a> （2）配置路由</h4><ul><li><p><strong>先应用层面</strong>：</p><p><strong><code>urls.py</code></strong>：添加如下命令（即最终路径指向content，就转发到视图里的article_content函数）</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml">path(&#x27;content&#x27;,views.article_content)</span><br></code></pre></td></tr></table></figure></li><li><p><strong>项目层面</strong>：之前已经配置过<code>blog</code>，现在无须改动</p></li></ul><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322193648122.png" alt="image-20250322193648122" style="zoom: 67%;" /><h4 id="3在浏览器中查看"><a class="markdownIt-Anchor" href="#3在浏览器中查看"></a> （3）在浏览器中查看</h4><p>URL：<code>[127.0.0.1:8000/blog/content]</code>(<a href="http://127.0.0.1:8000/blog/content">http://127.0.0.1:8000/blog/content</a>)`</p><h2 id="六-初识django视图与模板"><a class="markdownIt-Anchor" href="#六-初识django视图与模板"></a> 六、初识DJango视图与模板</h2><h3 id="1使用bootstrap实现静态博客界面"><a class="markdownIt-Anchor" href="#1使用bootstrap实现静态博客界面"></a> 1.使用Bootstrap实现静态博客界面</h3><h4 id="1页面布局设计"><a class="markdownIt-Anchor" href="#1页面布局设计"></a> （1）页面布局设计</h4><ul><li>博客首页</li></ul><p><img src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250322203141394.png" alt="image-20250322203141394"></p><ul><li>博客文章详情页</li></ul><img src="C:\Users\Lenovo\AppData\Roaming\Typora\typora-user-images\image-20250322195259601.png" alt="image-20250322195259601" style="zoom:67%;" /><h4 id="2bootstrap以及bootstrap栅格系统"><a class="markdownIt-Anchor" href="#2bootstrap以及bootstrap栅格系统"></a> （2）Bootstrap以及Bootstrap栅格系统</h4><ul><li>美国Twitter的前端框架</li></ul><h4 id="3实现静态页面"><a class="markdownIt-Anchor" href="#3实现静态页面"></a> （3）实现静态页面</h4><ul><li><strong>新建一个<code>templates.py</code>目录，用于存放HTML文件</strong></li><li>然后写HTML文件就行</li></ul><h3 id="2初识django的模板系统"><a class="markdownIt-Anchor" href="#2初识django的模板系统"></a> 2.初识DJango的模板系统</h3><h4 id="1为什么用模板系统"><a class="markdownIt-Anchor" href="#1为什么用模板系统"></a> （1）为什么用模板系统</h4><ul><li>视图文件不适合编码HTML</li><li>网页逻辑和网页视图应该分开设计</li></ul><h4 id="2模板系统简介"><a class="markdownIt-Anchor" href="#2模板系统简介"></a> （2）模板系统简介</h4><ul><li>模板系统的表现形式是文本</li><li>分离文档的表现形式和表现内容</li><li>模板系统定义了特有的标签占位符</li></ul><h4 id="3基本语法"><a class="markdownIt-Anchor" href="#3基本语法"></a> （3）基本语法</h4><ul><li><strong>变量标签</strong>：<strong><code>&#123;&#123;变量&#125;&#125;</code></strong></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs DJango"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml">        </span><span class="hljs-template-variable">&#123;&#123;now&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><strong>for循环标签</strong>：<strong><code>&#123;%for x in list %&#125;,&#123;% endfor %&#125;</code></strong></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">for</span></span> item <span class="hljs-keyword">in</span> list %&#125;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span></span><span class="hljs-template-variable">&#123;&#123;item&#125;&#125;</span><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br><span class="language-xml">    </span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endfor</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li><strong>if-else分支标签</strong>：<strong><code>&#123;% if %&#125;,&#123;% else %&#125;,&#123;% endif %&#125;</code></strong></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs django"><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">if</span></span> true %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      it is a true part.</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">else</span></span> %&#125;</span><span class="language-xml"></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml">      it is a false part.</span><br><span class="language-xml">  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span></span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;% <span class="hljs-name"><span class="hljs-name">endif</span></span> %&#125;</span><br></code></pre></td></tr></table></figure><p><em><strong>这里，我们在<code>templates.py</code>目录下新建了一个<code>template.html</code>文件，并使用了上述基本语法编写该文件，但因为未与视图文件等等相连接，点开浏览器对应网页我们只能看到源码类型的content，并不能看到功能实现后的样子</strong></em></p><h3 id="3使用模板系统渲染博客界面"><a class="markdownIt-Anchor" href="#3使用模板系统渲染博客界面"></a> 3.使用模板系统渲染博客界面</h3><h3 id="4实现文章详情页面跳转"><a class="markdownIt-Anchor" href="#4实现文章详情页面跳转"></a> 4.实现文章详情页面跳转</h3><h3 id="5实现上下篇文章跳转"><a class="markdownIt-Anchor" href="#5实现上下篇文章跳转"></a> 5.实现上下篇文章跳转</h3><h3 id="6实现分页功能"><a class="markdownIt-Anchor" href="#6实现分页功能"></a> 6.实现分页功能</h3>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一篇论文阅读报告之阅读经验</title>
    <link href="/2025/05/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A%E4%B9%8B%E9%98%85%E8%AF%BB%E7%BB%8F%E9%AA%8C/"/>
    <url>/2025/05/15/%E7%AC%AC%E4%B8%80%E7%AF%87%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%E6%8A%A5%E5%91%8A%E4%B9%8B%E9%98%85%E8%AF%BB%E7%BB%8F%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="论文阅读经验记录"><a class="markdownIt-Anchor" href="#论文阅读经验记录"></a> 论文阅读经验记录</h1><h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2><p>论文是相当重要的学习途径，不仅能帮助我们了解某一研究方向的前沿动态，也能逐渐培养起严谨的科研思维。在各学科领域中，最具代表性的研究成果往往首先以<strong>英文论文</strong>的形式进行发布，这也意味着，想要站在学术的“第一现场”，我们必须学会与英文论文打交道。</p><p>幸运的是，如今各大高校基本都为学生提供了专业的数据库资源，如知网、IEEE、万方等，为我们打开了通向学术世界的大门。然而，阅读英文论文对我们这些非英语母语的学生来说，无疑是一项挑战。一方面，学术论文的语言风格本身就偏专业、严肃、精炼，另一方面，很多术语的准确理解需要结合专业背景知识，这使得阅读过程变得格外吃力。</p><h2 id="工具"><a class="markdownIt-Anchor" href="#工具"></a> 工具</h2><p><strong>小绿鲸英文文献阅读器</strong>：可以快速导入论文，进行段落级的翻译与结构标注（但部分翻译会不准确，甚至产生误解，所以还需要你对照着原文去分析句式结构来判断语义；</p><p><strong>LLM</strong>：可用作“论文陪读助手”，不仅能翻译摘要、解释术语，还能回答你对某一段内容的困惑（上述翻译误解便可以询问它），甚至可以帮你梳理论文结构、生成提纲。</p><h2 id="如何寻找论文"><a class="markdownIt-Anchor" href="#如何寻找论文"></a> 如何寻找论文</h2><h3 id="为何开始"><a class="markdownIt-Anchor" href="#为何开始"></a> 为何开始</h3><p>大一时，因为文明经典这门课的随堂检测是围绕一本名著任选一个话题来写论文，当时我不想阅读那厚厚的名著（而且读了之后也没什么用，get不到那么深的东西 <span class="emoji" alias="sleeping" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f634.png?v8">😴</span>）,所以我直接选择了<strong>阅读知网现成的研究论文</strong>，找那些<strong>被引次数多的</strong>，由一篇论文找到其参考论文，同时参考知乎、bilibili等平台的相关内容，先了解这本书的背景、核心人物的大致经历，边阅读边记笔记，这种方法帮我更快地理解所需阅读名著的核心观点以及后世研究的侧重点，也很容易找到可以支持作文撰写的句子。（这种方法在文明经典小班阅读课时也获得了助教姐姐的支持和推荐<span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span><span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span><span class="emoji" alias="smile" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f604.png?v8">😄</span>。</p><p>说了这么多，其实我想表达的是，现阶段我们查阅文献大多是出于学业目的，为了完成作业或者是为了了解学习先进的研究进展，因此这时任务型驱动使得我们更容易寻找到合适的论文，用途也相对固定——<strong>借前人之研究，长自身之本领</strong>。</p><p>这里推荐大家读一篇<a href="%5BHowtoReadPaper.pdf%5D(https://web.stanford.edu/class/ee384m/Handouts/HowtoReadPaper.pdf)">文章——How to read a paper</a></p><h3 id="如何开始"><a class="markdownIt-Anchor" href="#如何开始"></a> 如何开始</h3><ul><li>被引次数多</li><li>研究时间新</li><li>论文级别高</li></ul><p>找到论文后，推荐S.Keshav的三遍阅读法。</p><h4 id="第一遍阅读扫读-建立印象"><a class="markdownIt-Anchor" href="#第一遍阅读扫读-建立印象"></a> 第一遍阅读：扫读、建立印象</h4><ul><li>翻阅论文，查看它的结构，先对这篇文章有一个心理准备；（这里还可以将论文发给LLM，让它返回一个brief的回答；</li><li>阅读摘要Abstract、引言Introduction；</li><li>看看关键词Key Words，大致分析一下这个Key words的篇幅分布；（方便分类）；</li><li>看看图片、公式推导情况。</li></ul><p>看完之后，就可以大致知道这篇论文<strong>值不值得你再花时间细看</strong></p><blockquote><p>比如你想简单直接地获得研究现状，不想看太多公式推导，就可以大胆地舍弃公式多的论文…就这样</p></blockquote><blockquote><p>这里还可以去bilibili、知乎、掘金等平台搜索一下有关这方面的知识，有一个大致印象</p></blockquote><h4 id="第二遍阅读略读把握内容"><a class="markdownIt-Anchor" href="#第二遍阅读略读把握内容"></a> 第二遍阅读：略读，把握内容</h4><h4 id="第三遍阅读精读深入理解"><a class="markdownIt-Anchor" href="#第三遍阅读精读深入理解"></a> 第三遍阅读：精读，深入理解</h4>]]></content>
    
    
    
    <tags>
      
      <tag>recording</tag>
      
      <tag>articles</tag>
      
      <tag>posts</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>go_beginning_250514</title>
    <link href="/2025/05/14/go-beginning-250514/"/>
    <url>/2025/05/14/go-beginning-250514/</url>
    
    <content type="html"><![CDATA[<h1 id="go"><a class="markdownIt-Anchor" href="#go"></a> <code>go</code></h1><p>2025年5月14 日，正式开始学习go语言。</p><p>安装go语言、搭建开发环境看的是csdn上这篇<a href="%5B%E5%AE%89%E8%A3%85Go%E8%AF%AD%E8%A8%80%E3%80%81%E6%90%AD%E5%BB%BA%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E3%80%81%E4%BE%9D%E8%B5%96%E5%8C%85%E4%B8%8B%E8%BD%BD%EF%BC%88%E4%BF%9D%E5%A7%86%E6%95%99%E7%A8%8B%EF%BC%89_go%E8%AF%AD%E8%A8%80%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/qq_38105536/article/details/142635132)">教程</a></p><p>同时在看的还有B站up主无闻的视频，笔记及视频资源可以在他的Github主页看到：[go_fundamental_programming](<a href="https://github.com/unknwon/go-fundamental-programming">unknwon/go-fundamental-programming: 《Go 编程基础》是一套针对 Google 出品的 Go 语言的视频语音教程，主要面向新手级别的学习者。</a>)</p><h2 id="梦开始的地方"><a class="markdownIt-Anchor" href="#梦开始的地方"></a> <strong>梦开始的地方：</strong></h2><img src="/2025/05/14/go-beginning-250514/1.png" class=""><p>查看GOPATH路径的结果：</p><img src="/2025/05/14/go-beginning-250514/2.png" class=""><p>进行到Go语言开发工具包时遇到的问题：</p><p>未出现全选的选项，但一段时间之后终端出现了如下显示：</p><img src="/2025/05/14/go-beginning-250514/3.png" class=""><p>新建一个<code>go_projects</code>的文件夹，在vscode中打开此文件夹，切换终端为<code>cmd</code></p><p>使用下列语句新建<strong>属于<code>go</code>的<code>hello</code>文件</strong>：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go mod init gohello<br></code></pre></td></tr></table></figure><p>之后<strong>新建<code>main.go</code>文件</strong>，并输入下列代码：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main <span class="hljs-comment">//导入main包，表明当前是一个可执行程序</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-comment">//导入内置fmt包</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//main函数，是程序执行的入口</span><br>fmt.Println(<span class="hljs-string">&quot;Go Hello !&quot;</span>) <span class="hljs-comment">// 在终端打印Go Hello !</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2025/05/14/go-beginning-250514/4.png" class=""><p>在终端运行<code>main.go</code>程序，便可得到<code>Go Hello !</code>的输出：</p><img src="/2025/05/14/go-beginning-250514/5.png" class=""><p><code>go build</code>编译，运行程序</p><p>在终端依次输入下列指令：</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cmd">go build ##进行编译,之后会生成gohello.exe文件<br><br>gohello.exe ##便可以得到Go Hello!的输出<br></code></pre></td></tr></table></figure><img src="/2025/05/14/go-beginning-250514/6.png" class=""><h2 id="2025519重新配置环境变量那些"><a class="markdownIt-Anchor" href="#2025519重新配置环境变量那些"></a> 2025.5.19重新配置环境变量那些</h2><p>今天在看学习文档，发现环境变量这个不得不配，而且编辑器貌似也是需要重新选择一下。所以在<code>CSDN</code>中找了一篇教程来学：<a href="https://blog.csdn.net/xiaohuihui1400/article/details/130338023?ops_request_misc=%7B%22request%5Fid%22%3A%22ae35a4f271fb388c070c6e26459944e1%22%2C%22scm%22%3A%2220140713.130102334..%22%7D&amp;request_id=ae35a4f271fb388c070c6e26459944e1&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-1-130338023-null-null.142%5Ev102%5Epc_search_result_base7&amp;utm_term=go%E7%BC%96%E8%BE%91%E5%99%A8&amp;spm=1018.2226.3001.4187">Go 环境配置、编辑器安装、第一个HelloWorld_go 1.21.0.window-amd64.msi下载-CSDN博客</a></p><p>–这篇用的是<code>vscode</code>和<code>Golang</code>。我在这里重新理解了一下<strong>go文件的保存路径</strong>，进一步配置了环境，并重新编写了第一个<code>Hello world!</code>的go程序。</p><h2 id="使用go_tour进行学习"><a class="markdownIt-Anchor" href="#使用go_tour进行学习"></a> 使用<code>Go_tour</code>进行学习</h2><p>第一行<code>Hello World!</code>：</p><p>目前还没学过任何语法，只是早上的HelloGo的模糊记忆，写了几回都报错，最后终于成功…</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main <span class="hljs-comment">//声明这是一个可执行程序</span><br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span> <span class="hljs-comment">//导入fmt（格式化输入输出包）</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello World!&quot;</span>) <span class="hljs-comment">//输出</span><br>&#125;<br></code></pre></td></tr></table></figure><img src="/2025/05/14/go-beginning-250514/7.png" class=""><h4 id="基本的输出语法"><a class="markdownIt-Anchor" href="#基本的输出语法"></a> 基本的输出语法</h4><p>（主要来自 <code>fmt</code> 包）</p><table><thead><tr><th>函数名</th><th>功能简介</th><th>示例输出</th><th>是否格式化</th></tr></thead><tbody><tr><td><code>fmt.Print()</code></td><td>直接输出，不换行</td><td><code>fmt.Print(&quot;Hello&quot;)</code> → <code>Hello</code></td><td>❌</td></tr><tr><td><code>fmt.Println()</code></td><td>输出并自动换行（加空格）</td><td><code>fmt.Println(&quot;A&quot;, 1)</code> → <code>A 1\n</code></td><td>❌</td></tr><tr><td><code>fmt.Printf()</code></td><td>格式化输出</td><td><code>fmt.Printf(&quot;I am %d years old&quot;, 18)</code> → <code>I am 18 years old</code></td><td>✅</td></tr><tr><td><code>fmt.Sprint()</code></td><td>返回字符串，不打印</td><td><code>s := fmt.Sprint(&quot;A&quot;, 1)</code> → <code>s = &quot;A1&quot;</code></td><td>❌</td></tr><tr><td><code>fmt.Sprintf()</code></td><td>返回格式化字符串</td><td><code>s := fmt.Sprintf(&quot;I am %d&quot;, 18)</code> → <code>s = &quot;I am 18&quot;</code></td><td>✅</td></tr></tbody></table><ul><li>常用格式化占位符（Printf 专用）</li></ul><table><thead><tr><th>占位符</th><th>含义</th></tr></thead><tbody><tr><td><code>%d</code></td><td>十进制整数（Decimal）</td></tr><tr><td><code>%f</code></td><td>浮点数（默认小数点后6位）</td></tr><tr><td><code>%.2f</code></td><td>保留两位小数</td></tr><tr><td><code>%s</code></td><td>字符串（String）</td></tr><tr><td><code>%t</code></td><td>布尔值（true/false）</td></tr><tr><td><code>%v</code></td><td>自动选择合适格式输出（万能占位符）</td></tr><tr><td><code>%T</code></td><td>输出变量的类型</td></tr><tr><td><code>%g</code></td><td>对浮点数自动使用最简方式表示（如 <code>3.0</code>→<code>3</code>）</td></tr></tbody></table><h2 id="基本结构和要素"><a class="markdownIt-Anchor" href="#基本结构和要素"></a> 基本结构和要素</h2><h3 id="包"><a class="markdownIt-Anchor" href="#包"></a> 包</h3><ul><li><p>每个Go程序都由包构成</p></li><li><p>程序从<code>main</code>包开始（所以<code>package main</code>）</p></li><li><p>每句不必使用分号做结尾</p><ul><li>但如果要将语句一行写出，则需要加分号以示分割（但不推荐这么写</li></ul></li><li><p>其他的包就<code>import</code>——多个包时更推荐<strong>分组导入</strong>（用圆括号将导入的包分成一组）并且可以<strong>按首字母进行排列</strong>：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;math/rand&quot;</span><br>    <span class="hljs-string">&quot;......&quot;</span><br>)<br></code></pre></td></tr></table></figure><ul><li><p>导入包=包含了该包中的所有数据代码对象</p></li><li><p>同一个包里的代码对象得是唯一的，避免冲突——不同包中的可以一样（可以用包名作区分）</p></li></ul></li></ul><h4 id="导出"><a class="markdownIt-Anchor" href="#导出"></a> 导出</h4><ul><li>只有<strong>首字母大写的标识符</strong>（变量、函数、类型等）才能被其他包访问</li><li>例如math包中的Pow函数是大写P开头，所以我们可以使用</li><li>如果改为pow（小写p），其他包就无法访问它（想象成面向对象语言中的private）</li><li>这种机制实现了封装，控制包的对外接口</li></ul><hr><p>导入包后，只可以访问<strong>该包中导出的对象</strong></p><blockquote><p>假设在包 pack1 中我们有一个变量或函数叫做 Thing（以 T 开头，所以它能够被导出），那么在当前包中导入 pack1 包，Thing 就可以像面向对象语言那样使用点标记来调用：pack1.Thing（pack1 在这里是不可以省略的）。</p><p>————————————————<br>原文作者：Go 技术论坛文档：《Go 入门指南（）》<br>转自链接：<a href="https://learnku.com/docs/the-way-to-go/the-basic-structure-and-elements-of-the-go-program/3583">https://learnku.com/docs/the-way-to-go/the-basic-structure-and-elements-of-the-go-program/3583</a></p></blockquote><ul><li>导入了一个包却没有使用——》报错——》没有不必要的代码（所以删掉这个包的导入。。。</li></ul><h3 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">functionName</span><span class="hljs-params">()</span></span> <span class="hljs-comment">//最简单的函数定义格式</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">functionName_var</span><span class="hljs-params">(var1 <span class="hljs-type">int</span>,var2 <span class="hljs-type">bool</span>,var3,<span class="hljs-type">float32</span>)</span></span><span class="hljs-comment">//括号中可写入多个函数的参数，每个参数名后紧跟参数类型，用逗号分隔</span><br></code></pre></td></tr></table></figure><ul><li><strong>需要包含<code>main函数</code></strong>，否则会报错<ul><li>无参数，无返回类型</li></ul></li><li>若有<code>init函数</code>，先执行<code>init函数</code></li><li>函数体用<code>&#123;&#125;</code>括起，且**<code>&#123;</code>必须与方法的声明放在同一行**——》强制要求</li></ul><p><strong>变量</strong>：<code>var</code>，</p><ul><li>变量类型搞到变量后面</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">var</span> a <span class="hljs-type">bool</span>;<span class="hljs-comment">//初始化为false</span><br><span class="hljs-keyword">var</span> b <span class="hljs-type">int</span>;<span class="hljs-comment">//这里就被初始化为0</span><br><br></code></pre></td></tr></table></figure><p>虚数定义的时候不能单独地写<code>i</code>，如果是<code>5+i</code>，那也要写成<code>5+1i</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math/rand&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>fmt.Println(<span class="hljs-string">&quot;我最喜欢的数字是，&quot;</span>,rand.Intn(<span class="hljs-number">10</span>))<span class="hljs-comment">//这里包一个括号吧这些包起，，没得分号这些</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="流程控制语句"><a class="markdownIt-Anchor" href="#流程控制语句"></a> 流程控制语句</h2><h3 id="1for-循环"><a class="markdownIt-Anchor" href="#1for-循环"></a> 1.for 循环</h3><h4 id="1基础定义"><a class="markdownIt-Anchor" href="#1基础定义"></a> 1&gt;基础定义</h4><p><strong>条件依旧由三部分构成（这里的定义就用<code>:=</code>，简单，但是不用括号<code>()</code>括起，花括号还是需要的哈<code>&#123;&#125;</code>）</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>sum := <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>sum += i<br>&#125;<br>fmt.Println(sum)<br>&#125;<br><br><span class="hljs-comment">// result = 45 --sum of 0/1/2/3/4/5/6/7/8/9</span><br></code></pre></td></tr></table></figure><h4 id="2-循环语句简化"><a class="markdownIt-Anchor" href="#2-循环语句简化"></a> 2&gt; 循环语句简化</h4><ul><li>其中的初始化语句和后置语句是可选的（省略,<strong>加一个分号<code>;</code>就行</strong>）</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>sum := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> ; sum &lt; <span class="hljs-number">1000</span>; &#123;<br>sum += sum<br>&#125;<br>fmt.Println(sum)<br>&#125;<br><span class="hljs-comment">// result = 1024 这里就没有初始化语句和后置于句，只有结束语句</span><br></code></pre></td></tr></table></figure><h4 id="3for也可以是go中的while去掉分号"><a class="markdownIt-Anchor" href="#3for也可以是go中的while去掉分号"></a> 3&gt;<code>for</code>也可以是<code>GO</code>中的<code>while</code>：去掉分号</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>sum := <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> sum &lt; <span class="hljs-number">1000</span> &#123;<br>sum += sum<br>&#125;<br>fmt.Println(sum)<br>&#125;<br><span class="hljs-comment">// result = 1024 这里相较于上一条省掉了;就变成了while</span><br></code></pre></td></tr></table></figure><h4 id="4无限循环省略循环条件"><a class="markdownIt-Anchor" href="#4无限循环省略循环条件"></a> 4&gt;无限循环：省略循环条件</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">for</span> &#123;<br>&#125;<br>&#125;<br><span class="hljs-comment">// result:</span><br>​ timeout running program<br></code></pre></td></tr></table></figure><h3 id="2if-判断"><a class="markdownIt-Anchor" href="#2if-判断"></a> 2.if 判断</h3><h4 id="1基础定义-2"><a class="markdownIt-Anchor" href="#1基础定义-2"></a> 1&gt;基础定义</h4><p><strong>表达式无须括号<code>()</code>括起，但花括号还是需要的<code>&#123;&#125;</code></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">sqrt</span><span class="hljs-params">(x <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">string</span> &#123;<br><span class="hljs-keyword">if</span> x &lt; <span class="hljs-number">0</span> &#123;<br><span class="hljs-keyword">return</span> sqrt(-x) + <span class="hljs-string">&quot;i&quot;</span><br>&#125;<br><span class="hljs-keyword">return</span> fmt.Sprint(math.Sqrt(x))<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(sqrt(<span class="hljs-number">2</span>), sqrt(<span class="hljs-number">-4</span>))<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2if和简短语句"><a class="markdownIt-Anchor" href="#2if和简短语句"></a> 2&gt;if和简短语句</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs GO"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pow</span><span class="hljs-params">(x, n, lim <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;<br><span class="hljs-keyword">return</span> v<br>&#125;<br><span class="hljs-keyword">return</span> lim<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<br>pow(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">10</span>),<br>pow(<span class="hljs-number">3</span>, <span class="hljs-number">3</span>, <span class="hljs-number">20</span>),<br>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3switch语句"><a class="markdownIt-Anchor" href="#3switch语句"></a> 3.<code>switch</code>语句</h3><p><strong>go中的Switch自带break特性</strong></p><ul><li>无须自己添加，执行完一个对应符合的case后就会停止<ul><li>执行顺序：从上到下，匹配成功则执行，执行完停止</li></ul></li><li>除非你加了<code>fallthrough</code></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> num := <span class="hljs-number">2</span>; num &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    fmt.Println(<span class="hljs-string">&quot;One&quot;</span>)<br>    <span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>    fmt.Println(<span class="hljs-string">&quot;Two&quot;</span>)<br>    <span class="hljs-keyword">fallthrough</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>    fmt.Println(<span class="hljs-string">&quot;Three&quot;</span>)<br>&#125;<br><span class="hljs-comment">//输出结果为：</span><br><span class="hljs-comment">// Two </span><br><span class="hljs-comment">// Three</span><br></code></pre></td></tr></table></figure><ul><li>无条件<code>switch</code>——语句为空——》表达含义同<code>switch true</code>一致</li><li>也可以像<code>if</code>一样——带上初始化语句</li><li><code>case</code>不必为常量，也不必是整数——可以为布尔表达式（此时第一个返回True的case会被执行）等等<ul><li><code>case</code>可以匹配多个值，用<code>,</code>分割</li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// switch语句为空，case为布尔表达式</span><br>t := time.Now()<br><span class="hljs-keyword">switch</span> &#123;<br><span class="hljs-keyword">case</span> t.Hour() &lt; <span class="hljs-number">12</span>:<br>    fmt.Println(<span class="hljs-string">&quot;Good morning!&quot;</span>)<br><span class="hljs-keyword">case</span> t.Hour() &lt; <span class="hljs-number">18</span>:<br>    fmt.Println(<span class="hljs-string">&quot;Good afternoon.&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>    fmt.Println(<span class="hljs-string">&quot;Good evening.&quot;</span>)<br>&#125;<br><br><span class="hljs-comment">// switch带上初始化语句</span><br><span class="hljs-keyword">switch</span> x := getValue(); x &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>    fmt.Println(<span class="hljs-string">&quot;One&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>    fmt.Println(<span class="hljs-string">&quot;Other&quot;</span>)<br>&#125;<br><br><br><span class="hljs-comment">// case使用多个值</span><br>day := <span class="hljs-string">&quot;Saturday&quot;</span><br><span class="hljs-keyword">switch</span> day &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Saturday&quot;</span>, <span class="hljs-string">&quot;Sunday&quot;</span>:<br>    fmt.Println(<span class="hljs-string">&quot;Weekend&quot;</span>)<br><span class="hljs-keyword">default</span>:<br>    fmt.Println(<span class="hljs-string">&quot;Weekday&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4defer推迟"><a class="markdownIt-Anchor" href="#4defer推迟"></a> 4.<code>defer</code>推迟</h3><p>作用：将函数<strong>推迟到外层函数返回之后执行</strong></p><p>——》推迟调用的函数其参数会<strong>立即求值</strong>，但直到外层函数返回前该函数都不会被调用</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">defer</span> fmt.Println(<span class="hljs-string">&quot;world&quot;</span>)<br><br>fmt.Println(<span class="hljs-string">&quot;hello&quot;</span>)<br>&#125;<br><span class="hljs-comment">// 输出为:</span><br><span class="hljs-comment">// hello </span><br><span class="hljs-comment">// world</span><br></code></pre></td></tr></table></figure><p>推迟调用的函数调用会被压入一个栈中。</p><p>——》当外层函数返回式，被推迟的调用按照<strong>后进先出的顺序调用</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;counting&quot;</span>)<br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br><span class="hljs-keyword">defer</span> fmt.Println(i)<br>&#125;<br><br>fmt.Println(<span class="hljs-string">&quot;done&quot;</span>)<br>&#125;<br><span class="hljs-comment">// result:</span><br><span class="hljs-comment">// counting</span><br><span class="hljs-comment">//done</span><br><span class="hljs-comment">//9</span><br><span class="hljs-comment">//8</span><br><span class="hljs-comment">//7</span><br><span class="hljs-comment">//6</span><br><span class="hljs-comment">//5</span><br><span class="hljs-comment">//4</span><br><span class="hljs-comment">//3</span><br><span class="hljs-comment">//2</span><br><span class="hljs-comment">//1</span><br><span class="hljs-comment">//0</span><br></code></pre></td></tr></table></figure><h2 id="结构体-切片-映射"><a class="markdownIt-Anchor" href="#结构体-切片-映射"></a> 结构体、切片、映射</h2><h3 id="1指针"><a class="markdownIt-Anchor" href="#1指针"></a> 1.指针</h3><h4 id="1定义"><a class="markdownIt-Anchor" href="#1定义"></a> 1&gt;定义</h4><p>一种变量，用来保存另一个变量的内存地址</p><h4 id="2定义指针与使用"><a class="markdownIt-Anchor" href="#2定义指针与使用"></a> 2&gt;定义指针与使用</h4><ul><li><p>定义指针变量</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">var</span> p *<span class="hljs-type">int</span>; <span class="hljs-comment">//这里就定义了p为一个指向int的指针</span><br>            <span class="hljs-comment">//目前未指向任何实际的内存地址，所以现在p还是空指针（nil）</span><br></code></pre></td></tr></table></figure></li><li><p>获取变量地址</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Go">i := <span class="hljs-number">42</span><br>p = &amp;i <span class="hljs-comment">//获取变量i的地址，赋值给p</span><br></code></pre></td></tr></table></figure><ul><li><code>&amp;i</code>：取变量i的地址</li><li>目前：<code>p</code>保存的是<code>i</code>的内存地址</li></ul></li><li><p>访问指针指向的值</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go">fmt.Println(*p)  <span class="hljs-comment">//输出42（即i的值）</span><br>*p = <span class="hljs-number">21</span> <span class="hljs-comment">//修改指针p指向的值，相当于修改i</span><br><span class="hljs-comment">//再输出i，会发现i目前的值也为21</span><br>fmt.Println(i)<br></code></pre></td></tr></table></figure><ul><li><code>*p</code>就是<code>p所指向的值</code>，又叫<strong>解引用</strong>/简介引用</li><li>修改<code>*p</code>就是修改<code>i</code></li></ul></li></ul><h3 id="2结构体"><a class="markdownIt-Anchor" href="#2结构体"></a> 2.结构体</h3><h4 id="1定义-2"><a class="markdownIt-Anchor" href="#1定义-2"></a> 1&gt;定义</h4><p>一个结构体（struct）为一组字段（Field）</p><h4 id="2访问方式"><a class="markdownIt-Anchor" href="#2访问方式"></a> 2&gt;访问方式</h4><p>结构体字段可通过点号 <code>.</code> 来访问。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>X <span class="hljs-type">int</span><br>Y <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>v := Vertex&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;<br>v.X = <span class="hljs-number">4</span><br>fmt.Println(v.X)<br>&#125;<br><span class="hljs-comment">// result: 4</span><br><span class="hljs-comment">//利用.号访问了原先struct中的X，并修改其值为4</span><br></code></pre></td></tr></table></figure><h4 id="3结构体指针"><a class="markdownIt-Anchor" href="#3结构体指针"></a> 3&gt;结构体指针</h4><p>结构体字段可通过<strong>结构体指针来访问</strong>。</p><p>如果我们有一个指向结构体的指针 <code>p</code> 那么可以通过 <code>(*p).X</code> 来访问其字段 <code>X</code>。</p><p>允许我们使用<strong>隐式解引用</strong>，直接写 <code>p.X</code> 就可以。</p><h4 id="4结构体字面量"><a class="markdownIt-Anchor" href="#4结构体字面量"></a> 4&gt;结构体字面量</h4><p>给出<code>name:类型</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>X, Y <span class="hljs-type">int</span><br>&#125;<br><br><span class="hljs-keyword">var</span> (<br>v1 = Vertex&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;  <span class="hljs-comment">// 创建一个 Vertex 类型的结构体</span><br>v2 = Vertex&#123;X: <span class="hljs-number">1</span>&#125;  <span class="hljs-comment">// Y:0 被隐式地赋予零值</span><br>v3 = Vertex&#123;&#125;      <span class="hljs-comment">// X:0 Y:0</span><br>p  = &amp;Vertex&#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125; <span class="hljs-comment">// 创建一个 *Vertex 类型的结构体（指针）</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>fmt.Println(v1, p, v2, v3)<br>&#125;<br><span class="hljs-comment">// &#123;1 2&#125; &amp;&#123;1 2&#125; &#123;1 0&#125; &#123;0 0&#125;</span><br></code></pre></td></tr></table></figure><h3 id="3数组"><a class="markdownIt-Anchor" href="#3数组"></a> 3.数组</h3><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><p><code>[n]T</code>表示一个拥有n个T类型的值——长度n为其类型的一部分，so<strong>go的数组不能改变大小</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">10</span>]<span class="hljs-type">int</span> <span class="hljs-comment">//a为拥有10个整数的数组</span><br></code></pre></td></tr></table></figure><h4 id="实际开发中多使用切片slice动态长度是引用类型而非数组固定容器"><a class="markdownIt-Anchor" href="#实际开发中多使用切片slice动态长度是引用类型而非数组固定容器"></a> 实际开发中多使用<code>切片(slice)</code>（动态长度，是引用类型），而非数组（固定容器）</h4><h3 id="4切片"><a class="markdownIt-Anchor" href="#4切片"></a> 4.切片</h3><h4 id="1定义-3"><a class="markdownIt-Anchor" href="#1定义-3"></a> 1&gt;定义</h4><p><code>[]T</code>：元素类型为T的切片</p><p><code>a[low:high]</code>：通过两个下标来界定上界和上界——》选出一个半壁搬开区间（<strong>包括下界，不包括上界</strong>）</p><h4 id="2切片类似于数组的引用"><a class="markdownIt-Anchor" href="#2切片类似于数组的引用"></a> 2&gt;切片类似于数组的引用</h4><p>切片就像数组的引用</p><p>——》切片并不存储任何数据，它只是描述了底层数组中的一段。</p><p><strong>更改切片的元素会修改其底层数组中对应的元素</strong>。</p><p>和它共享底层数组的切片都会观测到这些修改。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>names := [<span class="hljs-number">4</span>]<span class="hljs-type">string</span>&#123;<br><span class="hljs-string">&quot;John&quot;</span>,<br><span class="hljs-string">&quot;Paul&quot;</span>,<br><span class="hljs-string">&quot;George&quot;</span>,<br><span class="hljs-string">&quot;Ringo&quot;</span>,<br>&#125;<br>fmt.Println(names)<br><br>a := names[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br>b := names[<span class="hljs-number">1</span>:<span class="hljs-number">3</span>]<br>fmt.Println(a, b)<br><br>b[<span class="hljs-number">0</span>] = <span class="hljs-string">&quot;XXX&quot;</span><br>fmt.Println(a, b)<br>fmt.Println(names)<br>&#125;<br><span class="hljs-comment">//输出：</span><br><span class="hljs-comment">// [John Paul George Ringo]</span><br><span class="hljs-comment">// [John Paul] [Paul George]</span><br><span class="hljs-comment">// [John XXX] [XXX George]</span><br><span class="hljs-comment">// [John XXX George Ringo]</span><br></code></pre></td></tr></table></figure><h4 id="3切片字面量"><a class="markdownIt-Anchor" href="#3切片字面量"></a> 3&gt;切片字面量</h4><p>类似于没有长度的数组字面量</p><ul><li>数组字面量： <code>[3]bool&#123;true,true,false&#125;</code></li><li>切片字面量：<code>[]bool&#123;true,true,false&#125;</code><ul><li>这样其实是先构建了一个[3]bool的底层数组，再构造一个指向这个数组，长度和容量均为3的切片</li></ul></li></ul><table><thead><tr><th>对比点</th><th><code>[3]bool&#123;...&#125;</code> 数组字面量</th><th><code>[]bool&#123;...&#125;</code> 切片字面量</th></tr></thead><tbody><tr><td>类型</td><td><code>[3]bool</code></td><td><code>[]bool</code></td></tr><tr><td>内存</td><td>存储数据本体</td><td>存储对数组的引用</td></tr><tr><td>拷贝行为</td><td>复制整个数组</td><td>复制引用，底层数据共享</td></tr><tr><td>可变长度</td><td>❌ 固定长度</td><td>✅ 可动态增长（<code>append</code>）</td></tr><tr><td>常用吗？</td><td>不太常用</td><td>非常常用</td></tr></tbody></table><h4 id="4切片的默认行为"><a class="markdownIt-Anchor" href="#4切片的默认行为"></a> 4&gt;切片的默认行为</h4><p>上下界有默认行为：</p><ul><li>下界：0</li><li>上界：切片的长度</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">var</span> a [<span class="hljs-number">10</span>]<span class="hljs-type">int</span><br><br>a[<span class="hljs-number">0</span>:<span class="hljs-number">10</span>]<br>a[:<span class="hljs-number">10</span>]<br>a[<span class="hljs-number">0</span>:]<br>a[:] 四者等价<br></code></pre></td></tr></table></figure><h4 id="长度容量"><a class="markdownIt-Anchor" href="#长度容量"></a> 长度&amp;容量</h4><ul><li><strong>长度</strong>：现在切片所包含的元素个数——》<strong><code>len()</code></strong></li><li><strong>容量</strong>：现在切片在底层数组中对应的起始位置到末尾所包含的元素个数（可扩展的长度）——》<strong><code>cap()</code></strong></li><li><strong>当扩展切片到容量不够时，Go会自动创建一个新数组，并将旧内容复制进去</strong></li></ul><table><thead><tr><th>内容</th><th><code>len(slice)</code></th><th><code>cap(slice)</code></th></tr></thead><tbody><tr><td>含义</td><td>当前可以访问的元素数量</td><td>从开始位置到底层数组末尾的空间</td></tr><tr><td>可变性</td><td>可变（<code>append</code> 可增加）</td><td>固定（除非分配新数组）</td></tr><tr><td>影响性能</td><td>无</td><td>决定是否需要重新分配内存</td></tr><tr><td>获取方式</td><td><code>len(s)</code></td><td><code>cap(s)</code></td></tr></tbody></table><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>s := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>&#125;<br>printSlice(s)<br><br><span class="hljs-comment">// 截取切片使其长度为 0</span><br>s = s[:<span class="hljs-number">0</span>]<br>printSlice(s)<br><br><span class="hljs-comment">// 扩展其长度</span><br>s = s[:<span class="hljs-number">4</span>]<br>printSlice(s)<br><br><span class="hljs-comment">// 舍弃前两个值</span><br>s = s[<span class="hljs-number">2</span>:]<br>printSlice(s)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">printSlice</span><span class="hljs-params">(s []<span class="hljs-type">int</span>)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;len=%d cap=%d %v\n&quot;</span>, <span class="hljs-built_in">len</span>(s), <span class="hljs-built_in">cap</span>(s), s)<br>&#125;<br><span class="hljs-comment">// result:</span><br><span class="hljs-comment">// len=6 cap=6 [2 3 5 7 11 13]</span><br><span class="hljs-comment">// len=0 cap=6 []</span><br><span class="hljs-comment">// len=4 cap=6 [2 3 5 7]</span><br><span class="hljs-comment">// len=2 cap=4 [5 7]</span><br></code></pre></td></tr></table></figure><h4 id="5nil切片"><a class="markdownIt-Anchor" href="#5nil切片"></a> 5&gt;<code>nil</code>切片</h4><p>切片的零值是 <code>nil</code>。</p><p>nil 切片的长度和容量为 0 且没有底层数组。</p><h4 id="6用make创建切片"><a class="markdownIt-Anchor" href="#6用make创建切片"></a> 6&gt;用<code>make</code>创建切片</h4><p>切片可以用内置<strong>函数 <code>make</code> <strong>来创建，这也是你</strong>创建动态数组的方式</strong>。</p><p><code>make</code> 函数会<strong>分配一个元素为零值的数组并返回一个引用了它的切片</strong>，这里会同步返回切片长度：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go">a := <span class="hljs-built_in">make</span>([]<span class="hljs-type">int</span>, <span class="hljs-number">5</span>)  <span class="hljs-comment">// len(a)=5</span><br></code></pre></td></tr></table></figure><p>要指定它的容量，需向 <code>make</code> 传入第三个参数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-selector-tag">b</span> := <span class="hljs-built_in">make</span>(<span class="hljs-selector-attr">[]</span>int, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) <span class="hljs-comment">// len(b)=0, cap(b)=5</span><br><br><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[:cap(b)]</span> <span class="hljs-comment">// len(b)=5, cap(b)=5</span><br><span class="hljs-selector-tag">b</span> = <span class="hljs-selector-tag">b</span><span class="hljs-selector-attr">[1:]</span>      <span class="hljs-comment">// len(b)=4, cap(b)=4</span><br></code></pre></td></tr></table></figure><h4 id="7切片的切片"><a class="markdownIt-Anchor" href="#7切片的切片"></a> 7&gt;切片的切片</h4><p>切片可以包含任何类型，也可以包含其他切片</p><h4 id="8向切片追加元素"><a class="markdownIt-Anchor" href="#8向切片追加元素"></a> 8&gt;向切片追加元素</h4><p>**<code>append</code>**函数：</p><ul><li>第一个参数<code>s</code>：元素类型为T的切片，其余类型为T的元素会追加到该切片的末尾</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">append</span><span class="hljs-params">(s []T, vs ...T)</span></span> []T<br></code></pre></td></tr></table></figure><ul><li>输出的结果为：一个包含元切片所有元素加上新添加元素的切片</li></ul><p>——》当<code>s</code>的底层数组太小，不足以容纳给定的值时，他会分配一个更大的数组——》返回的切片会指向这个新分配的数组</p><h4 id="9-range遍历"><a class="markdownIt-Anchor" href="#9-range遍历"></a> 9&gt; <code>range</code>遍历</h4><p><strong><code>for</code>循环的<code>range</code>形式可以遍历切片或映射</strong></p><blockquote><p>当使用 <code>for</code> 循环遍历切片时，每次迭代都会返回两个值。 第一个值为当前元素的下标，第二个值为该下标所对应元素的一份副本。</p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go">nums := []<span class="hljs-type">int</span>&#123;<span class="hljs-number">10</span>, <span class="hljs-number">20</span>, <span class="hljs-number">30</span>, <span class="hljs-number">40</span>&#125;<br><span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> nums &#123;<br>    fmt.Println(<span class="hljs-string">&quot;索引:&quot;</span>, i, <span class="hljs-string">&quot;值:&quot;</span>, v)<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>i 是索引（index）</p></li><li><p>v 是值（value）</p></li></ul><p>如果你只需要值，不要索引，可以用 _ 忽略：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> nums &#123;<br>    fmt.Println(<span class="hljs-string">&quot;值:&quot;</span>, v)<br>&#125;<br></code></pre></td></tr></table></figure><p>只需要索引，不需要值：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">for</span> i,_ := <span class="hljs-keyword">range</span> nums &#123;<br>    fmt.Println(<span class="hljs-string">&quot;索引:&quot;</span>,i)<br>&#125;<br><br><span class="hljs-comment">// 也可以</span><br><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> nums &#123;<br>    fmt.Println(<span class="hljs-string">&quot;index&quot;</span>,i)<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>可以将下标或值赋予 <code>_</code> 来忽略它。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i, _ := <span class="hljs-keyword">range</span> pow<br><span class="hljs-keyword">for</span> _, value := <span class="hljs-keyword">range</span> pow<br></code></pre></td></tr></table></figure><p>若你只需要索引，忽略第二个变量即可。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">for</span> i := <span class="hljs-keyword">range</span> pow<br></code></pre></td></tr></table></figure></blockquote><h3 id="5map映射"><a class="markdownIt-Anchor" href="#5map映射"></a> 5.<code>map</code>映射</h3><h4 id="1定义-4"><a class="markdownIt-Anchor" href="#1定义-4"></a> 1&gt;定义</h4><ul><li><p><code>map[KeyType]ValueType</code>——将键映射到值</p></li><li><p>映射的零值为<code>nil</code>；该映射既没有键，也不能添加键</p></li><li><p><code>make</code>函数会返回给定类型的映射，将其初始化备用</p></li></ul><p>访问某个 key 的 value：<code>m[&quot;Google&quot;]</code></p><p>修改某个 key 的 value：<code>m[&quot;Google&quot;] = Vertex&#123;...&#125;</code></p><p>删除某个 key：<code>delete(m, &quot;Google&quot;)</code></p><p>判断 key 是否存在：</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs fsharp"><span class="hljs-keyword">val</span>, ok <span class="hljs-operator">:=</span> m[<span class="hljs-string">&quot;Google&quot;</span>]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">ok</span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;存在:&quot;</span>, <span class="hljs-keyword">val</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2映射字面值"><a class="markdownIt-Anchor" href="#2映射字面值"></a> 2&gt;映射字面值</h4><p>与结构体字面量类似，<strong>但必须要有键名</strong></p><h4 id="3修改映射"><a class="markdownIt-Anchor" href="#3修改映射"></a> 3&gt;修改映射</h4><ul><li><p>插入或修改元素：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go">m[key] = elem<br></code></pre></td></tr></table></figure><ul><li><strong>含义</strong>：向 map <code>m</code> 中插入一个键为 <code>key</code>、值为 <code>elem</code> 的元素。</li><li><strong>如果 key 已经存在</strong>，就会修改原有的值；</li><li><strong>如果 key 不存在</strong>，就会新增一个键值对。</li></ul></li><li><p>获取元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go">elem = m[key]<br></code></pre></td></tr></table></figure><ul><li><strong>含义</strong>：从 map <code>m</code> 中取出 key 对应的值，赋值给变量 <code>elem</code>。</li><li>如果 <code>key</code> 存在，就返回对应的值；</li><li>如果 <code>key</code> 不存在，就返回<strong>该类型的零值</strong>（比如 <code>0</code>、<code>&quot;&quot;</code>、<code>false</code>、<code>nil</code> 等）。</li></ul></li><li><p>删除元素</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-built_in">delete</span>(m,key)<br></code></pre></td></tr></table></figure><ul><li><strong>含义</strong>：从 map <code>m</code> 中删除 key 对应的元素（如果存在）。</li><li>删除不存在的 key 不会报错，Go 会静默忽略。</li></ul></li><li><p>通过<strong>双赋值</strong>检测某个键是否存在</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Go">elem,ok = m[key]<br></code></pre></td></tr></table></figure><ul><li><strong><code>ok</code> 是一个布尔值</strong>（bool）：<ul><li>如果 key 在 map 中存在，则 <code>ok == true</code>，<code>elem</code> 是对应的值；</li><li>如果 key 不存在，则 <code>ok == false</code>，<code>elem</code> 是类型的零值（例如 int 为 <code>0</code>）。</li></ul></li><li>若<code>elem</code>和<code>ok</code>未声明，那就可以直接用短变量短变量声明并赋值</li></ul></li></ul><h3 id="6函数值"><a class="markdownIt-Anchor" href="#6函数值"></a> 6.函数值（！！！）</h3><p>函数值也可以<strong>像其他值一样传递</strong></p><p>也可以<strong>用作函数的参数或返回值</strong></p><p>就比如这一段：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-comment">// 这里的函数compute直接把函数fn的值当做参数进行传参</span><br><span class="hljs-comment">// 这里的fn其实是一个函数类型的参数，传入的函数必须符合fn的声明：接收两个float64参数并返回一个float64的函数</span><br><span class="hljs-comment">// 而compute的内容：就是会用参数3,4来调用你传入的这个fn，并返回结果</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">compute</span><span class="hljs-params">(fn <span class="hljs-keyword">func</span>(<span class="hljs-type">float64</span>, <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span>) <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> fn(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    <span class="hljs-comment">// 这里等号右边是一个匿名函数：定义了一个没有名字的函数</span><br>    <span class="hljs-comment">// 而后将函数值赋给变量hypot</span><br>hypot := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x, y <span class="hljs-type">float64</span>)</span></span> <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Sqrt(x*x + y*y)<br>&#125;<br>    <br>    <span class="hljs-comment">//调用hypot(5,12)</span><br>fmt.Println(hypot(<span class="hljs-number">5</span>, <span class="hljs-number">12</span>))<br><br>    <span class="hljs-comment">// 将函数hypot传入compute，即现在的fn为hypot，所以compute调用hypot(3,4)</span><br>    <span class="hljs-comment">// 所以归根究底这里其实就是调用hypot(3,4)而已</span><br>fmt.Println(compute(hypot))<br>    <span class="hljs-comment">// 而这里传给compute的参数就是math.Pow，也符合fn的声明，所以compute调用math.Pow(3,4)</span><br>    <span class="hljs-comment">// 所以本质上，这个调用最终返回的是math.Pow(3,4)的值</span><br>fmt.Println(compute(math.Pow))<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7函数闭包"><a class="markdownIt-Anchor" href="#7函数闭包"></a> 7.函数闭包</h3><p><strong>闭包</strong>是指：<br>一个<strong>函数</strong>可以“记住”并访问它外部作用域（函数外面）中的变量，即使外部函数已经返回了，这个函数依然能使用那个变量。</p><p>换句话说，<mark>闭包是一个<strong>函数和其相关变量环境的组合体</strong></mark>。</p><p>具体解释</p><ol><li><strong>函数体外的变量</strong>：闭包引用了定义在它外层的变量。比如一个函数里定义了另一个函数，内层函数可以访问外层函数的变量。</li><li><strong>绑定变量</strong>：闭包不仅能访问这些外部变量，还能修改它们，闭包“绑定”了这些变量，变量的生命周期会被延长。</li><li><strong>“函数值”</strong>：闭包本质上是一个函数值，你可以像传递普通函数那样传递它，但它“带着”自己访问的外部变量。</li></ol><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-comment">// 这个函数 adder 返回一个“闭包函数” —— func(int) int</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">adder</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123;<br>sum := <span class="hljs-number">0</span> <span class="hljs-comment">// 局部变量 sum 只属于每一次 adder 调用</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(x <span class="hljs-type">int</span>)</span></span> <span class="hljs-type">int</span> &#123; <span class="hljs-comment">// 返回的匿名函数形成一个闭包，绑定了 sum</span><br>sum += x      <span class="hljs-comment">// 每次调用时会累加 sum</span><br><span class="hljs-keyword">return</span> sum    <span class="hljs-comment">// 返回当前 sum 的值</span><br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>pos, neg := adder(), adder()<br><span class="hljs-comment">// 这里分别调用了两次 adder()</span><br><span class="hljs-comment">// 所以 pos 和 neg 是两个不同的闭包，它们分别有自己的 sum 值</span><br><br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>fmt.Println(<br>pos(i),       <span class="hljs-comment">// 正数闭包，每次加上 i</span><br>neg(<span class="hljs-number">-2</span>*i),    <span class="hljs-comment">// 负数闭包，每次加上 -2*i</span><br>)<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>小练习——斐波那契数</strong></p><h2 id="练习斐波纳契闭包"><a class="markdownIt-Anchor" href="#练习斐波纳契闭包"></a> 练习：斐波纳契闭包</h2><blockquote><p>让我们用函数做些好玩的。</p><p>实现一个 <code>fibonacci</code> 函数，它返回一个函数（闭包），该闭包返回一个<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%88%97">斐波纳契数列</a> (0, 1, 1, 2, 3, 5, …)。</p></blockquote><p>要求分析：</p><ul><li><p>实现一个函数<code>fibonacci</code></p><ul><li>返回一个函数（即闭包）</li><li>这个返回的函数每次被调用的时候，返回下一个斐波那契数</li><li>数列为：<ul><li>F(0) = 0</li><li>F(1) = 1</li><li>F(n) = F(n-1)+F(n-2)</li></ul></li></ul></li><li><p>所以我们目前只需要记住两个变量：就<code>prev</code>和<code>curr</code></p><ul><li>初始化为0和1</li><li>之后的每次调用就： <code>next := prev+curr</code> <code>prev = curr</code> <code>curr = next</code></li></ul></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br><span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-comment">// Fibonacci函数不接受传参，返回一个同样不接受参数的函数，但这个函数会返回一个int类型的函数值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><span class="hljs-type">int</span>&#123;<br>prev,curr := <span class="hljs-number">0</span>,<span class="hljs-number">1</span><span class="hljs-comment">//先初始化</span><br>    <br>    <span class="hljs-comment">// 这里就是在调用func()，最后的返回结果是一个int类型</span><br>    <span class="hljs-comment">// 所以这里的闭包其实是func()+fibonacci函数中的局部变量prev和curr</span><br>    <span class="hljs-comment">// 返回斐波那契数的根本原因其实是调用了func()</span><br><span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span>&#123;<br>result := prev<br><span class="hljs-comment">// 更新prev和curr的值</span><br>prev,curr = curr, curr+prev<br><span class="hljs-comment">// 返回当前的斐波那契数</span><br><span class="hljs-keyword">return</span> result<br>&#125; <br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>f := fibonacci()<br><span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++&#123;<br>fmt.Println(f())<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>小练习：</p><ul><li>累加器</li><li>只执行一次</li><li>带状态的计数器</li></ul><blockquote><ul><li>[x] <strong>练习1：累加器（Accumulator）</strong></li></ul><p><strong>要求：</strong><br>写一个函数 <code>accumulator</code>，它返回一个闭包。这个闭包接收一个整数参数，每次调用都会把传入的数累加起来，并返回当前的累加和。</p><p><strong>用法示例：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs go">acc := accumulator()<br>fmt.Println(acc(<span class="hljs-number">5</span>))  <span class="hljs-comment">// 输出：5</span><br>fmt.Println(acc(<span class="hljs-number">3</span>))  <span class="hljs-comment">// 输出：8</span><br>fmt.Println(acc(<span class="hljs-number">10</span>)) <span class="hljs-comment">// 输出：18</span><br></code></pre></td></tr></table></figure><ul><li>[ ] <strong>练习2：只执行一次（Once）</strong></li></ul><p><strong>要求：</strong><br>写一个函数 <code>once</code>，它接收一个函数参数 <code>fn</code>（无参数无返回值），返回一个闭包。这个闭包被调用时只会执行传入的函数一次，后续调用不会再执行 <code>fn</code>。</p><p><strong>用法示例：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Go">f := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>    fmt.Println(<span class="hljs-string">&quot;Hello, world!&quot;</span>)<br>&#125;<br>onceFunc := once(f)<br><br>onceFunc() <span class="hljs-comment">// 输出: Hello, world!</span><br>onceFunc() <span class="hljs-comment">// 不输出了</span><br>onceFunc() <span class="hljs-comment">// 依然不输出</span><br></code></pre></td></tr></table></figure><ul><li>[ ] <strong>练习3：带状态的计数器（Stateful Counter）</strong></li></ul><p><strong>要求：</strong><br>写一个函数 <code>makeCounter</code>，它返回两个闭包函数：一个用于增加计数（+1），另一个用于读取当前计数。</p><p><strong>用法示例：</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs go">inc, get := makeCounter()<br>inc()<br>inc()<br>fmt.Println(get()) <span class="hljs-comment">// 输出：2</span><br>inc()<br>fmt.Println(get()) <span class="hljs-comment">// 输出：3</span><br></code></pre></td></tr></table></figure></blockquote><h2 id="方法和接口"><a class="markdownIt-Anchor" href="#方法和接口"></a> 方法和接口</h2><h3 id="1-方法"><a class="markdownIt-Anchor" href="#1-方法"></a> 1. 方法</h3><h4 id="1-定义"><a class="markdownIt-Anchor" href="#1-定义"></a> 1&gt; 定义</h4><p>方法：一类带特殊的<strong>接收者</strong>参数的函数</p><ul><li>方法接收者在它自己的参数列表内，位于 <code>func</code> 关键字和方法名之间。</li><li>方法接收者可以是结构体也可以是非结构体</li></ul><table><thead><tr><th>特点</th><th>函数</th><th>方法</th></tr></thead><tbody><tr><td>定义方式</td><td><code>func 函数名(参数)</code></td><td><code>func (接收者 类型) 方法名(参数)</code></td></tr><tr><td>是否绑定类型</td><td>❌ 没有</td><td>✅ 绑定一个类型（通常是结构体）</td></tr><tr><td>调用方式</td><td><code>函数名(参数)</code></td><td><code>变量.方法名(参数)</code></td></tr><tr><td>语法结构</td><td>接收者在参数列表中</td><td>接收者在函数名前，独立于参数</td></tr></tbody></table><hr><h4 id="方法和函数的区别"><a class="markdownIt-Anchor" href="#方法和函数的区别"></a> 方法和函数的区别</h4><p><strong>函数</strong>：</p><ul><li>定义时：<code>func 函数名(参数列表) 返回值</code></li><li>调用时：<code>函数名(传入参数)</code></li></ul><p><strong>方法</strong>：</p><ul><li>定义时：<code>func (接收者名 接收者类型) 方法名(参数列表) 返回值</code></li><li>调用时：<code>接收者变量.方法名(传入参数)</code></li></ul><hr><h4 id="2-接收者为值"><a class="markdownIt-Anchor" href="#2-接收者为值"></a> 2&gt; 接收者为值</h4><ul><li>结构体</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main <br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-comment">// 定义一个结构体——包含两个float64字段X和Y</span><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>X,Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-comment">// 定义一个方法——方法是一个函数，接收者是一个结构体</span><br><span class="hljs-comment">// 方法接收者就是定义的这个Vertex结构体的v </span><br><span class="hljs-comment">// 方法的名字就是Abs()</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Vertex)</span></span> Abs() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Sqrt(v.X*v.X+v.Y*v.Y)<br>&#125;<br><br><span class="hljs-comment">// 主函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>v := Vertex&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>fmt.Print(v.Abs())<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>很重要的一点，我们只能对<strong>同一个包中</strong>定义接收者类型声明变量</p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">方法可以加吗？</th><th style="text-align:center">条件</th></tr></thead><tbody><tr><td style="text-align:center">自己包中定义的结构体</td><td style="text-align:center">✅ 可以</td><td style="text-align:center">类型定义和方法声明在同一包</td></tr><tr><td style="text-align:center">自己包中定义的新类型（如 <code>type MyInt int</code>）</td><td style="text-align:center">✅ 可以</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">内置类型（<code>int</code>, <code>string</code>）</td><td style="text-align:center">❌ 不可以</td><td style="text-align:center">不在你包中定义</td></tr><tr><td style="text-align:center">标准库类型（如 <code>time.Time</code>）</td><td style="text-align:center">❌ 不可以</td><td style="text-align:center">不在你包中定义</td></tr><tr><td style="text-align:center">第三方包的类型</td><td style="text-align:center">❌ 不可以</td><td style="text-align:center">不在你包中定义</td></tr></tbody></table></li></ul><h4 id="3-接收者为指针类型"><a class="markdownIt-Anchor" href="#3-接收者为指针类型"></a> 3&gt; 接收者为指针类型</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main <br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-comment">// 定义一个结构体——只能有字面量</span><br><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span> &#123;<br>X,Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-comment">// 定义一个方法——方法是一个函数，接收者是一个结构体(值)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v Vertex)</span></span> Abs() <span class="hljs-type">float64</span> &#123;<br><span class="hljs-keyword">return</span> math.Sqrt(v.X*v.X+v.Y*v.Y)<br>&#125;<br><br><span class="hljs-comment">// 定义一个方法——方法是一个函数，接收者是一个结构体(指针)</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v  *Vertex)</span></span> Scale(f <span class="hljs-type">float64</span>)&#123;<br>v.X=v.X*f<br>v.Y=v.Y*f<br>&#125;<br><br><span class="hljs-comment">// 主函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>v := Vertex&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>    v.Scale(<span class="hljs-number">10</span>) <span class="hljs-comment">// 调用指针接收者的方法，这会修改 v 的 X 和 Y 值</span><br><span class="hljs-comment">// 所以在下一步调用 Abs() 时，传入的是被 Scale() 修改过的 v</span><br><span class="hljs-comment">// 即 v 的值已经变成了 (30, 40)</span><br>fmt.Print(v.Abs())<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p><strong>如果你的方法要“修改接收者本身”或接收者结构体较大，请使用指针接收者 ；</strong></p></li><li><p><strong>如果只是只读访问或结构体很小，可以用值接收者</strong></p></li></ul><h4 id="4指针重定向"><a class="markdownIt-Anchor" href="#4指针重定向"></a> 4&gt;指针重定向</h4><blockquote><p><strong>Go 语言允许你用“结构体值”调用一个“接收者是指针”的方法，背后它会自动帮你取地址。</strong><br>这就是所谓的 <strong>指针重定向（pointer auto-dereferencing）</strong>。</p></blockquote><blockquote><p>我的理解：重定向，就是允许我们在调用方法时**不用考虑88在原本定义时绑定的接收者类型，用简单的变量形式或者是指针类型，Go都会自动地帮我们转换到对应的指针类型或者是简单变量类型而不至于出现调用函数时传入参数类型不匹配会出现的报错</p></blockquote><p>在调用方法时，<strong>即使接收者类型不完全匹配</strong>（比如方法定义需要指针类型，而你传的是值类型），<strong>Go 会自动帮你转换</strong>，让你不用手动加 <code>&amp;</code> 或 <code>*</code>，也不会报错。</p><h4 id="5-方法一般选用指针作为接收者"><a class="markdownIt-Anchor" href="#5-方法一般选用指针作为接收者"></a> 5&gt; 方法一般选用<code>指针</code>作为接收者</h4><table><thead><tr><th>使用指针接收者的理由</th><th>说明</th></tr></thead><tbody><tr><td>✅ 需要修改接收者</td><td>不用担心值拷贝导致修改无效</td></tr><tr><td>✅ 节省内存和性能</td><td>避免每次方法调用时复制大型结构体</td></tr><tr><td>✅ 接口一致性</td><td>所有方法都使用指针接收者，调用时更统一，不混乱</td></tr></tbody></table><blockquote><p><strong>“不要混用值接收者和指针接收者”</strong> 是一种 <strong>推荐的统一性设计原则</strong>。</p></blockquote><h3 id="2接口interface"><a class="markdownIt-Anchor" href="#2接口interface"></a> 2.接口<code>interface</code></h3><h4 id="1定义-5"><a class="markdownIt-Anchor" href="#1定义-5"></a> 1&gt;定义</h4><p><strong>接口类型</strong>的定义为<strong>一组方法签名</strong>（只关心你能做什么：即方法）</p><table><thead><tr><th>问题</th><th>回答</th></tr></thead><tbody><tr><td>Go 中的接口是什么？</td><td>一组方法签名，是一种“能力描述”</td></tr><tr><td>它和 C++ 的区别？</td><td>C++ 用抽象类+继承，Go 用方法匹配+自动实现</td></tr><tr><td>有什么用？</td><td>多态、灵活编程、解耦、测试、标准库</td></tr><tr><td>接口变量可以装什么？</td><td>实现了接口中所有方法的值</td></tr><tr><td>指针和值的区别？</td><td>如果方法是 <code>*T</code> 定义的，那只有 <code>*T</code> 实现了接口，不能用 <code>T</code> 直接赋值</td></tr></tbody></table><h4 id="2接口的隐式实现"><a class="markdownIt-Anchor" href="#2接口的隐式实现"></a> 2&gt;接口的隐式实现</h4><p>实现一个接口的方法：实现该接口中的所有方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main <br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><br><span class="hljs-comment">// 这里定义了一个接口类型Abser，里面存放了一个方法签名Abs()——但没有实现方法</span><br><span class="hljs-comment">// Go中的接口是隐式实现，即谁实现了接口中的这一组方法签名，就等于谁实现了这个接口</span><br><span class="hljs-keyword">type</span> Abser <span class="hljs-keyword">interface</span>&#123;<br>Abs() <span class="hljs-type">float64</span> <span class="hljs-comment">//方法签名</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">var</span> a Abser <span class="hljs-comment">//这里我们声明了一个接口变量——a</span><br>f := MyFloat(-math.Sqrt2) <span class="hljs-comment">// 声明了一个类型为MyFloat的变量f</span><br><span class="hljs-comment">// 这里我们声明了一个类型为Vertex的变量v</span><br>v := Vertex&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br><br>a = f  <span class="hljs-comment">//f MyFloat实现了Abser</span><br>a = &amp;v  <span class="hljs-comment">// 这里的赋值覆盖掉了前面的MyFloat类型的f赋值，接下来则是 *Vertex 实现了Abser</span><br><br><span class="hljs-comment">//a = v  //v 这里Vertex没有实现Abser</span><br><br>fmt.Println(a,a.Abs())<span class="hljs-comment">// 这里a是接口变量本身存储的值，而此刻a存储的是&amp;v，即*Vertex类型，所以调用的Abs方法也是用*Vertex实现的 </span><br>&#125;<br><br><span class="hljs-keyword">type</span> MyFloat <span class="hljs-type">float64</span> <span class="hljs-comment">// 定义了一个类型MyFloat，底层类型是float64</span><br><br><span class="hljs-comment">// 这里我们为MyFloat类型实现了Abs方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f MyFloat)</span></span> Abs() <span class="hljs-type">float64</span>&#123;<br><span class="hljs-keyword">if</span> f &lt; <span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(-f)<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-type">float64</span>(f)<br>&#125;<br><br><br><span class="hljs-comment">// 这里我们定义了一个结构体类型Vertex</span><br><span class="hljs-keyword">type</span> Vertex <span class="hljs-keyword">struct</span>&#123;<br>X,Y <span class="hljs-type">float64</span><br>&#125;<br><br><span class="hljs-comment">// 这里我们为*Vertex类型实现了Abs方法</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v *Vertex)</span></span> Abs() <span class="hljs-type">float64</span>&#123;<br><span class="hljs-keyword">return</span> math.Sqrt(v.X*v.X + v.Y*v.Y)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3接口值"><a class="markdownIt-Anchor" href="#3接口值"></a> 3&gt;接口值</h4><p>接口也可以像其他值一样传递</p><ul><li><p>接口值可以用作函数的参数或返回值</p></li><li><p>接口值看做包含<strong>值和具体类型的元组</strong>——<code>(value,type)</code></p></li><li><p>接口值保存了一个具体底层类型的具体值</p></li><li><p>接口值调用方法时会执行其底层类型的同名方法</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span>(<br><span class="hljs-string">&quot;fmt&quot;</span><br><span class="hljs-string">&quot;math&quot;</span><br>)<br><span class="hljs-comment">// 定义一个接口类型，其中有一个方法M()</span><br><span class="hljs-keyword">type</span> I <span class="hljs-keyword">interface</span>&#123;<br>M()<br>&#125;<br><span class="hljs-comment">// 定义一个结构体类型T,里面的字面量为S</span><br><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span>&#123;<br>S <span class="hljs-type">string</span> <br>&#125;<br><span class="hljs-comment">// 为*T类型实现了M方法，所以*T也实现了接口I</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *T)</span></span> M()&#123;<br>fmt.Println(t.S)<br>&#125;<br><span class="hljs-comment">// 定义一个底层类型为float64的类型F</span><br><span class="hljs-keyword">type</span> F <span class="hljs-type">float64</span><br><span class="hljs-comment">// 为F类型实现M方法，所以F也实现了接口I</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(f F)</span></span> M()&#123;<br>fmt.Println(f)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">// 声明一个接口类型的变量i</span><br><span class="hljs-keyword">var</span> i I<br><br><span class="hljs-comment">// 这里我们声明i为一个T类型实例的指针</span><br>i = &amp;T&#123;<span class="hljs-string">&quot;hello&quot;</span>&#125; <span class="hljs-comment">// 接口值内部是 (&amp;T&#123;&quot;hello&quot;&#125;, *T)</span><br>describe(i)<span class="hljs-comment">//描述现在的接口值i</span><br><span class="hljs-comment">// 调用T类型实现的接口——方法M</span><br>i.M()<br><br><span class="hljs-comment">// 声明i为一个F类型实例</span><br>i = F(math.Pi)  <span class="hljs-comment">// 接口值内部是 (F(math.Pi), F)</span><br>describe(i)<span class="hljs-comment">//描述现在的接口值i</span><br>i.M()<span class="hljs-comment">//调用F类型实现的接口——方法M</span><br>&#125;<br><br><span class="hljs-comment">// 描述接口值</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(i I)</span></span>&#123;<br>fmt.Printf(<span class="hljs-string">&quot;(%v,%T)\n&quot;</span>,i,i)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="5底层值为nil的接口值"><a class="markdownIt-Anchor" href="#5底层值为nil的接口值"></a> 5&gt;底层值为<code>nil</code>的接口值</h4><p>即便接口内的具体值为 nil，方法<strong>仍然会被 nil 接收者调用</strong>。</p><p>——》不会触发空指针异常</p><p>——》而是否会出错取决于方法内部是否<strong>正确处理了 <code>nil</code> 接收者</strong></p><p>————》写了处理应对<code>nil</code>的逻辑，那就正常执行</p><p>————》没写，那会<code>panic</code></p><blockquote><p>**<code>panic</code>**是一种运行时异常：</p><ul><li><p><code>panic</code>会导致程序中断执行，并按照调用栈向上传播</p></li><li><p>除非你用 <code>recover()</code> 捕获它，否则程序会崩溃；</p><p>常见的 <code>panic</code>原因有：</p><ul><li>访问了 <code>nil</code> 指针的字段或方法；</li><li>数组越界；</li><li>除以 0；</li><li>手动调用 <code>panic(&quot;some error&quot;)</code>。</li></ul></li></ul></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-keyword">type</span> I <span class="hljs-keyword">interface</span> &#123;<br>M()<br>&#125;<br><br><span class="hljs-keyword">type</span> T <span class="hljs-keyword">struct</span> &#123;<br>S <span class="hljs-type">string</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(t *T)</span></span> M() &#123;<br>    <span class="hljs-comment">// 这里添加了处理nil的逻辑，所以不会panic</span><br><span class="hljs-keyword">if</span> t == <span class="hljs-literal">nil</span> &#123;<br>fmt.Println(<span class="hljs-string">&quot;&lt;nil&gt;&quot;</span>)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(t.S)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> i I<br><br><span class="hljs-keyword">var</span> t *T<br>i = t<br>describe(i)<br>i.M()<br><br>i = &amp;T&#123;<span class="hljs-string">&quot;hello&quot;</span>&#125;<br>describe(i)<br>i.M()<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(i I)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;(%v, %T)\n&quot;</span>, i, i)<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="6nil接口值"><a class="markdownIt-Anchor" href="#6nil接口值"></a> 6&gt;<code>nil</code>接口值</h4><p><code>nil</code>接口值几部保存值也不保存具体类型</p><p>为 nil 接口调用方法会产生运行时错误，因为接口的元组内并未包含能够指明该调用哪个 <strong>具体</strong> 方法的类型。</p><h4 id="前两者区别"><a class="markdownIt-Anchor" href="#前两者区别"></a> 前两者区别</h4><table><thead><tr><th>名称</th><th>接口的 type</th><th>接口的 value</th><th>是否为 nil 接口值</th><th>是否能调用方法</th><th>调用方法是否 panic</th></tr></thead><tbody><tr><td><strong>nil 接口值</strong></td><td><code>nil</code></td><td><code>nil</code></td><td>✅ 是</td><td>❌ 无法调用</td><td>✅ panic（因为无类型）</td></tr><tr><td><strong>底层值为 nil 的接口值</strong></td><td>非 <code>nil</code> 类型（如 <code>*T</code>）</td><td><code>nil</code></td><td>❌ 否</td><td>✅ 可以调用</td><td>🚫 不一定 panic，取决于方法实现</td></tr></tbody></table><h4 id="7空接口"><a class="markdownIt-Anchor" href="#7空接口"></a> 7&gt;空接口</h4><p>指定了零个方法的接口值被称为 <strong>空接口：</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">interface</span>&#123;&#125; <br></code></pre></td></tr></table></figure><p>空接口可保存任何类型的值。（因为每个类型都至少实现了零个方法。）</p><p>空接口被用来处理未知类型的值。例如，<code>fmt.Print</code> 可接受类型为 <code>interface&#123;&#125;</code> 的任意数量的参数。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> i <span class="hljs-keyword">interface</span>&#123;&#125;<br>describe(i)<br><br>i = <span class="hljs-number">42</span><br>describe(i)<br><br>i = <span class="hljs-string">&quot;hello&quot;</span><br>describe(i)<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">describe</span><span class="hljs-params">(i <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>fmt.Printf(<span class="hljs-string">&quot;(%v, %T)\n&quot;</span>, i, i)<br>&#125;<br><br><span class="hljs-comment">//Result:</span><br><span class="hljs-comment">//(&lt;nil&gt;, &lt;nil&gt;)</span><br><span class="hljs-comment">//(42, int)</span><br><span class="hljs-comment">//(hello, string)</span><br></code></pre></td></tr></table></figure><h4 id="8类型断言"><a class="markdownIt-Anchor" href="#8类型断言"></a> 8&gt;类型断言</h4><ul><li><p>作用：提供了访问接口值底层具体值的方法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs GO">t := i.(T)<br></code></pre></td></tr></table></figure><p>该接口断言接口值<code>i</code>保存了具体类型<code>T</code>，并将其底层类型赋予变量<code>t</code></p></li><li><p>若<code>i</code>未保存<code>T</code>类型的值，该语句就会触发一个<code>panic</code></p></li><li><p>为判断一个接口值是否保存了一个特定的类型，<strong>类型断言</strong>可以返回两个值：<strong>其底层值以及一个布尔值</strong>（报告断言是否成功）</p><pre class="highlight"><code class="Go’">t,ok := i.(T)</code></pre></li></ul><p>​若<code>i</code>保存了一个<code>T</code>，那其底层值为<code>T</code>，<code>ok</code>为<code>true</code></p><p>​否则，<code>ok</code> 将为 <code>false</code> 而 <code>t</code> 将为 <code>T</code> 类型的零值，程序并不会产生 panic。</p><h4 id="9类型选择"><a class="markdownIt-Anchor" href="#9类型选择"></a> 9&gt;类型选择</h4><ul><li><p>定义：是一种按顺序从结果类型断言中选择分支的结构</p></li><li><p><strong>实现</strong>：与一般的 switch 语句相似，不过<strong>类型选择中的 case 为类型（而非值）</strong>， 它们针对给定接口值所存储的值的类型进行比较。</p></li><li><p><strong>声明</strong>：与类型断言 <code>i.(T)</code> 的语法相同，只是具体类型 <code>T</code> 被替换成了<strong>关键字 <code>type</code></strong>。</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">switch</span> v := i.(<span class="hljs-keyword">type</span>) &#123;<br><span class="hljs-keyword">case</span> T:<br>    <span class="hljs-comment">// v 的类型为 T</span><br><span class="hljs-keyword">case</span> S:<br>    <span class="hljs-comment">// v 的类型为 S</span><br><span class="hljs-keyword">default</span>:<br>    <span class="hljs-comment">// 没有匹配，v 与 i 的类型相同</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>此选择语句判断接口值 <code>i</code> 保存的值类型是 <code>T</code> 还是 <code>S</code>。<ul><li>在 <code>T</code> 或 <code>S</code> 的情况下，变量 <code>v</code> 会分别按 <code>T</code> 或 <code>S</code> 类型保存 <code>i</code> 拥有的值。</li><li>在默认（即没有匹配）的情况下，变量 <code>v</code> 与 <code>i</code> 的接口类型和值相同。</li></ul></li></ul><h4 id="9stringer"><a class="markdownIt-Anchor" href="#9stringer"></a> 9&gt;<code>Stringer</code></h4><p><a href="https://go-zh.org/pkg/fmt/"><code>fmt</code></a> 包中定义的 <a href="https://go-zh.org/pkg/fmt/#Stringer"><code>Stringer</code></a> 是最普遍的接口之一。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">type</span> <span class="hljs-type">Stringer</span> interface &#123;<br>    <span class="hljs-type">String</span>() string<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Stringer</code> 是一个可以用字符串描述自己的类型。<code>fmt</code> 包（还有很多包）都通过此接口来打印值。</p><h4 id="10错误"><a class="markdownIt-Anchor" href="#10错误"></a> 10&gt;错误</h4><p>Go 程序使用 <code>error</code> 值来表示错误状态。</p><p>与 <code>fmt.Stringer</code> 类似，<code>error</code> 类型是一个内建接口：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">type <span class="hljs-built_in">error</span><span class="hljs-built_in"> interface </span>&#123;<br>    <span class="hljs-built_in">Error</span>() string<br>&#125;<br></code></pre></td></tr></table></figure><p>（与 <code>fmt.Stringer</code> 类似，<code>fmt</code> 包也会根据对 <code>error</code> 的实现来打印值。）</p><p>通常函数会返回一个 <code>error</code> 值，调用它的代码应当判断这个错误是否等于 <code>nil</code> 来进行错误处理。</p><figure class="highlight hsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs hsp">i, <span class="hljs-keyword">err</span> := strconv.Atoi(<span class="hljs-string">&quot;42&quot;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">err</span> != nil &#123;<br>    fmt.Printf(<span class="hljs-string">&quot;couldn&#x27;t convert number: %v\n&quot;</span>, <span class="hljs-keyword">err</span>)<br>    <span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">&quot;Converted integer:&quot;</span>, i)<br></code></pre></td></tr></table></figure><p><code>error</code> 为 nil 时表示成功；非 nil 的 <code>error</code> 表示失败。</p><p>————》人工智能的算法</p>]]></content>
    
    
    
    <tags>
      
      <tag>go</tag>
      
      <tag>language</tag>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前后端基础</title>
    <link href="/2025/05/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/05/02/%E5%89%8D%E5%90%8E%E7%AB%AF%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="前后端关系"><a class="markdownIt-Anchor" href="#前后端关系"></a> 前后端关系</h1><h2 id="一-前端"><a class="markdownIt-Anchor" href="#一-前端"></a> 一、前端</h2><ul><li><p>看的见得页面（可视</p></li><li><p><strong>响应式</strong>——APP、PC端、小程序、桌面程序</p></li><li><p>使用的语言：</p><ul><li><p>网页三件套：HTML、CSS、JavaScript</p></li><li><p>iOS APP：Object-C</p></li><li><p>Android APP： Java</p></li><li><p>桌面程序：C++</p></li></ul></li></ul><h2 id="二-后端"><a class="markdownIt-Anchor" href="#二-后端"></a> 二、后端</h2><ul><li>给页面提供数据，与服务器打交道</li><li>具体：<ul><li>处理业务逻辑</li><li>处理文件</li><li>处理数据库</li><li>把处理好的结果返回给前端（之后前端将数据展示出来）</li></ul></li><li>语言：<ul><li>Java</li><li>PHP</li><li>Python</li><li>Go</li><li>JavaScript</li></ul></li></ul><h2 id="三-前后端关系"><a class="markdownIt-Anchor" href="#三-前后端关系"></a> 三、前后端关系</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs meimaid"><br></code></pre></td></tr></table></figure><p><img src="%E5%89%8D%E5%90%8E%E7%AB%AF%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="前后端关系图"></p><p>前后端分离，前端——静态界面，数据写死；后端——处理数据后通过接口返回给前端</p><blockquote><p>耕耘技术宅</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用hexo和GithubPages搭建个人网站</title>
    <link href="/2025/04/25/%E5%88%A9%E7%94%A8hexo%E5%92%8CGithubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/"/>
    <url>/2025/04/25/%E5%88%A9%E7%94%A8hexo%E5%92%8CGithubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99/</url>
    
    <content type="html"><![CDATA[<h1 id="利用hexo和github-pages搭建个人网站"><a class="markdownIt-Anchor" href="#利用hexo和github-pages搭建个人网站"></a> 利用hexo和Github Pages搭建个人网站</h1><p>启发点：B站up主</p><p>使用的教程有：</p>]]></content>
    
    
    
    <tags>
      
      <tag>教程整理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>神经网络</title>
    <link href="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<p><strong>写在前面：</strong></p><ul><li>声明：本文所有图片均来自<code>bilibili</code>up主<code>编程八点档</code>的讲解视频，点击即可跳转其主页<a href="https://space.bilibili.com/1056179587?spm_id_from=333.337.0.0">编程八点档</a></li><li>写这个学习笔记的本意是想要<strong>快速入门</strong>机器学习，并跑通在<code>Github</code>上找到的<code>minst手写数字识别</code>的代码 所以没有去听大名鼎鼎的吴恩达机器学习…在B站找了很多视频发现<code>编程八点档</code>讲的很清楚且时长比较短，适合短期内想要对机器学习和神经网络有一个大体了解的小白观看~~~</li></ul><h1 id="一机器学习要素"><a class="markdownIt-Anchor" href="#一机器学习要素"></a> （一）机器学习要素</h1><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%871_%E5%9B%9B%E5%A4%A7%E8%A6%81%E7%B4%A0.png" class=""><ul><li>训练集上表现良好，新样本集上表现较差：<strong>泛化能力差</strong></li></ul><h2 id="一-分类"><a class="markdownIt-Anchor" href="#一-分类"></a> 一、分类</h2><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%872_%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%9A%84%E5%88%86%E7%B1%BB.png" class="" title="style&#x3D;transform: scale(0.8);"><h3 id="1监督学习"><a class="markdownIt-Anchor" href="#1监督学习"></a> 1.监督学习：</h3><ul><li><strong>多个含有输入x和标签y的样本对组成</strong>，机器通过样本来学习正确答案</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%873_%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0%E7%9A%84%E8%BF%87%E7%A8%8B.png" class="" title="style&#x3D;transform: scale(0.8);"><ul><li>训练时，输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>送入映射函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>，得到输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mtext>尖</mtext></mrow><annotation encoding="application/x-tex">y尖</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">尖</span></span></span></span>，用正确答案标签<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>来监督<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mtext>尖</mtext></mrow><annotation encoding="application/x-tex">y尖</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">尖</span></span></span></span>的偏差，从而修正函数，得到更准确的输出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mtext>尖</mtext></mrow><annotation encoding="application/x-tex">y尖</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">尖</span></span></span></span>;</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%874.png" class=""><h4 id="监督学习的目标"><a class="markdownIt-Anchor" href="#监督学习的目标"></a> 监督学习的目标：</h4><p>构建从 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>输入</mtext><mi>x</mi><mtext>到输出</mtext><mi>y</mi></mrow><annotation encoding="application/x-tex">输入x到输出y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">入</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">出</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span> 之间的映射关系</p><h4 id="解决的两种问题分类回归"><a class="markdownIt-Anchor" href="#解决的两种问题分类回归"></a> 解决的两种问题：分类&amp;回归</h4><ul><li><strong>分类</strong>：对样本进行区分（根据标签——机器只能识别数字，所以将标签对应到具体的数字上），输出内容为<strong>离散值</strong></li><li><strong>回归</strong>：预测一个<strong>连续的值</strong>，例如：股价预测——<strong>用特征向量</strong>（包含了n个特征，每个特征都是一维的，n维特征向量，所有的特征都要转为数值来处理）<strong>来表征待预测的对象</strong></li></ul><h3 id="2无监督学习"><a class="markdownIt-Anchor" href="#2无监督学习"></a> 2.无监督学习：</h3><ul><li><p>训练集只有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>输入</mtext><mi>x</mi></mrow><annotation encoding="application/x-tex">输入x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">输</span><span class="mord cjk_fallback">入</span><span class="mord mathnormal">x</span></span></span></span>而没有<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>标签</mtext><mi>y</mi></mrow><annotation encoding="application/x-tex">标签y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">标</span><span class="mord cjk_fallback">签</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>——没有正确答案来监督输出</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%875_%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.png" class="" title="style&#x3D;transform: scale(0.5);"></li></ul><h4 id="无监督学习常见的任务"><a class="markdownIt-Anchor" href="#无监督学习常见的任务"></a> 无监督学习常见的任务</h4><p><strong>聚类</strong>，自行挖掘出数据的内在结构，讲给定的数据分成不同的类别</p><h3 id="3半监督学习"><a class="markdownIt-Anchor" href="#3半监督学习"></a> 3.半监督学习</h3><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%876_%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0.png" class="" title="style&#x3D;transform: scale(0.8);"><p>使用场景：<strong>标签数据比较昂贵，或有稳定数据流</strong>；</p><p>例如：检测社交网络的违规信息（手动标注部分数据，用半监督技术来修正对位标注数据的理解）；</p><h3 id="4强化学习"><a class="markdownIt-Anchor" href="#4强化学习"></a> 4.强化学习</h3><p>机器通过与环境的交互来实现目标的一种算法</p><h2 id="二-数据集的划分"><a class="markdownIt-Anchor" href="#二-数据集的划分"></a> 二、数据集的划分</h2><h3 id="1训练集"><a class="markdownIt-Anchor" href="#1训练集"></a> 1.训练集</h3><p>上课学的东西，用来<strong>训练模型</strong>，学会知识点</p><h3 id="2验证集"><a class="markdownIt-Anchor" href="#2验证集"></a> 2.验证集</h3><p>课后习题，用来<strong>纠正和强化</strong>知识点，用来评估不同超参数训练出的模型效果，从而优化模型</p><h3 id="3测试集"><a class="markdownIt-Anchor" href="#3测试集"></a> 3.测试集</h3><p>（闭卷！）考试，用来<strong>评估最终模型的效果</strong></p><h2 id="三-模型"><a class="markdownIt-Anchor" href="#三-模型"></a> 三、模型</h2><ul><li>模型是机器学习的结果</li><li>它描述了从输入到输出之间的映射关系</li><li>可以理解为是一个函数</li><li><strong>本质</strong>：算法＋参数的组合</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%877_%E4%B8%80%E4%B8%AA%E6%9E%84%E5%BB%BA%E5%87%BA%E6%9D%A5%E7%9A%84%E6%A8%A1%E5%9E%8B%E4%BE%8B%E5%AD%90.png" class="" title="style&#x3D;transform: scale(0.8);"><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%878.png" class="" title="style&#x3D;transform: scale(0.8);"><ul><li><strong>超参数</strong>：训练模型前，还需要设定其他的参数</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%879_%E8%B6%85%E5%8F%82%E6%95%B0%E6%B6%89%E5%8F%8A%E7%9A%84%E9%97%AE%E9%A2%98.png" class="" title="style&#x3D;transform: scale(0.8);"><p>————很难用解析解/梯度下降等传统方式获得，一般只能不断试错得到（但上面的a,b也属于超参数）</p><p><strong>测试集和训练集要严格分开，所以先将测试集固定下来</strong>，之后再讲剩下的数据划分为训练集和验证集，<strong>训练集用来训练模型，验证集用来评估模型，不断地调整超参数以找到最终的<mark>最优超参数</mark></strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8710_%E4%B8%8D%E6%96%AD%E8%B0%83%E6%95%B4%E7%9B%B4%E5%88%B0%E6%89%BE%E5%88%B0%E8%B6%85%E5%8F%82%E6%95%B0%E7%9A%84%E8%BF%87%E7%A8%8B.png" class=""><p><strong>数据集足够时</strong>，我们采取上述调参流程，不断调整，最终使得<strong>模型评估值最高</strong>的超参数值即为我们要找的<strong>最优超参数</strong>；</p><p><strong>数据值不足一万时</strong>，采用<strong>交叉验证</strong>（——》<strong>训练集与验证集</strong>之间的数据相互转换《——）</p><ul><li><strong>K折交叉验证</strong>——将训练集分为K份的交叉验证方式</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8711_%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81.png" class=""><p>此时在<strong>均值曲线</strong>上，使得模型评估值最大的超参数值即为最优超参数值</p><p>出现多个超参数时，采用的就是一个超参数组合</p><ul><li><p><strong>留一交叉验证</strong>——（样本量极少时——<em><strong>小于50</strong></em>才用）缺乏样本的情况下，每次只取一个样本作为验证集，此时的K和数据个数相等</p></li><li><p><strong>常规的数据集划分比例</strong>：</p></li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8712_%E5%B8%B8%E8%A7%84%E6%83%85%E5%86%B5%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E9%9B%86%E5%88%92%E5%88%86%E6%83%85%E5%86%B5.png" class=""><ul><li>数据集数量庞大时不可这样划分：<ul><li>验证集是为了得到最优超参数，1万左右的数据即可达到效果；</li><li>测试集是为了验证模型正确性，1万左右的数据即具有代表性；</li><li>划分比例变为——<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>100</mn><mo>:</mo><mn>1</mn><mo>:</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">100:1:1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></li></ul></li></ul><h2 id="四-损失函数得到的值无正负之分"><a class="markdownIt-Anchor" href="#四-损失函数得到的值无正负之分"></a> 四、损失函数——得到的值无正负之分</h2><ul><li><strong>量化模型预测值与标签真实值之间的差异</strong>，帮助筛选出更好的模型</li></ul><h2 id="五-最终转化成最优化问题"><a class="markdownIt-Anchor" href="#五-最终转化成最优化问题"></a> 五、最终转化成最优化问题</h2><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8713_%E4%BD%BF%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%BE%97%E5%88%B0%E7%9A%84%E5%80%BC%E6%9C%80%E5%B0%8F%E5%8C%96.png" class="" title="style&#x3D;transform: scale(0.5);"><ul><li><p>目标：找到一组<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>，使<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>样本</mtext><mi>x</mi><mtext>到映射值</mtext><mi>y</mi><mtext>尖</mtext></mrow><annotation encoding="application/x-tex">样本x到映射值y尖</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">样</span><span class="mord cjk_fallback">本</span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">到</span><span class="mord cjk_fallback">映</span><span class="mord cjk_fallback">射</span><span class="mord cjk_fallback">值</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">尖</span></span></span></span>之间的偏差最小</p></li><li><p>最优化问题中有两种函数：</p><ul><li><p><strong>凸函数</strong>：任意两点连线组成的线段都在这两点的函数曲线（曲面）的同一方向——<strong>凸函数只有一个全局最优解</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8714_%E5%87%B8%E5%87%BD%E6%95%B0.png" class="" title="style&#x3D;transform: scale(0.8);"><p><strong>求导找到最值点则可找到全局最优解</strong></p><p><strong>沿着梯度下降的方向更新参数，寻找最优解</strong></p></li><li><p><strong>非凸函数</strong>：</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8715_%E9%9D%9E%E5%87%B8%E5%87%BD%E6%95%B0.png" class="" title="style&#x3D;transform: scale(0.8);"></li></ul></li></ul><h1 id="二神经网络模型"><a class="markdownIt-Anchor" href="#二神经网络模型"></a> （二）神经网络模型</h1><ul><li><p>一种机器学习（有监督学习）模型；</p></li><li><p><strong>深度学习</strong>：深度神经网络（由深的层构成的神经网络模型）</p></li><li><p>神经网络模型由<strong>神经元模型</strong>为单位组成</p></li></ul><h2 id="一-神经元模型"><a class="markdownIt-Anchor" href="#一-神经元模型"></a> 一、神经元模型</h2><ol><li><strong>变量</strong>：<ul><li>输入维度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi></mrow><annotation encoding="application/x-tex">D</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>D</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">D=2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>时，两个输入<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">x_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>各自的权重<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">w_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">w_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></li><li>还有一个值永远为1的虚拟输入（<strong>偏置函数</strong>），其对应的权重<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">w_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>为偏置参数、偏置项</li><li><strong>激活函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi></mrow><annotation encoding="application/x-tex">f</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span></span></span></span></strong>：早期使用<strong>Sigmoid函数</strong>——一种常用的S型（Sigmoidal）激活函数<ul><li>作用：将任意实数输入映射到**<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(0,1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span>**的区间内，输出值可以解释为概率</li><li>数学定义：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\sigma(x)=\frac{1}{1+e^{-x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>为总输入值，即个实际输入量经过加权求和之后得到的值</li><li>特性：输出范围（0,1），适合表示概率；严格递增函数；处处可导（<strong>在反向传播中便于计算梯度</strong>）</li></ul></li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Sigmoid函数</span><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sigmoid</span>(<span class="hljs-params">x</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>/(<span class="hljs-number">1</span>+np.exp(-x))<br><br>x = np.linspace(-<span class="hljs-number">5</span>,<span class="hljs-number">5</span>,<span class="hljs-number">100</span>)<br>y = sigmoid(x)<br>plt.plot(x,y)<br>plt.title(<span class="hljs-string">&quot;Sigmoid Function&quot;</span>)<br>plt.xlabel(<span class="hljs-string">&quot;x&quot;</span>)<br>plt.ylabel(<span class="hljs-string">&quot;σ(x)&quot;</span>)<br>plt.grid()<br>plt.show()<br></code></pre></td></tr></table></figure><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8717_Sigmoid%E5%87%BD%E6%95%B0%E6%9B%B2%E7%BA%BF.png" class="" title="style&#x3D;transform: scale(0.8);"><ul><li>在0的右侧，x越大，输出越接近1；在0的左侧，x越大，输出越接近0；</li></ul><ol start="2"><li><strong>一个神经元的功能是求得输入向量与权向量的内积后，经一个非线性传递函数得到一个标量结果</strong></li></ol><h2 id="二-神经网络模型"><a class="markdownIt-Anchor" href="#二-神经网络模型"></a> 二、神经网络模型</h2><ul><li><strong>浅层神经网络</strong>：只包含输入层、隐藏层和输出层</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8718_%E6%B5%85%E5%B1%82%E6%A8%A1%E5%9E%8B.png" class=""><h3 id="1分类"><a class="markdownIt-Anchor" href="#1分类"></a> 1.分类</h3><ul><li><p><strong>前馈神经网络</strong>——信号从输入层向输出层单向传输的网络</p><ul><li><p>信号传输：<strong>前向传播</strong>、<strong>反向传播（BP算法）</strong></p><ul><li><p><mark>前向传播</mark>：信号传入模型，经过一层层运算得到输出</p></li><li><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8719_%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%AD.png" class=""><p>输入层、输出层都有两个神经元：说明输入和输出的数据都是二维的</p><p>在这里我们在隐藏层和输出层都采用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi><mtext>函数</mtext></mrow><annotation encoding="application/x-tex">Sigmoid函数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span></span></span></span>来作为激活函数</p></li><li><p><mark><strong>反向传播</strong></mark>：输出层往回传（<strong>前向传播的相反过程，所以回传的时候要考虑清楚</strong>）——<strong>用于传输误差</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8720_%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD.png" class=""><p>往回传，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>E</mi><mrow><mi>o</mi><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">E_{o1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>先经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>o</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">o_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">o</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的激活单元再经过加权单元，最后再传给<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mn>20</mn></mrow><annotation encoding="application/x-tex">w20</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord">2</span><span class="mord">0</span></span></span></span>——过程本质上是<strong>链式法则求偏导</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8721_%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E5%88%B0w11%E7%9A%84%E6%83%85%E5%86%B5.png" class=""><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8722_%E6%B1%82%E5%81%8F%E5%AF%BC%E7%9A%84%E8%BF%87%E7%A8%8B.png" class=""><p>红色公式：梯度下降法的权重更新公式更新<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mn>1</mn></msub><mn>1</mn></mrow><annotation encoding="application/x-tex">w_11</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.79444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">1</span></span></span></span>的值</p></li></ul></li></ul></li><li><p><strong>循环神经网络（记忆网络）</strong>——信号除了向后传输之外还会回传给自身的网络，当前神经元节点上<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mtext>时刻</mtext></mrow><annotation encoding="application/x-tex">t时刻</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">刻</span></span></span></span>的输出值在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">t+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69841em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>时刻还会作为输入重新传输回来，使得网络<strong>具备记忆能力</strong></p></li><li><p><strong>图神经网络</strong>——由一个额外的图来定义，基本单位：<mark>一组神经元</mark></p></li></ul><h3 id="2网络结构"><a class="markdownIt-Anchor" href="#2网络结构"></a> 2.网络结构</h3><ul><li>要素：网络层数（网络深度）、每层神经元的个数（网络宽度）</li></ul><p>——网络深度增加，模型能够拟合更复杂的函数，完成更复杂的任务，但运算量也暴增、梯度消失、梯度爆炸</p><p>————需要根据应用场景和综合算力来综合权衡</p><h3 id="3激活函数"><a class="markdownIt-Anchor" href="#3激活函数"></a> 3.激活函数</h3><p>前向激活、反向梯度回传（链式法则）</p><h4 id="1sigmoid函数"><a class="markdownIt-Anchor" href="#1sigmoid函数"></a> （1）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Sigmoid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span>函数</h4><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8723_Sigmoid%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%AF%BC%E6%95%B0.png" class=""><ul><li><strong>双侧饱和</strong></li><li>全为正梯度饱和会影响神经网络的收敛，会出现<strong>梯度消失</strong></li></ul><h4 id="2tanh函数"><a class="markdownIt-Anchor" href="#2tanh函数"></a> （2）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">tanh</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">h</span></span></span></span>函数</h4><p>——又叫双曲正切函数：</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi><mi>a</mi><mi>n</mi><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>−</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow><mrow><msup><mi>e</mi><mi>x</mi></msup><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">tanh(x)=\frac{e^x-e^{-x}}{e^x+e^{-x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.3906960000000002em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.987365em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.5935428571428571em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7026642857142857em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7385428571428572em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8476642857142858em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8724_tahn%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%AF%BC%E6%95%B0.png" class=""><ul><li><p>有正有负，可以有效解决<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi><mtext>函数恒大于</mtext><mn>0</mn></mrow><annotation encoding="application/x-tex">sigmoid函数恒大于0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">恒</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">于</span><span class="mord">0</span></span></span></span>带来的收敛慢的问题</p></li><li><p>但也存在梯度饱和，所以也会出现梯度消失</p></li><li><p>运算效率</p></li></ul><h4 id="3relu函数"><a class="markdownIt-Anchor" href="#3relu函数"></a> （3）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">ReLU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>函数</h4><p>——又叫线性整流函数</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ReLU(x)=max(0,x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></p><p>解决了梯度消失和运算效率的问题</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8725_Relu%E5%87%BD%E6%95%B0%E5%8F%8A%E5%85%B6%E5%AF%BC%E6%95%B0.png" class=""><ul><li><strong>单侧饱和</strong></li><li>函数输入为负值时，输出为0；</li></ul><p>​        函数输入为正值时，输出等于输入值；</p><ul><li>函数输入为正值时，梯度值恒为1——有效解决了梯度消失的问题；</li><li>只存在<strong>线性关系</strong>，计算量比<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi><mtext>和</mtext><mi>t</mi><mi>a</mi><mi>n</mi><mi>h</mi><mtext>函数</mtext></mrow><annotation encoding="application/x-tex">sigmoid和tanh函数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">和</span><span class="mord mathnormal">t</span><span class="mord mathnormal">a</span><span class="mord mathnormal">n</span><span class="mord mathnormal">h</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span></span></span></span>少很多；</li><li><strong>缺陷</strong>：学习率过大时，一些神经元会永久性失活——影响网络正常更新</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8726_%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E6%97%B6%E5%8F%97%E5%BD%B1%E5%93%8D%E7%9A%84%E5%8E%9F%E5%9B%A0.png" class="" title="style&#x3D;transform: scale(0.8);"><p>学习率过大时，会导致<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi><mi mathvariant="normal">Δ</mi><msup><mi>w</mi><mi>t</mi></msup></mrow><annotation encoding="application/x-tex">\mu\Delta w^t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9879959999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">μ</span><span class="mord">Δ</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span>大于<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>w</mi><mi>t</mi></msup></mrow><annotation encoding="application/x-tex">w^t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7935559999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span>的情况，使得<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>w</mi><mrow><mi>t</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">w^{t+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>的值变为负值</p><p>——》权重为负值时，输入网络的正值会在和权重相乘后也变为负值</p><p>——》负值经过<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">ReLU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>变为0，对应的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">ReLU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>导数也为0</p><p>——》导致<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>μ</mi><mi mathvariant="normal">Δ</mi><msup><mi>w</mi><mi>t</mi></msup></mrow><annotation encoding="application/x-tex">\mu\Delta w^t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9879959999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">μ</span><span class="mord">Δ</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7935559999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span></span></span></span></span></span></span></span>为0</p><p>——》<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi></mrow><annotation encoding="application/x-tex">w</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span></span>得不到更新，一直为负</p><p>——》其神经元一直输出0，永久失活</p><p>——》<strong>死亡ReLU问题</strong></p><h4 id="4leaky-relu函数"><a class="markdownIt-Anchor" href="#4leaky-relu函数"></a> （4）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>L</mi><mi>e</mi><mi>a</mi><mi>k</mi><mi>y</mi><mtext> </mtext><mi>R</mi><mi>e</mi><mi>L</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">Leaky\  ReLU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">L</span><span class="mord mathnormal">e</span><span class="mord mathnormal">a</span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace"> </span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="mord mathnormal">e</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>函数</h4><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8727_Leaky_ReLU%E7%9A%84%E8%A1%A8%E8%BE%BE%E5%BC%8F.png" class="" title="style&#x3D;transform: scale(0.8);"><p>针对<strong>Dead ReLU</strong>而提出的激活函数</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8728.png" class=""><hr><p><strong>好的激活函数</strong>应该满足两个条件：</p><ul><li>单侧饱和</li><li>输出值分布在0的两侧</li></ul><hr><h4 id="5elu函数"><a class="markdownIt-Anchor" href="#5elu函数"></a> （5）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>E</mi><mi>L</mi><mi>U</mi></mrow><annotation encoding="application/x-tex">ELU</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mord mathnormal">L</span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span></span></span></span>函数</h4><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8729_ELU%E5%87%BD%E6%95%B0.png" class=""><h4 id="6swish函数"><a class="markdownIt-Anchor" href="#6swish函数"></a> （6）<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>h</mi></mrow><annotation encoding="application/x-tex">swish</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span></span></span></span>函数</h4><p>表达式：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>w</mi><mi>i</mi><mi>s</mi><mi>h</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>x</mi><mo>⋅</mo><mi>σ</mi><mo stretchy="false">(</mo><mi>β</mi><mo>⋅</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">Swish(x)=x\cdot \sigma(\beta \cdot x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord mathnormal">i</span><span class="mord mathnormal">s</span><span class="mord mathnormal">h</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi></mrow><annotation encoding="application/x-tex">\sigma</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi><mtext>函数</mtext></mrow><annotation encoding="application/x-tex">Sigmoid函数</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord cjk_fallback">函</span><span class="mord cjk_fallback">数</span></span></span></span></li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span>：可调节参数</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>σ</mi><mo stretchy="false">(</mo><mi>β</mi><mo>⋅</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sigma(\beta \cdot x)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">σ</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mn>1</mn><mo>+</mo><msup><mi>e</mi><mrow><mo>−</mo><mi>β</mi><mi>x</mi></mrow></msup></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{1+e^{-\beta x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.260859em;vertical-align:-0.41575099999999987em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.64258em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">+</span><span class="mord mtight"><span class="mord mathnormal mtight">e</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7820285714285713em;"><span style="top:-2.786em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.05278em;">β</span><span class="mord mathnormal mtight">x</span></span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.41575099999999987em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8730_Swish%E5%87%BD%E6%95%B0.png" class=""><ul><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mi>i</mi><mi>g</mi><mi>m</mi><mi>o</mi><mi>i</mi><mi>d</mi></mrow><annotation encoding="application/x-tex">Sigmoid</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal">i</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span></span></span></span> 函数：起到了门控单元的作用</p></li><li><p>先通过门控单元得到的输出在于输入信号相乘得到输出值</p></li><li><p><strong>满足单侧饱和、输出值分布在0的两侧</strong></p></li></ul><h2 id="三-全连接神经网络多层感知机"><a class="markdownIt-Anchor" href="#三-全连接神经网络多层感知机"></a> 三、全连接神经网络——多层感知机</h2><p>有缺陷</p><h2 id="四-卷积神经网络cnn"><a class="markdownIt-Anchor" href="#四-卷积神经网络cnn"></a> 四、卷积神经网络（CNN）</h2><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8731_%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C.png" class=""><p>——<strong>特征提取器</strong>，能够对图像、音频等数据进行特征提取（卷积赋予的）</p><h3 id="1系统分类"><a class="markdownIt-Anchor" href="#1系统分类"></a> 1.系统分类：</h3><ul><li><strong>无记忆系统</strong>：系统输出只与当前输入有关 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>y</mi><mi>t</mi></msub><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>t</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y_t=f(x_t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">t</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><ul><li>e.g 信号放大器</li></ul></li><li><strong>记忆系统</strong>：输出与当前输入及历史输入都有关系</li></ul><h3 id="2卷积用来计算有记忆系统的输出问题"><a class="markdownIt-Anchor" href="#2卷积用来计算有记忆系统的输出问题"></a> 2.<strong>卷积</strong>：用来计算<strong>有记忆系统的输出问题</strong></h3><ul><li><p>系统输出要满足的两个条件：</p><ul><li>线性——输入和输出成比例</li><li>时不变——不同的时刻，相同的输入应得到相同的输出</li></ul></li><li><p>为什么要<strong>卷</strong>（<strong>对响应函数先进行翻转</strong>）：系统有处理时间延迟，所以信号衰减了，这个时刻的输出是前一段时刻输入的总信号的总和影响的</p></li><li><p><strong>离散卷积（一维）</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y(t)=f(t)*g(t)=\sum^{+\infty}_{i=-\infty}f(i)\cdot g(t-i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.269272em;vertical-align:-0.35804100000000005em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.911231em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.35804100000000005em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span></p><ul><li><p>此处的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∗</mo></mrow><annotation encoding="application/x-tex">*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord">∗</span></span></span></span>：表示卷积运算</p></li><li><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y(t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span>时刻的响应输出</p></li><li><p>例子：</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8732.png" class="" title="style&#x3D;transform: scale(0.8);"><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mtext>变为</mtext><mi>g</mi><mo stretchy="false">(</mo><mo>−</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(t)变为g(-t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">为</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>，计算t时刻的响应输出，再把<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mo>−</mo><mi>t</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(-t)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathnormal">t</span><span class="mclose">)</span></span></span></span>平移<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span>个单位</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8733.png" class="" title="style&#x3D;transform: scale(0.8);"><ul><li>卷积结果就等于0和1时刻两函数对应值分别相乘，乘积再相加的结果</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8734.png" class="" title="style&#x3D;transform: scale(0.8);"><p>假设在<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>T</mi><mo>=</mo><mn>6</mn></mrow><annotation encoding="application/x-tex">T=6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">6</span></span></span></span>时刻运算结束，就可以得到一个长度为7的输出序列</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8735.png" class="" title="style&#x3D;transform: scale(0.8);"></li></ul></li><li><p><strong>连续卷积（一维）</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><msubsup><mo>∫</mo><mrow><mo>−</mo><mi mathvariant="normal">∞</mi></mrow><mrow><mo>+</mo><mi mathvariant="normal">∞</mi></mrow></msubsup><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo><mi>d</mi><mi>i</mi></mrow><annotation encoding="application/x-tex">y(t)=\int ^{+\infty}_{-\infty}f(i)\cdot g(t-i)di</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.380382em;vertical-align:-0.41415100000000005em;"></span><span class="mop"><span class="mop op-symbol small-op" style="margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;">∫</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9662310000000001em;"><span style="top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">∞</span></span></span></span><span style="top:-3.2579000000000002em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">+</span><span class="mord mtight">∞</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.41415100000000005em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">i</span><span class="mclose">)</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span></span></span></span></p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathnormal">i</span></span></span></span>：积分变量</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>t</mi></mrow><annotation encoding="application/x-tex">t</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathnormal">t</span></span></span></span>：函数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mo stretchy="false">(</mo><mo>−</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">g(-i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathnormal">i</span><span class="mclose">)</span></span></span></span>平移的量</li></ul></li><li><p><strong>二维 离散卷积</strong>：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><mi>f</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>g</mi><mo stretchy="false">(</mo><mi>i</mi><mo separator="true">,</mo><mi>j</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mo>∑</mo><mi>m</mi></msub><msub><mo>∑</mo><mi>n</mi></msub><mi>f</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo>⋅</mo><mi>g</mi><mo stretchy="false">(</mo><mi>i</mi><mo>−</mo><mi>m</mi><mo separator="true">,</mo><mi>j</mi><mo>−</mo><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y(i,j)=f(i,j)*g(i,j)=\sum_m \sum_n f(m,n)\cdot g(i-m,j-n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0497100000000001em;vertical-align:-0.29971000000000003em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0016819999999999613em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">m</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.0016819999999999613em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span><span class="mopen">(</span><span class="mord mathnormal">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.85396em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span></span></span></span></p></li><li><p><strong>响应函数的处理</strong>：上下、左右翻转，之后先沿横坐标方向，再沿纵坐标方向平移</p></li></ul><h3 id="3卷积运算过程"><a class="markdownIt-Anchor" href="#3卷积运算过程"></a> 3.卷积运算过程</h3><h4 id="1单通道的二维数据"><a class="markdownIt-Anchor" href="#1单通道的二维数据"></a> （1）<strong>单通道的二维数据：</strong></h4><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8736_%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8D%B7%E7%A7%AF%E8%BF%87%E7%A8%8B.png" class=""><ul><li><strong>特征图</strong>：</li><li><strong>权重</strong>：卷积核</li><li><strong>步长</strong>：超参数，在设计卷积层时手动设定（——》影响卷积大小和尺寸——》影响特征提取的效果和运算量<ul><li>要压缩信息、减小输出尺寸时：设定较大的步长</li></ul></li><li><strong>填充（padding）</strong>：超参数——卷积操作会使得图像逐渐减小（特征图减小到1×1时就没办法再卷积）+<strong>图像边缘处的信息没有被充分利用</strong>（边缘的只参与一次卷积运算，影响一个输出结果）——》padding出现，来解决这些问题<ul><li><strong>padding的具体操作</strong>：沿着图像边缘做填充</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># padding值为1：表示填充一个像素</span><br><span class="hljs-comment"># ————》填充：上下左右（边）各填充一个像素</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">####</span><br><span class="hljs-string">#  #</span><br><span class="hljs-string">#  #</span><br><span class="hljs-string">####</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment"># padding职为2：表示填充两个像素</span><br><span class="hljs-comment"># ————》图像周围填充两个像素</span><br></code></pre></td></tr></table></figure><ul><li><strong>目的</strong>：填充（padding）后，得到的特征图大小不变</li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8737.png" class=""><p><strong><mark><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub><mo>=</mo><mi>f</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mo stretchy="false">(</mo><mfrac><mrow><msub><mi>w</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub><mo>+</mo><mn>2</mn><mo>∗</mo><mi>p</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi><mo>−</mo><mi>F</mi></mrow><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi></mrow></mfrac><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">w_{out}=floor(\frac{w_{in}+2*padding-F}{stride})+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.277216em;vertical-align:-0.345em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mopen">(</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9322159999999999em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">s</span><span class="mord mathnormal mtight">t</span><span class="mord mathnormal mtight" style="margin-right:0.02778em;">r</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">e</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.446108em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3280857142857143em;"><span style="top:-2.357em;margin-left:-0.02691em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mbin mtight">+</span><span class="mord mtight">2</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">p</span><span class="mord mathnormal mtight">a</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">d</span><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">g</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.13889em;">F</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></mark></strong>    ——》默认宽高相同，不同时则需要将宽和高分别带入式子计算得出输出尺寸</p><ul><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mrow><mi>o</mi><mi>u</mi><mi>t</mi></mrow></msub></mrow><annotation encoding="application/x-tex">w_{out}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.2805559999999999em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">o</span><span class="mord mathnormal mtight">u</span><span class="mord mathnormal mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：输出尺寸</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>w</mi><mrow><mi>i</mi><mi>n</mi></mrow></msub></mrow><annotation encoding="application/x-tex">w_{in}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>：输入尺寸</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mi>a</mi><mi>d</mi><mi>d</mi><mi>i</mi><mi>n</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">padding</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">p</span><span class="mord mathnormal">a</span><span class="mord mathnormal">d</span><span class="mord mathnormal">d</span><span class="mord mathnormal">i</span><span class="mord mathnormal">n</span><span class="mord mathnormal" style="margin-right:0.03588em;">g</span></span></span></span>：填充像素个数</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>F</mi></mrow><annotation encoding="application/x-tex">F</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span></span></span></span>：卷积核大小</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>s</mi><mi>t</mi><mi>r</mi><mi>i</mi><mi>d</mi><mi>e</mi></mrow><annotation encoding="application/x-tex">stride</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">s</span><span class="mord mathnormal">t</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="mord mathnormal">i</span><span class="mord mathnormal">d</span><span class="mord mathnormal">e</span></span></span></span>：步长</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi></mrow><annotation encoding="application/x-tex">floor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">o</span><span class="mord mathnormal">o</span><span class="mord mathnormal" style="margin-right:0.02778em;">r</span></span></span></span>：向下取整</li></ul><hr><h4 id="2多通道卷积"><a class="markdownIt-Anchor" href="#2多通道卷积"></a> （2）<strong>多通道卷积</strong>：</h4><p>卷积核的通道个数要和输入数据的通道个数一致，卷积结果为所有通道的卷积和，<strong>最终输出仍为一个二维的特征图</strong>；</p><p>e.g：RGB——<strong>三通道输入，但只有一个卷积核——所以输出只有一个通道</strong></p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8738_%E4%B8%89%E9%80%9A%E9%81%93%E5%8D%B7%E7%A7%AF%E7%9A%84%E4%B8%80%E4%B8%AA%E4%BE%8B%E5%AD%90.png" class=""><ul><li>各通道计算得到的值相加则为输出中对应的值</li></ul><p><em><strong>实际中，每一层都会有<mark>多个卷积核</mark>参与计算</strong></em></p><p>每个卷积核分别于输入卷积进行运算得到一个单通道的输出</p><p>——》多个单通道的输出拼在一起</p><p>——》多通道的输出</p><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8739_%E5%8D%B7%E7%A7%AF%E5%B1%82.png" class=""><ul><li>卷积层的参数：卷积核的大小、数量及步长</li></ul><p>——》卷积层的权重参数可以通过训练来优化——》使卷积层能更好地提取输入数据中的特征</p><h3 id="4卷积层"><a class="markdownIt-Anchor" href="#4卷积层"></a> 4.卷积层</h3><ul><li><strong>边缘特征提取</strong>：图像分类、目标检测的基本任务<ul><li>边缘：灰度值、颜色或纹理结构等突变的地方——表示一个区域的结束，也表示另一个区域的开始</li></ul></li></ul><img src="/2025/04/24/%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/%E5%9B%BE%E7%89%8740.png" class=""><p>一阶导变化较大，二阶导经过零点</p><ul><li><p>连续一阶微分：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><msub><mi>m</mi><mrow><mi>ϵ</mi><mo>→</mo><mn>0</mn></mrow></msub><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>ϵ</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo></mrow><mi>ϵ</mi></mfrac></mrow><annotation encoding="application/x-tex">lim_{\epsilon \rightarrow 0}\frac{f(x+\epsilon)-f(x)}{\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϵ</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϵ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">ϵ</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> 或 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>i</mi><msub><mi>m</mi><mrow><mi>ϵ</mi><mo>→</mo><mn>0</mn></mrow></msub><mfrac><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>+</mo><mi>ϵ</mi><mo stretchy="false">)</mo><mo>−</mo><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo>−</mo><mi>ϵ</mi><mo stretchy="false">)</mo></mrow><mrow><mn>2</mn><mi>ϵ</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">lim_{\epsilon \rightarrow 0}\frac{f(x+\epsilon)-f(x-\epsilon)}{2\epsilon}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord mathnormal" style="margin-right:0.01968em;">l</span><span class="mord mathnormal">i</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">ϵ</span><span class="mrel mtight">→</span><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">ϵ</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">+</span><span class="mord mathnormal mtight">ϵ</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.10764em;">f</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">x</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight">ϵ</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>离散一阶微分：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><msup><mrow></mrow><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></msup><mo stretchy="false">(</mo><mi>t</mi><mo stretchy="false">)</mo><mo>=</mo><mfrac><mrow><mi>y</mi><mo stretchy="false">(</mo><mi>t</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>y</mi><mo stretchy="false">(</mo><mi>t</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">y^{&#x27;}(t)=\frac{y(t+1)-y(t-1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.19248em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.94248em;"><span style="top:-2.94248em;margin-right:0.05em;"><span class="pstrut" style="height:2.57948em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8278285714285715em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">t</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">t</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span><span class="mbin mtight">−</span><span class="mord mathnormal mtight" style="margin-right:0.03588em;">y</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">t</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p></li><li><p>卷积核：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[- \frac{1}{2},0,\frac{1}{2}]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">]</span></span></span></span>，系数<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>可以舍弃，变为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[-1,0,1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span>，与输入层相乘便可得到边缘区域的边缘特征==（？）==</p></li><li><p>灰度图像：可看做一个<strong>二维离散函数</strong></p><ul><li>图像中任意一行：看做<strong>像素点随着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi><mtext>轴</mtext></mrow><annotation encoding="application/x-tex">x轴</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mord cjk_fallback">轴</span></span></span></span>变化的信号</strong></li><li>图像中任意一列：看做<strong>像素点随着<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mtext>轴</mtext></mrow><annotation encoding="application/x-tex">y轴</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">轴</span></span></span></span>变化的信号</strong></li></ul></li></ul><h4 id="卷积操作的两大特点"><a class="markdownIt-Anchor" href="#卷积操作的两大特点"></a> 卷积操作的两大特点：</h4><ul><li><p><strong>局部感受野</strong>：感受野——神经元在初始输入数据上所覆盖的区域——即在计算时所看到的输入计算的部分</p><ul><li><p>卷积层中，每一层只和上一层的部分区域有连接——局部——较小的感受野</p></li><li><p>网络层逐渐加深，<strong>卷积+池化</strong>操作——》使得神经元的感受野逐渐扩大——》下一层对上一层的信息进行整合——》最深层对所有信息进行整合——》得到全局的信息——》用于最终的决策任务（分类、检测、分割等）——》此时，<strong>神经元的感受野可以覆盖整个图像</strong></p><p>——层次化学习机制，使得卷积神经网络既可以<strong>感知局部信息</strong>，又有<strong>获取全局信息</strong>的能力</p><p>——从通道上说：每个输出神经元和所有通道保持全连接——so，<strong>卷积层是特殊的全连接层</strong></p></li></ul></li><li><p><strong>权重共享机制</strong></p><ul><li>都用的一个卷积核（权重共享——减少了参数量，降低过拟合风险，提高泛化能力）</li><li>卷积核的通道数和输入通道数相同，卷积核的个数和输出通道相同</li></ul></li></ul><h3 id="5池化层"><a class="markdownIt-Anchor" href="#5池化层"></a> 5.池化层</h3><ul><li>定义：把一个窗口中的所有特征信息浓缩为一个输出</li></ul><p>——》<strong>减小输出尺寸</strong></p><p>——》在模型结构中增加池化层，可以<strong>提高模型对输入图像中物体平移变化的鲁棒性</strong>——<strong>平移不变性</strong></p><ul><li><p>和卷积类似，都是通过<strong>滑动窗口来进行运算</strong>的，但<strong>不需要权重参数</strong>，池化操作的每个通道都是单独计算的</p></li><li><p>输入通道数=输出通道数</p><h4 id="常见池化操作"><a class="markdownIt-Anchor" href="#常见池化操作"></a> <strong>常见池化操作</strong>：</h4><ul><li><strong>平均池化（Mean Pooling）</strong>：在窗口内计算平均值作为输出</li><li><strong>最大池化（Max Pooling）</strong>：在窗口内找到最大值作为输出</li></ul></li><li><p>在卷积操作之后进行，<strong>本质是采样</strong>，输入的特征图经过池化层后输出的尺寸会减小（《=减少了网络的参数数量=》），防止过拟合</p></li></ul><h3 id="6其他多种卷积操作"><a class="markdownIt-Anchor" href="#6其他多种卷积操作"></a> 6.其他多种卷积操作</h3><h4 id="1反卷积转置卷积-逆卷积"><a class="markdownIt-Anchor" href="#1反卷积转置卷积-逆卷积"></a> （1）反卷积（转置卷积、逆卷积）</h4><ul><li><p><strong>上采样</strong>：使输入较小的图像变为输出更大的图像</p><ul><li><p>常用方法：单线性插值、双线性插值（人为设计的，不能很好地适配）</p></li><li><p>**反卷积（转置卷积、逆卷积）**应运而生：常用于生成式网络</p><ul><li><p>卷积的逆操作</p></li><li><table><thead><tr><th style="text-align:center">卷积</th><th style="text-align:center">反卷积</th></tr></thead><tbody><tr><td style="text-align:center">多对一的映射关系</td><td style="text-align:center">一对多的映射关系</td></tr><tr><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></li><li></li></ul></li></ul></li></ul><h4 id="2空洞卷积膨胀卷积"><a class="markdownIt-Anchor" href="#2空洞卷积膨胀卷积"></a> （2）空洞卷积（膨胀卷积）</h4><p>除了卷积核尺寸、步长和填充外，引入了一个新参数：<strong>膨胀率</strong></p><h4 id="3可分离卷积"><a class="markdownIt-Anchor" href="#3可分离卷积"></a> （3）可分离卷积</h4><ul><li><strong>空间可分离卷积</strong>：（宽高维度）在空间维度上对卷积核进行拆分——》一个卷积运算转化为多个顺序执行的卷积运算</li><li><strong>深度可分离卷积</strong>：（通道维度）在通道维度上对标准卷积进行拆分处理</li></ul><p><strong>以下代码来自Github</strong>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># 训练+测试</span><br><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> torch.utils.data <span class="hljs-keyword">as</span> data<br><span class="hljs-keyword">import</span> torchvision<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> cv2<br><br>torch.manual_seed(<span class="hljs-number">1</span>) <span class="hljs-comment"># 使用随机化种子使神经网络的初始化每次都相同</span><br><br><span class="hljs-comment"># 超参数</span><br>EPOCH = <span class="hljs-number">1</span> <span class="hljs-comment"># 训练整批数据的次数</span><br>BATCH_SIZE = <span class="hljs-number">50</span><br>LR = <span class="hljs-number">0.001</span> <span class="hljs-comment">#  学习率</span><br>DOWNLOAD_MNIST = <span class="hljs-literal">True</span> <span class="hljs-comment"># 表示还未下载数据集，若数据集下载好了就写False</span><br><br><span class="hljs-comment"># 下载Mnist手写数据集</span><br>train_data = torchvision.datasets.MNIST(<br>    root = <span class="hljs-string">&#x27;./data/data&#x27;</span>, <span class="hljs-comment"># 保存或提取的位置，放在当前文件夹中</span><br>    train = <span class="hljs-literal">True</span>, <span class="hljs-comment"># true表明用于训练的数据，false表示用于测试的数据</span><br>    transform = torchvision.transforms.ToTensor(), <span class="hljs-comment"># 转换PIL.Image or Numpy.ndarray</span><br><br>    download = DOWNLOAD_MNIST, <span class="hljs-comment"># 已经下载了就无需再下载</span><br>)<br><br>test_data = torchvision.datasets.MNIST(<br>root = <span class="hljs-string">&#x27;./data/data&#x27;</span>, <span class="hljs-comment"># 保存或提取的位置，放在当前文件夹中</span><br>    train = <span class="hljs-literal">True</span>, <span class="hljs-comment"># 测试集</span><br>)<br><br><span class="hljs-comment"># 批训练50个samples， 1 channel，28×28（50,1,28,28）</span><br><span class="hljs-comment"># torch中的Dataloader是用来包装数据的工具，能帮我们有效迭代数据，这样就可以进行批训练</span><br>train_loader = data.DataLoader(<br>    dataset = train_data,<br>    batch_size = BATCH_SIZE,<br>    shuffle = <span class="hljs-literal">True</span> <span class="hljs-comment"># 是否打乱数据（一般都打乱）</span><br>)<br><br><span class="hljs-comment"># 进行测试</span><br><span class="hljs-comment"># 为节省时间，测试时只测试前2000个</span><br><br>test_x = torch.unsqueeze(test_data.train_data,dim=<span class="hljs-number">1</span>).<span class="hljs-built_in">type</span>(torch.FloatTensor)[:<span class="hljs-number">2000</span>]/<span class="hljs-number">255</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># torch.unsqueeze(a):对数据维度进行扩充，这样shape就从(2000,28,28)-&gt;(2000,1,28,28)</span><br><span class="hljs-string"># 图像的pixel本来是0到255之间，除以255对图像进行归一化使取值范围在（0,1）</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>test_y = test_data.test_labels[:<span class="hljs-number">2000</span>]<br><br><span class="hljs-comment"># 用class类来建立CNN模型</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string"># CNN流程：卷积(Conv2d)-&gt;激励函数(ReLU)-&gt;池化(Maxpooling)</span><br><span class="hljs-string">#        -&gt;卷积(Conv2d)-&gt;激励函数(ReLU)-&gt;池化(Maxpooling)</span><br><span class="hljs-string">#        -&gt;展平多维的卷积成的特征图-&gt;接入全连接层(Linear)-&gt;输出</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CNN</span>(nn.Module): <span class="hljs-comment"># 我们建立的CNN集成nn.Module这个模块</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(CNN,<span class="hljs-variable language_">self</span>).__init__()<br>        <span class="hljs-comment"># 建立第一个卷积(Conv2d)-&gt;激励函数(ReLU)-&gt;池化(Maxpooling)</span><br>        <span class="hljs-variable language_">self</span>.conv1 = nn.Sequential(<br>            <span class="hljs-comment"># 第一个卷积con2d</span><br>            nn.Conv2d( <span class="hljs-comment"># 输入图像大小(1,28,28)</span><br>                in_channels = <span class="hljs-number">1</span>, <span class="hljs-comment"># 输入图片的高度，因为minist数据集为灰度图像（只有一个通道）</span><br>                out_channels = <span class="hljs-number">16</span>, <span class="hljs-comment"># n_filters 卷积核的高度</span><br>                kernel_size = <span class="hljs-number">5</span>, <span class="hljs-comment"># filter size 卷积核的大小 也就是长×宽=5×5</span><br>                stride = <span class="hljs-number">1</span>, <span class="hljs-comment"># 步长</span><br>                padding = <span class="hljs-number">2</span>, <span class="hljs-comment"># 填充 使得con2d输出的图像长宽不变 padding = (kernel_size-1)/2</span><br>            ), <span class="hljs-comment"># 输出图像大小(16,28,28)</span><br>            <span class="hljs-comment"># 激活函数</span><br>            nn.ReLU(),<br>            <span class="hljs-comment"># 池化，下采样</span><br>            nn.MaxPool2d(kernel_size = <span class="hljs-number">2</span>), <span class="hljs-comment"># 在2×2空间下采样</span><br>            <span class="hljs-comment"># 输出图像大小(16,14,14)</span><br><br>        )<br><br>        <span class="hljs-comment"># 建立第二个卷积(Conv2d)-&gt;激励函数(ReLU)-&gt;池化(MaxPooling)</span><br>        <span class="hljs-variable language_">self</span>.conv2 = nn.Sequential(<br>            nn.Conv2d( <span class="hljs-comment"># 也可以直接简化，写成nn.Conv2d(16,32,5,1,2)</span><br>            in_channels = <span class="hljs-number">16</span>,<br>            out_channels =<span class="hljs-number">32</span>,<br>            kernel_size = <span class="hljs-number">5</span>,<br>            stride =<span class="hljs-number">1</span>,<br>            padding = <span class="hljs-number">2</span><br>        ),<br>        <span class="hljs-comment"># 输出图像大小(32,14,14)</span><br>            nn.ReLU(),<br>            nn.MaxPool2d(<span class="hljs-number">2</span>)<br>            <span class="hljs-comment"># 输出图像大小(32,7,7)</span><br>        )<br>        <span class="hljs-comment"># 建立全卷积连接层</span><br>        <span class="hljs-variable language_">self</span>.out = nn.Linear(<span class="hljs-number">32</span>*<span class="hljs-number">7</span>*<span class="hljs-number">7</span>,<span class="hljs-number">10</span>) <span class="hljs-comment"># 输出是10个类</span><br><br>        <span class="hljs-comment"># 下面开始定义x的传播路线</span><br>        <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self,x</span>):<br>            x = <span class="hljs-variable language_">self</span>.conv1(x) <span class="hljs-comment"># x先通过conv1</span><br>            x = <span class="hljs-variable language_">self</span>.conv2(x) <span class="hljs-comment"># 再通过conv2</span><br>            <br>            <span class="hljs-comment"># 把每个批次的每一个输入都拉成一个维度，即(batch_size,32*7*7)</span><br>            <span class="hljs-comment"># 因为pytorch里特征的形式是[bs,channel,h,w]，所以x.size(0)就是batchsize</span><br>            <br>            <br>            x = x.view(x.size(<span class="hljs-number">0</span>),-<span class="hljs-number">1</span>) <span class="hljs-comment"># view就是把x弄成batchsize行个tensor</span><br>            output = <span class="hljs-variable language_">self</span>.out(x)<br>            <span class="hljs-keyword">return</span> output<br><br>cnn = CNN()<br><span class="hljs-built_in">print</span>(cnn)<br><br><span class="hljs-comment"># 训练</span><br><span class="hljs-comment"># 把x和y都放入variable中，然后放入cnn中计算output，最后再计算误差</span><br><br><span class="hljs-comment"># 优化器选择Adam</span><br>optimizer = torch.optim.Adam(cnn.parameters(),lr = LR)<br><span class="hljs-comment"># 损失函数</span><br>loss_func = nn.CrossEntropyLoss() <span class="hljs-comment"># 目标标签就是one-hotted</span><br><br><span class="hljs-comment"># 开始训练</span><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(EPOCH):<br>    <span class="hljs-keyword">for</span> step,(b_x,b_y) <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader): <span class="hljs-comment"># 分配batch data</span><br>        output = cnn(b_x) <span class="hljs-comment"># 现将数据放到cnn中计算output</span><br>        loss = loss_func(output,b_y) <span class="hljs-comment"># 输出和真实标签的loss，二者位置不可颠倒</span><br>        optimizer.zero_grad() <span class="hljs-comment"># 清除之前学到的梯度的参数</span><br>        loss.backward() <span class="hljs-comment"># 反向传播，计算梯度</span><br>        optimizer.step() <span class="hljs-comment"># 应用梯度</span><br><br>        <span class="hljs-keyword">if</span> step % <span class="hljs-number">50</span> == <span class="hljs-number">0</span>:<br>            test_output = cnn(test_x)<br>            pred_y = torch.<span class="hljs-built_in">max</span>(test_output,<span class="hljs-number">1</span>)[<span class="hljs-number">1</span>].data.numpy()<br>            accuracy = <span class="hljs-built_in">float</span>((pred_y == test_y.data.numpy()).astype(<span class="hljs-built_in">int</span>).<span class="hljs-built_in">sum</span>())/<span class="hljs-built_in">float</span>(test_y.size(<span class="hljs-number">0</span>))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Epoch:&#x27;</span>,epoch,<span class="hljs-string">&#x27;| train loss: %.4f&#x27;</span> % loss.data.numpy(),<span class="hljs-string">&#x27;|test.accuracy:%.2f&#x27;</span> % accuracy)<br>torch.save(cnn.state_dict(),<span class="hljs-string">&#x27;cnn.pkl&#x27;</span>) <span class="hljs-comment"># 保存模型</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>Markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JavaScript学习</title>
    <link href="/2025/04/24/JavaScript%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/24/JavaScript%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="javascript学习"><a class="markdownIt-Anchor" href="#javascript学习"></a> JavaScript学习</h1><h2 id="一-introduction"><a class="markdownIt-Anchor" href="#一-introduction"></a> 一、Introduction</h2><ol><li><strong><code>javascript</code></strong>:跨平台、面向对象的脚本语言</li></ol><ul><li><code>java</code>：JavaScript遵循大部分Java的表达语法、命名规范以及基础控制流结构，所以改名JavaScript，但也有很多区别：<ul><li>不必声明所有的变量、类和方法。</li><li>不必关心方法是否是公有、私有或者受保护的，也不需要实现接口。</li><li>无需显式指定变量、参数、方法返回值的类型。</li></ul></li><li><code>script</code>：脚本</li></ul><ol start="2"><li><strong>包含</strong>：一个对象标准库（例如，<code>Array</code>、<code>Date</code> 和 <code>Math</code>）和一套核心语言元素（例如，运算符、控制结构和语句）</li></ol><table><thead><tr><th style="text-align:left">JavaScript</th><th style="text-align:left">Java</th></tr></thead><tbody><tr><td style="text-align:left">面向对象。不区分对象类型。继承通过原型机制实现，可以向对象动态地添加属性和方法。</td><td style="text-align:left">基于类。对象分为类和实例，所有的继承通过类层级实现。不能向类和实例动态地添加属性或方法。</td></tr><tr><td style="text-align:left">不需要声明变量数据类型（动态类型，松散类型）。</td><td style="text-align:left">必须声明变量数据类型（静态类型，强类型）。</td></tr><tr><td style="text-align:left">不能自动写入硬盘。</td><td style="text-align:left">可以自动写入硬盘。</td></tr></tbody></table><ol start="3"><li><p><strong>操作平台</strong>：<code>JavaScript控制台</code>（<code>web控制台/控制台</code>）</p><ul><li><strong>作用</strong>：在当前界面输入并运行JavaScript</li><li><strong>使用方法</strong>：控制台的工作方式正好就像 <code>eval</code>：返回输入的上一个表达式。出于简化的目的，可以这样想象，每次向控制台输入时，输入实际上由 <code>console.log</code> 包围在 <code>eval</code> 周围，就像这样：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;3+5&quot;</span>));<br></code></pre></td></tr></table></figure><p><strong>多行输入模式</strong>：默认情况下，在输入一行代码后，如果你按下 Enter（或者 Return，取决于你的键盘），然后会执行你输入的字符串。进入多行输入模式：</p><ul><li>如果你输入的字符串不完整（例如，你输入的是 <code>function foo() &#123;</code>），然后控制台会将 Enter 当作换行，这样你就能输入另一行。</li><li>如果你在按下 Enter 的同时按下 Shift，然后控制台会将其当作换行，这样你就能输入另一行。</li></ul></li></ol><ul><li><strong>初学时的使用框架</strong>：严格模式&amp;立即调用函数表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript">(<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-string">&quot;use strict&quot;</span>;<br>    <span class="hljs-comment">/*代码开始*/</span><br>  <br>    <span class="hljs-comment">/*代码结束*/</span><br>&#125;<br>)();<br></code></pre></td></tr></table></figure><h2 id="二-语法与类型"><a class="markdownIt-Anchor" href="#二-语法与类型"></a> 二、语法与类型</h2><ol><li><p><strong>基础</strong>：</p><ul><li>大小写敏感</li><li>使用<strong>Unicode字符集</strong></li><li>指令称为语句，<strong>用分号(;)分隔</strong>【多条语句在一行，必须加分号；一条语句独占一行的话，可以省略分号】</li></ul></li><li><p><strong>注释</strong>：</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">// 单行注释</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">多行注释，和C++一样的 但不能直接嵌套哈</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">/* 你可以通过转义正斜杠 /* 嵌套注释 *\/ */</span><br></code></pre></td></tr></table></figure><p>也有别的注释，例如：<strong>hashbang注释</strong>语法（一种用于指定执行脚本的特定 Javascript 引擎路径的特殊注释）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-meta">#!/usr/bin/env node</span><br></code></pre></td></tr></table></figure><ol start="3"><li><strong>声明</strong>：</li></ol><ul><li><code>var</code>：声明一个变量，可选择将其初始化一个值——可以用来声明<strong>局部</strong>变量和<strong>全局</strong>变量，具体取决于<em>执行上下文</em></li><li><code>let</code>：声明一个块级作用域的局部变量，可选择将其初始化为一个值</li><li><code>const</code>：声明一个块级作用域的只读命名常量</li></ul><ol start="4"><li><strong>变量</strong>：又叫<code>标识符</code>，用作值的符号名</li></ol><ul><li><strong>命名规则</strong>：<strong>字母、下划线以及美元符号</strong>开头  后续可以是字母数字下划线<ul><li>可以在标识符中使用大部分 Unicode 字母，例如 <code>å</code> 和 <code>ü</code></li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习</title>
    <link href="/2025/04/24/HTML%E5%AD%A6%E4%B9%A0/"/>
    <url>/2025/04/24/HTML%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="html学习"><a class="markdownIt-Anchor" href="#html学习"></a> HTML学习</h1><h2 id="一-语法规范"><a class="markdownIt-Anchor" href="#一-语法规范"></a> 一、语法规范</h2><h3 id="1-基本语法"><a class="markdownIt-Anchor" href="#1-基本语法"></a> 1. 基本语法</h3><ol><li>HTML标签：尖括号包围的关键词</li><li>HTML标签通常<strong>成对出现</strong>，<strong>双标签</strong> e.g.<code>&lt;head&gt; &lt;/head&gt;</code></li><li>但还有的就单个出现，e.g.<code>&lt;br/&gt;</code></li></ol><h3 id="2-标签关系"><a class="markdownIt-Anchor" href="#2-标签关系"></a> 2. 标签关系</h3><p>双标签关系分为：包含关系、并列关系</p><ol><li><p><strong>包含关系</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>并列关系</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="二-基本骨架"><a class="markdownIt-Anchor" href="#二-基本骨架"></a> 二、基本骨架</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-comment">&lt;!--文档类型的声明标签，必须放在第一行--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span> = <span class="hljs-string">&#x27;en&#x27;</span>&gt;</span><br><span class="hljs-comment">&lt;!--定义网页显示的语言--en:英文网页；CN：中文，但其实里面的字无所谓，但是会触发是否翻译提示--&gt;</span>   <br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span> <span class="hljs-comment">&lt;!--在head里面用Meta标签来定义使用的字符集charset--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>第一个页面<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        学习前端第一天--HTML<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="三-常用标签"><a class="markdownIt-Anchor" href="#三-常用标签"></a> 三、常用标签</h2><ol><li><p><strong>标题</strong>：<code>&lt;h1&gt;&lt;/h1&gt;</code>~<code>&lt;h6&gt;&lt;/h6&gt;</code>，重要程度、等等逐渐减弱</p></li><li><p><strong>段落</strong>：<code>&lt;p&gt;&lt;/p&gt;</code>，生成的段落之间空隙大</p><ul><li><code>&lt;br /&gt;</code>：<strong>强制换行</strong>，但间隙小，只是简单地另起一行</li></ul></li><li><p><strong>文本格式化标签</strong>：突出重要性，比普通文字重要</p><ul><li><strong>加粗</strong>：<strong><code>&lt;strong&gt;&lt;/strong&gt;</code></strong>（语意更加强烈）,<code>&lt;b&gt;&lt;/b&gt;</code></li><li><strong>倾斜</strong>：<strong><code>&lt;em&gt;&lt;/em&gt;</code></strong>（语意更加强烈）<code>&lt;i&gt;&lt;/i&gt;</code></li><li><strong>删除线</strong>：<strong><code>&lt;del&gt;&lt;/del&gt;</code></strong>（语意更加强烈）,<code>&lt;s&gt;&lt;/s&gt;</code></li><li><strong>下划线</strong>：<strong><code>&lt;ins&gt;&lt;/ins&gt;</code></strong>（同上）,<code>&lt;u&gt;&lt;/u&gt;</code></li><li><strong>highlight</strong>：<strong><code>&lt;mark&gt;&lt;/mark&gt;</code></strong></li><li><strong>下标</strong>：<strong><code>&lt;sub&gt;&lt;/sub&gt;</code></strong></li></ul></li><li><p><strong>盛放内容的盒子，无语意</strong>：</p><ul><li><strong><code>&lt;div&gt;&lt;/div&gt;</code></strong>：独占一行</li><li><strong><code>&lt;span&gt;&lt;/span&gt;</code></strong>：在同一行，span互相之间有间隙</li></ul></li><li><p><strong>图像标签</strong>：<strong><code>&lt;img src=&quot;图像URL&quot; alt=&quot;替换文本&quot; title=&quot;提示文本&quot; width=&quot;设定宽度&quot; height=&quot;设定高度&quot; broder=&quot;边框粗细&quot;&gt;</code></strong></p><ul><li><strong>src</strong>：必须属性，表明路径<ul><li><strong>相对路径</strong>：1. 同一级：直接文件名.jpg；2.下一级：那就所在的文件夹/文件名.jpg；3.<strong>上一级</strong>：**<code>../</code>**文件名.jpg；…</li><li><strong>绝对路径</strong>：1.直接复制来的文件地址D:/…/…/…jpg；（不常用，甚至是不用）2.网络中的路径</li></ul></li><li><strong>alt</strong>：图片显示不出来时用该文字替换</li><li><strong>title</strong>：鼠标放到图片上时显示的提示文本</li><li><strong>width/height</strong>：一般两个只修改一个，；另一个会自适应地改变；同时修改可能会压缩图片使变形</li><li><strong>broder</strong>：设置边框粗细</li></ul></li><li><p><mark><strong>超链接标签</strong></mark>：<strong><code>&lt;a href=&quot;跳转目标&quot; target=&quot;目标窗口的弹出方式&quot;&gt;文本或图像&lt;/a&gt;</code></strong></p><ul><li><strong><mark>href</mark></strong>：<ul><li><strong>外部链接</strong>：以<code>http://</code>开头</li><li><strong>内部链接</strong>：在同一级目录下</li><li><strong>空链接</strong>：# <code>&lt;a href=&quot;#&quot;&gt;</code></li><li><strong>下载链接</strong>：href中地址是文件或压缩包，点击后会下载该文件</li><li><strong>锚点链接</strong>：在herf中设置属性值为**<code>#名字</code><strong>形式；找到目标位置标签，在其中添加一个</strong><code>id属性</code>**=刚才的名字</li></ul></li><li><strong>target</strong>：<code>target=&quot;_self&quot;</code>：当前界面打开；<code>target=&quot;_blank&quot;</code>：在新建标签页中打开</li></ul></li><li><p><strong>表格标签</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>表头单元格中的文字<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>单元格内的文字<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><p><code>&lt;tr&gt;&lt;/tr&gt;</code>：表格中的行，嵌套在<code>&lt;table&gt;&lt;/table&gt;</code>中</p></li><li><p><code>&lt;td&gt;&lt;/td&gt;</code>：单元格，嵌套在<code>&lt;tr&gt;&lt;/tr&gt;</code>中</p></li><li><p>作用：显示、展示数据</p></li><li><p><strong>表格标签结构</strong>：分<strong>表头<code>&lt;thead&gt;&lt;/thead&gt;</code><strong>和</strong>表体<code>&lt;tbody&gt;&lt;/tbody&gt;</code></strong></p></li><li><p><strong>表格属性</strong>：后面用<strong>CSS</strong>来</p></li></ul></li></ol><table><thead><tr><th style="text-align:center"><strong>属性名</strong></th><th style="text-align:center"><strong>属性值</strong></th><th style="text-align:center"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:center">align</td><td style="text-align:center">left、center、right</td><td style="text-align:center">规定表格相对周围元素的对齐方式</td></tr><tr><td style="text-align:center">border</td><td style="text-align:center">1或&quot;&quot;</td><td style="text-align:center">规定表格单元是否拥有边框，默认为&quot;&quot;（无边框）</td></tr><tr><td style="text-align:center">cellpadding</td><td style="text-align:center">像素值</td><td style="text-align:center">规定单元边沿与其内容之间的空白，默认1像素</td></tr><tr><td style="text-align:center">callspacing</td><td style="text-align:center">像素值</td><td style="text-align:center">规定单元格之间的空白，默认2像素（所以不设置的话，就会有空隙）</td></tr><tr><td style="text-align:center">width</td><td style="text-align:center">像素值或百分比</td><td style="text-align:center">规定表格宽度</td></tr></tbody></table><ul><li><strong>合并单元格</strong>：<ul><li><img src="C:%5CUsers%5CLenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20250320211056711.png" alt="image-20250320211056711"></li><li>步骤：1. 确定跨行还是跨列；2.找到目标单元格 写上<code>合并方式=合并的单元格数量</code>；e.g：<code>&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;</code>；3.删除多余的单元格</li></ul></li></ul><ol start="8"><li><p><strong>列表标签</strong>：</p><ul><li><p><strong>无序列表</strong>：<code>&lt;ul&gt;&lt;/ul&gt;</code>后面只能跟<code>&lt;li&gt;&lt;/li&gt;</code>标签，其余全不能放（标签、文字…）</p><ul><li>使用较多</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>haha<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>有序列表</strong>：<code>&lt;ol&gt;&lt;/ol&gt;</code>后面依然跟<code>&lt;li&gt;&lt;/li&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">ol</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>heihei<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ol</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><mark><strong>自定义列表</strong></mark>：<code>&lt;dl&gt;&lt;/dl&gt;</code>;<code>&lt;dt&gt;&lt;/dt&gt;</code>;<code>&lt;dd&gt;&lt;/dd&gt;</code>;</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">dl</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dt</span>&gt;</span>名词1<span class="hljs-tag">&lt;/<span class="hljs-name">dt</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释1<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dd</span>&gt;</span>名词1解释2<span class="hljs-tag">&lt;/<span class="hljs-name">dd</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dl</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>表单列表</strong>：（账号注册收集详细信息那一页用到的）</p><ul><li><p><strong>表单域</strong>：<code>&lt;form&gt;&lt;/form&gt;</code>——将该范围内的表单元素提交给服务器</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;url地址&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;提交方式&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;表单域名称&quot;</span>&gt;</span><br>    各种表单元素控件<br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">属性值</th><th style="text-align:center">作用</th></tr></thead><tbody><tr><td style="text-align:center">action</td><td style="text-align:center">url地址</td><td style="text-align:center">指定接收并处理表单数据的服务器的url地址</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">get/post</td><td style="text-align:center">设置表单数据的提交方式，其取值为get或post</td></tr><tr><td style="text-align:center">name</td><td style="text-align:center">名称</td><td style="text-align:center">指定表单的名称，以区分同一个页面中的多个表单域</td></tr></tbody></table></li><li><p><strong>表单控件（表单元素）</strong>：</p><ul><li><p><strong>input表单元素</strong>：<code>&lt;input type=&quot;（有给定）属性值&quot; name=&quot;（自定义）属性值&quot; value=&quot;（自定义）属性值&quot; checked=&quot;checked&quot;（这样的话就默认勾选了） maxlength=&quot;正整数&quot;（最多输入的字符数）&gt;</code></p><ul><li><strong>type中的常用属性</strong>：</li></ul><table><thead><tr><th style="text-align:center">属性值</th><th style="text-align:left">描述（用于定义…</th></tr></thead><tbody><tr><td style="text-align:center">button</td><td style="text-align:left">可点击按钮（多数情况下，用于通过JavaScript启动脚本）</td></tr><tr><td style="text-align:center">checkbox</td><td style="text-align:left">复选框</td></tr><tr><td style="text-align:center">file</td><td style="text-align:left">输入字段和“浏览”按钮，供文件上传</td></tr><tr><td style="text-align:center">hidden</td><td style="text-align:left">隐藏字段</td></tr><tr><td style="text-align:center">image</td><td style="text-align:left">图像的提交按钮</td></tr><tr><td style="text-align:center">password</td><td style="text-align:left">密码字段。（该字段中的字符被掩码）</td></tr><tr><td style="text-align:center">radio</td><td style="text-align:left">单选按钮</td></tr><tr><td style="text-align:center">reset</td><td style="text-align:left">重置按钮；会清除表单中的所有数据</td></tr><tr><td style="text-align:center">submit</td><td style="text-align:left">提交按钮；把表单数据发送到服务器</td></tr><tr><td style="text-align:center">text</td><td style="text-align:left">单行的输入字段，用户可在其中输入文本。默认宽度：20个字符</td></tr></tbody></table><ul><li><strong>要实现单选功能</strong>：type要设置成radio外，<strong>name也要设置成一样的！！！</strong></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML">性别：男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span> 女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span> 不想告知<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong>name</strong>：用于区分不同的表单元素（实现单选，必须是一个name）</li><li><strong>value</strong>：表单刚打开时就想默认显示的文字，那就设置到value中去</li><li><strong>checked</strong>：<strong>单选按钮和复选框</strong>可以设置checked属性，当页面打开时可以默认选中这个按钮</li></ul></li><li><p><strong><code>&lt;label&gt;</code>标签</strong>：input元素定义标注（标签）——用于绑定一个表单元素，当点击<code>&lt;label&gt;</code>中的文本时，浏览器会自动将焦点（或光标）转到对应的表单元素上。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs HTML">性别：<br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;handsome&quot;</span>&gt;</span>男<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;handsome&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span>女<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;sex&quot;</span>&gt;</span> <br><span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;some&quot;</span>&gt;</span>不想告知<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;some&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--实现了单选且扩大点击域--&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>select下拉表单元素</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项1<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>选项2<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><strong>textarea文本域表单元素</strong>：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;3&quot;</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span>&gt;</span><span class="hljs-comment">&lt;!--cols:一行显示的字符数；rows:写几行 但其实不用，实际应用中用CSS--&gt;</span><br>文本内容<br><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li></ol><ul><li><p><strong>引用</strong></p><ul><li><p><code>&lt;q&gt;&lt;/q&gt;</code>：加引号</p></li><li><p><code>&lt;blockquote&gt;&lt;/blockquote&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">blockquote</span> <span class="hljs-attr">cite</span>=<span class="hljs-string">&quot;....&quot;</span>&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">blockquote</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>缩写</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">abbr</span> <span class="hljs-attr">title</span>=<span class="hljs-string">&quot;world health origanization&quot;</span>&gt;</span>WHO<span class="hljs-tag">&lt;/<span class="hljs-name">abbr</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="html-rgb-color"><a class="markdownIt-Anchor" href="#html-rgb-color"></a> <strong>html rgb color</strong></h3></li></ul><ol><li>RGB 颜色基础概念</li></ol><p>RGB 代表红(Red)、绿(Green)、蓝(Blue)，是一种加色模型，通过不同比例的三原色混合来创建各种颜色。</p><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h3><ul><li>每种颜色分量取值范围：0-255</li><li>共可表示 16,777,216 种颜色 (256×256×256)</li><li>广泛应用于电子显示设备</li></ul><ol start="2"><li>HTML/CSS 中的 RGB 表示方法</li></ol><p>2.1 函数表示法 <code>rgb()</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">/* 纯红色 */</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>);  <span class="hljs-comment">/* 纯绿色 */</span><br><span class="hljs-attribute">border-color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>);  <span class="hljs-comment">/* 纯蓝色 */</span><br></code></pre></td></tr></table></figure><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">rgb(red, green, blue)<br></code></pre></td></tr></table></figure><ul><li>参数范围：0-255 的整数</li></ul><p>2.2 十六进制表示法 <code>#RRGGBB</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">color</span>: <span class="hljs-number">#FF0000</span>;  <span class="hljs-comment">/* 纯红色 */</span><br><span class="hljs-attribute">background-color</span>: <span class="hljs-number">#00FF00</span>;  <span class="hljs-comment">/* 纯绿色 */</span><br><span class="hljs-attribute">border-color</span>: <span class="hljs-number">#0000FF</span>;  <span class="hljs-comment">/* 纯蓝色 */</span><br></code></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li>每两位表示一个颜色分量 (RR, GG, BB)</li><li>不区分大小写 (#ff0000 与 #FF0000 等效)</li><li>简写形式：当每对数字相同时可简写为3位 (#F00 等同于 #FF0000)</li></ul><p>2.3 RGBA 表示法 (带透明度)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0.5</span>);  <span class="hljs-comment">/* 半透明红色 */</span><br></code></pre></td></tr></table></figure><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">rgba(red, green, blue, alpha)<br></code></pre></td></tr></table></figure><ul><li>alpha 参数范围：0.0 (完全透明) - 1.0 (完全不透明)</li></ul><ol start="3"><li>RGB 颜色值计算原理</li></ol><p>3.1 颜色混合示例</p><table><thead><tr><th>颜色组合</th><th>计算结果</th><th>示例代码</th></tr></thead><tbody><tr><td>红 + 绿</td><td>黄色</td><td><code>rgb(255, 255, 0)</code></td></tr><tr><td>红 + 蓝</td><td>品红</td><td><code>rgb(255, 0, 255)</code></td></tr><tr><td>绿 + 蓝</td><td>青色</td><td><code>rgb(0, 255, 255)</code></td></tr><tr><td>全混合</td><td>白色</td><td><code>rgb(255, 255, 255)</code></td></tr><tr><td>无颜色</td><td>黑色</td><td><code>rgb(0, 0, 0)</code></td></tr></tbody></table><p>3.2 灰度色表示</p><p>灰度色是红绿蓝三通道值相等的颜色：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">rgb(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>)  <span class="hljs-comment">/* 中等灰色 */</span><br>rgb(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>, <span class="hljs-number">50</span>)     <span class="hljs-comment">/* 深灰色 */</span><br>rgb(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>, <span class="hljs-number">200</span>)  <span class="hljs-comment">/* 浅灰色 */</span><br></code></pre></td></tr></table></figure><ol start="4"><li>实际应用技巧</li></ol><p>4.1 颜色选择工具</p><ul><li>使用开发者工具中的取色器</li><li>在线工具如 Adobe Color, Coolors</li><li>设计软件中的颜色选择面板</li></ul><p>4.2 常用颜色速查表</p><table><thead><tr><th>颜色名称</th><th>RGB 值</th><th>十六进制</th></tr></thead><tbody><tr><td>纯白</td><td>rgb(255,255,255)</td><td>#FFFFFF</td></tr><tr><td>纯黑</td><td>rgb(0,0,0)</td><td>#000000</td></tr><tr><td>红色</td><td>rgb(255,0,0)</td><td>#FF0000</td></tr><tr><td>绿色</td><td>rgb(0,255,0)</td><td>#00FF00</td></tr><tr><td>蓝色</td><td>rgb(0,0,255)</td><td>#0000FF</td></tr><tr><td>黄色</td><td>rgb(255,255,0)</td><td>#FFFF00</td></tr><tr><td>青色</td><td>rgb(0,255,255)</td><td>#00FFFF</td></tr><tr><td>品红</td><td>rgb(255,0,255)</td><td>#FF00FF</td></tr></tbody></table><p>4.3 颜色转换公式</p><p><strong>RGB 转十六进制：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">rgbToHex</span>(<span class="hljs-params">r, g, b</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;#&quot;</span> + ((<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">24</span>) + (r &lt;&lt; <span class="hljs-number">16</span>) + (g &lt;&lt; <span class="hljs-number">8</span>) + b).<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>十六进制转 RGB：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">hexToRgb</span>(<span class="hljs-params">hex</span>) &#123;<br>  <span class="hljs-keyword">let</span> r = <span class="hljs-built_in">parseInt</span>(hex.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>), <span class="hljs-number">16</span>),<br>      g = <span class="hljs-built_in">parseInt</span>(hex.<span class="hljs-title function_">slice</span>(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>), <span class="hljs-number">16</span>),<br>      b = <span class="hljs-built_in">parseInt</span>(hex.<span class="hljs-title function_">slice</span>(<span class="hljs-number">5</span>, <span class="hljs-number">7</span>), <span class="hljs-number">16</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;r&#125;</span>, <span class="hljs-subst">$&#123;g&#125;</span>, <span class="hljs-subst">$&#123;b&#125;</span>)`</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>浏览器支持与最佳实践</li></ol><ul><li>所有现代浏览器都完全支持 RGB 颜色表示法</li><li>为保持兼容性，建议同时提供十六进制备用值</li><li>在 CSS 变量中使用 RGB 更方便调整透明度：</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-pseudo">:root</span> &#123;<br>  <span class="hljs-attr">--primary-color</span>: <span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-selector-class">.element</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-built_in">var</span>(--primary-color));<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-built_in">var</span>(--primary-color), <span class="hljs-number">0.3</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="hsl-color"><a class="markdownIt-Anchor" href="#hsl-color"></a> <strong>HSL color</strong></h3><p><strong>HSL颜色</strong>，这正是现代网页开发中推荐的一种颜色写法！</p><p>它是相对于传统的十六进制（<code>#RRGGBB</code>）或者 <code>rgb()</code> 更<strong>直观、可调性强</strong>的一种方式，特别适合在做主题配色或渐变效果时使用。</p><p><strong>HSL颜色简介</strong></p><p>HSL 代表：</p><ul><li><strong>H</strong>（Hue 色相）<ul><li>取值范围：<code>0~360</code>，表示色环上的角度，例如：<ul><li><code>0</code> 是红色</li><li><code>120</code> 是绿色</li><li><code>240</code> 是蓝色</li></ul></li></ul></li><li><strong>S</strong>（Saturation 饱和度）<ul><li>取值：百分比 <code>%</code>，越高越鲜艳，越低越灰。</li></ul></li><li><strong>L</strong>（Lightness 明度）<ul><li>取值：百分比 <code>%</code>，<code>0%</code> 是黑，<code>100%</code> 是白，<code>50%</code> 是最纯的颜色。</li></ul></li></ul><ul><li>✅ 语法格式：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.example</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">0</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">50%</span>); <span class="hljs-comment">/* 红色 */</span></span><br><span class="language-css">    <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">120</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">75%</span>); <span class="hljs-comment">/* 淡绿色背景 */</span></span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>✅ 示例说明：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">background-color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">210</span>, <span class="hljs-number">100%</span>, <span class="hljs-number">95%</span>); <span class="hljs-comment">/* 淡蓝色背景 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">h1</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">210</span>, <span class="hljs-number">80%</span>, <span class="hljs-number">30%</span>); <span class="hljs-comment">/* 深蓝色标题 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">p</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-built_in">hsl</span>(<span class="hljs-number">0</span>, <span class="hljs-number">60%</span>, <span class="hljs-number">40%</span>); <span class="hljs-comment">/* 暗红色段落文字 */</span></span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello HSL<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph using HSL color.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li>✅ HSL vs 旧写法对比</li></ul><table><thead><tr><th>类型</th><th>示例</th><th>是否推荐</th><th>说明</th></tr></thead><tbody><tr><td>旧写法</td><td><code>&lt;font color=&quot;red&quot;&gt;</code></td><td>❌ 不推荐</td><td>HTML中设置颜色已被淘汰</td></tr><tr><td>十六进制</td><td><code>color: #ff0000;</code></td><td>✅ 可用</td><td>常用，但不够直观</td></tr><tr><td><code>rgb()</code></td><td><code>color: rgb(255,0,0);</code></td><td>✅ 可用</td><td>直观但不方便做亮度调整</td></tr><tr><td><code>hsl()</code></td><td><code>color: hsl(0,100%,50%)</code></td><td>✅ 推荐！</td><td>现代开发常用，特别适合渐变和主题</td></tr></tbody></table><hr><hr><h2 id="html-知识点总览"><a class="markdownIt-Anchor" href="#html-知识点总览"></a> HTML 知识点总览</h2><h3 id="html-基础"><a class="markdownIt-Anchor" href="#html-基础"></a> HTML 基础</h3><ul><li>什么是 HTML</li><li>HTML 文档结构<ul><li><code>&lt;!DOCTYPE html&gt;</code></li><li><code>&lt;html&gt;</code>, <code>&lt;head&gt;</code>, <code>&lt;body&gt;</code></li></ul></li><li>注释 <code>&lt;!-- comment --&gt;</code></li></ul><h3 id="常用标签"><a class="markdownIt-Anchor" href="#常用标签"></a> 常用标签</h3><ul><li>标题标签 <code>&lt;h1&gt;</code> ~ <code>&lt;h6&gt;</code></li><li>段落 <code>&lt;p&gt;</code></li><li>换行 <code>&lt;br&gt;</code></li><li>水平线 <code>&lt;hr&gt;</code></li><li>文本格式化<ul><li><code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code>, <code>&lt;b&gt;</code>, <code>&lt;i&gt;</code>, <code>&lt;u&gt;</code>, <code>&lt;small&gt;</code>, <code>&lt;mark&gt;</code></li><li><code>&lt;sub&gt;</code>, <code>&lt;sup&gt;</code>, <code>&lt;del&gt;</code>, <code>&lt;ins&gt;</code></li></ul></li></ul><h3 id="超链接与图像"><a class="markdownIt-Anchor" href="#超链接与图像"></a> 超链接与图像</h3><ul><li>超链接 <code>&lt;a href=&quot;...&quot;&gt;</code></li><li>图像 <code>&lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;</code></li><li>图像的宽高设置</li><li>target属性（如 <code>_blank</code>）</li></ul><h3 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h3><ul><li>无序列表 <code>&lt;ul&gt;</code> + <code>&lt;li&gt;</code></li><li>有序列表 <code>&lt;ol&gt;</code> + <code>&lt;li&gt;</code></li><li>嵌套列表</li><li>描述列表 <code>&lt;dl&gt;</code>, <code>&lt;dt&gt;</code>, <code>&lt;dd&gt;</code></li></ul><h3 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h3><ul><li><code>&lt;table&gt;</code>, <code>&lt;tr&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;th&gt;</code></li><li>表头 <code>&lt;thead&gt;</code>，表体 <code>&lt;tbody&gt;</code>，表尾 <code>&lt;tfoot&gt;</code></li><li><code>colspan</code>, <code>rowspan</code></li><li>边框、边距、对齐属性（推荐用 CSS 控制）</li></ul><h3 id="表单"><a class="markdownIt-Anchor" href="#表单"></a> 表单</h3><ul><li><code>&lt;form&gt;</code>, <code>action</code>, <code>method</code></li><li>输入元素 <code>&lt;input&gt;</code><ul><li><code>type</code> 属性（text, password, checkbox, radio, submit, file, etc.）</li></ul></li><li>其他表单元素：<ul><li><code>&lt;textarea&gt;</code></li><li><code>&lt;select&gt;</code> + <code>&lt;option&gt;</code></li><li><code>&lt;label&gt;</code></li><li><code>&lt;button&gt;</code></li></ul></li><li>表单验证（必填、类型验证）</li></ul><h3 id="多媒体元素"><a class="markdownIt-Anchor" href="#多媒体元素"></a> 多媒体元素</h3><ul><li>音频 <code>&lt;audio src=&quot;...&quot; controls&gt;</code></li><li>视频 <code>&lt;video src=&quot;...&quot; controls&gt;</code></li><li>嵌入资源 <code>&lt;iframe&gt;</code>, <code>&lt;embed&gt;</code>, <code>&lt;object&gt;</code></li></ul><h3 id="语义化标签html5"><a class="markdownIt-Anchor" href="#语义化标签html5"></a> 语义化标签（HTML5）</h3><ul><li><code>&lt;header&gt;</code>, <code>&lt;footer&gt;</code>, <code>&lt;main&gt;</code>, <code>&lt;nav&gt;</code>, <code>&lt;article&gt;</code>, <code>&lt;section&gt;</code>, <code>&lt;aside&gt;</code>, <code>&lt;figure&gt;</code>, <code>&lt;figcaption&gt;</code></li><li>好处：可读性高，利于SEO与无障碍支持</li></ul><h3 id="元信息与seo"><a class="markdownIt-Anchor" href="#元信息与seo"></a> 元信息与SEO</h3><ul><li><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></li><li><code>&lt;title&gt;</code></li><li><code>&lt;meta name=&quot;description&quot; content=&quot;...&quot;&gt;</code></li><li><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</code></li></ul><h3 id="链接外部资源"><a class="markdownIt-Anchor" href="#链接外部资源"></a> 链接外部资源</h3><ul><li>外部 CSS：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt;</code></li><li>外部 JS：<code>&lt;script src=&quot;script.js&quot;&gt;&lt;/script&gt;</code></li><li>字体和图标库（如 Google Fonts, Font Awesome）</li></ul><h3 id="块级元素-vs-行内元素"><a class="markdownIt-Anchor" href="#块级元素-vs-行内元素"></a> 块级元素 vs 行内元素</h3><ul><li>块级：<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;~&lt;h6&gt;</code>, <code>&lt;section&gt;</code> 等</li><li>行内：<code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>, <code>&lt;strong&gt;</code>, <code>&lt;em&gt;</code> 等</li></ul><h3 id="全局属性适用于所有html元素"><a class="markdownIt-Anchor" href="#全局属性适用于所有html元素"></a> 全局属性（适用于所有HTML元素）</h3><ul><li><code>id</code></li><li><code>class</code></li><li><code>style</code></li><li><code>title</code></li><li><code>lang</code></li><li><code>data-*</code> 自定义属性</li></ul><h3 id="已淘汰不推荐的标签和属性由css替代"><a class="markdownIt-Anchor" href="#已淘汰不推荐的标签和属性由css替代"></a> 已淘汰/不推荐的标签和属性（由CSS替代）</h3><ul><li><code>&lt;font&gt;</code></li><li><code>&lt;center&gt;</code></li><li><code>&lt;marquee&gt;</code></li><li><code>bgcolor</code>, <code>align</code>, <code>border</code>, <code>width</code>, <code>height</code> 等旧式属性</li></ul><h3 id="html-中的颜色表示"><a class="markdownIt-Anchor" href="#html-中的颜色表示"></a> HTML 中的颜色表示</h3><ul><li>十六进制 <code>#RRGGBB</code></li><li>RGB <code>rgb(255, 0, 0)</code></li><li>RGBA <code>rgba(255, 0, 0, 0.5)</code></li><li>HSL <code>hsl(0, 100%, 50%)</code></li><li>HSLA <code>hsla(0, 100%, 50%, 0.5)</code></li><li>关键字颜色（如 <code>red</code>, <code>blue</code>, <code>black</code>）</li></ul><hr><p>Use CSS to make a yellow, 1 pixel thick, border around all paragraphs.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-xml"></span><br><span class="language-xml">    <span class="hljs-comment">&lt;!--核心语句--&gt;</span></span><br><span class="language-xml"> p&#123;border:1px  solid yellow;&#125;</span><br><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>This is a paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="题目要求"><a class="markdownIt-Anchor" href="#题目要求"></a> 🎯 题目要求</h2><blockquote><p>Use CSS to remove the underline from the link.</p></blockquote><hr><h2 id="正确写法"><a class="markdownIt-Anchor" href="#正确写法"></a> ✅ 正确写法：</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>  <span class="hljs-attribute">text-decoration</span>: none;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="原理解析"><a class="markdownIt-Anchor" href="#原理解析"></a> 🧠 原理解析</h2><ol><li><code>text-decoration</code> 是什么？</li></ol><p>这是一个 CSS 属性，用来设置文本的修饰效果，比如：</p><ul><li><code>underline</code> → 下划线（默认链接有）</li><li><code>overline</code> → 上划线</li><li><code>line-through</code> → 删除线</li><li><code>none</code> → 移除所有修饰（就是我们要的）</li></ul><ol start="2"><li>为什么超链接默认有下划线？</li></ol><p>HTML 原始设计中，超链接（<code>&lt;a&gt;</code>）为了在视觉上区分于普通文字，会自动加上下划线并呈蓝色。这是浏览器的默认样式，属于 <strong>User Agent Stylesheet（用户代理样式）</strong>。</p><p>现在的网页几乎都会使用 CSS 重新设计链接的样式：</p><ul><li>在导航栏中，<strong>大多数链接都取消了下划线</strong>，改用颜色、hover 效果、图标等方式来区分；</li><li>只有在正文或文章内的链接（如维基百科、知乎回答），才会保留下划线，以提示这是可点击内容；</li><li>很多现代设计系统（如 Tailwind CSS、Bootstrap）中，链接默认样式就已经重新定义过。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">a</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">text-decoration</span>: none;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#0077cc</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css"></span><br><span class="language-css">    <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;</span><br><span class="language-css">      <span class="hljs-attribute">text-decoration</span>: underline;</span><br><span class="language-css">      <span class="hljs-attribute">color</span>: <span class="hljs-number">#005599</span>;</span><br><span class="language-css">    &#125;</span><br><span class="language-css">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://example.com&quot;</span>&gt;</span>Click here<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span> to visit the site.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这个例子中：</p><ul><li>默认没有下划线；</li><li>鼠标悬停时加上下划线，强调交互感。</li></ul><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>text-decoration: none;</code></td><td>去掉链接下划线</td></tr><tr><td><code>text-decoration: underline;</code></td><td>添加下划线（可用于 hover）</td></tr></tbody></table><hr><h2 id="hover-伪类选择器简述"><a class="markdownIt-Anchor" href="#hover-伪类选择器简述"></a> <code>:hover</code> 伪类选择器简述</h2><p><code>:hover</code> 是 CSS 中的<strong>伪类（pseudo-class）</strong>，用于定义<strong>当用户将鼠标悬停（hover）在某个元素上时</strong>，该元素应该呈现什么样的样式。</p><hr><h2 id="基本语法"><a class="markdownIt-Anchor" href="#基本语法"></a> ✅ 基本语法</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css">selector<span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-comment">/* 鼠标悬停时的样式 */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">color</span>: red;<br>  <span class="hljs-attribute">text-decoration</span>: underline;<br>&#125;<br>&lt;<span class="hljs-selector-tag">a</span> href=&quot;#&quot;&gt;Hover me!&lt;/<span class="hljs-selector-tag">a</span>&gt;<br></code></pre></td></tr></table></figure><p>这个例子中，当鼠标悬停在链接上时，它会变成红色并加上下划线。</p><hr><h2 id="原理说明"><a class="markdownIt-Anchor" href="#原理说明"></a> 🧠 原理说明</h2><ul><li><code>:hover</code> 是<strong>交互式样式的核心</strong>，不需要 JavaScript 就能实现动态效果。</li><li>它会在<strong>用户把鼠标指针悬停到元素上</strong>的那一刻生效。</li></ul><hr><h2 id="现代网页应用现状"><a class="markdownIt-Anchor" href="#现代网页应用现状"></a> 🔥 现代网页应用现状</h2><p>在实际开发中，<code>:hover</code> 被广泛应用于：</p><table><thead><tr><th>应用场景</th><th>示例效果</th></tr></thead><tbody><tr><td>超链接</td><td>改变颜色、添加动画，提示点击</td></tr><tr><td>按钮</td><td>改变背景色、加阴影，增强反馈感</td></tr><tr><td>图片</td><td>缩放、模糊、加边框，丰富视觉体验</td></tr><tr><td>卡片元素</td><td>鼠标悬停高亮或弹出详细信息</td></tr></tbody></table><h3 id="举个真实点的例子按钮-hover"><a class="markdownIt-Anchor" href="#举个真实点的例子按钮-hover"></a> 举个真实点的例子（按钮 hover）：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">button</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#007bff</span>;<br>  <span class="hljs-attribute">color</span>: white;<br>  <span class="hljs-attribute">border</span>: none;<br>&#125;<br><br><span class="hljs-selector-tag">button</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#0056b3</span>;<br>  <span class="hljs-attribute">cursor</span>: pointer;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="补充技巧"><a class="markdownIt-Anchor" href="#补充技巧"></a> 💡 补充技巧</h2><ul><li><code>:hover</code> 也可以用在 <code>div</code>, <code>img</code>, <code>p</code>, <code>li</code> 等所有可见元素上。</li><li>如果你想实现点击后状态，应该用 <code>:active</code>；如果想设置默认状态，用 <code>:link</code> 或 <code>:visited</code>。</li></ul><hr><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> ✅ 总结</h2><table><thead><tr><th>伪类</th><th>含义</th></tr></thead><tbody><tr><td><code>:hover</code></td><td>鼠标悬停时的样式</td></tr><tr><td><code>:active</code></td><td>鼠标按下时的样式</td></tr><tr><td><code>:focus</code></td><td>元素获得焦点时（如点击输入框）</td></tr><tr><td><code>:visited</code></td><td>已访问的链接</td></tr><tr><td><code>:link</code></td><td>未访问的链接</td></tr></tbody></table><hr><h3 id="html-图像映射image-map"><a class="markdownIt-Anchor" href="#html-图像映射image-map"></a> HTML 图像映射（Image Map）</h3><p>图像映射允许你为一张图片定义多个点击区域，这些区域可以链接到不同的页面或执行不同的操作。你可以为图片上的不同区域设置不同的超链接。</p><h3 id="基本原理"><a class="markdownIt-Anchor" href="#基本原理"></a> <strong>基本原理</strong></h3><p><code>&lt;map&gt;</code> 元素和 <code>&lt;area&gt;</code> 元素一起使用来创建图像映射。每个 <code>&lt;area&gt;</code> 元素定义了图片上的一个点击区域，并且可以设置该区域的目标链接。</p><h3 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> <strong>语法</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span> <span class="hljs-attr">usemap</span>=<span class="hljs-string">&quot;#mapname&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Image&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;mapname&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;34,44,270,350&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Description&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://example.com&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;450,150,75&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Another link&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://anotherexample.com&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> <strong>解释</strong></h3><ol><li><strong><code>&lt;img src=&quot;image.jpg&quot; usemap=&quot;#mapname&quot;&gt;</code></strong>：指定了图片，并将其与 <code>id</code> 为 <code>mapname</code> 的 <code>&lt;map&gt;</code> 元素关联。<code>usemap</code> 属性使得图片成为一个图像映射。</li><li><strong><code>&lt;map name=&quot;mapname&quot;&gt;</code></strong>：这是图像映射的容器，它包含所有的 <code>area</code> 元素，每个 <code>area</code> 元素代表图片的一个可点击区域。</li><li><strong><code>&lt;area&gt;</code> 元素</strong>：定义了一个点击区域，每个区域可以指定：<ul><li><strong><code>shape</code></strong>：区域的形状，常用值有：<ul><li><code>rect</code>：矩形（通过 <code>coords</code> 定义左上角和右下角的坐标）。</li><li><code>circle</code>：圆形（通过 <code>coords</code> 定义圆心坐标和半径）。</li><li><code>poly</code>：多边形（通过 <code>coords</code> 定义多边形的多个点）。</li></ul></li><li><strong><code>coords</code></strong>：定义区域的位置和大小（与 <code>shape</code> 属性配合使用）。例如，矩形的 <code>coords=&quot;x1,y1,x2,y2&quot;</code>，圆形的 <code>coords=&quot;x,y,radius&quot;</code>。</li><li><strong><code>href</code></strong>：点击该区域后跳转到的 URL。</li><li><strong><code>alt</code></strong>：区域的替代文本，帮助访问性和SEO。</li></ul></li></ol><h3 id="完整示例"><a class="markdownIt-Anchor" href="#完整示例"></a> <strong>完整示例</strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Image Map Example<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Image Map Example<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><br>  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://via.placeholder.com/500&quot;</span> <span class="hljs-attr">usemap</span>=<span class="hljs-string">&quot;#image-map&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Sample Image&quot;</span>&gt;</span><br>  <br>  <span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;image-map&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- Rectangular area: left-top (34,44), right-bottom (270,350) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;rect&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;34,44,270,350&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Website 1&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.example.com&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Circular area: center (450,150), radius (75) --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;circle&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;450,150,75&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Website 2&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.anotherexample.com&quot;</span>&gt;</span><br>    <br>    <span class="hljs-comment">&lt;!-- Polygonal area --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">area</span> <span class="hljs-attr">shape</span>=<span class="hljs-string">&quot;poly&quot;</span> <span class="hljs-attr">coords</span>=<span class="hljs-string">&quot;100,100,200,100,150,150&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;Polygon Area&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;https://www.yetanotherexample.com&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="说明"><a class="markdownIt-Anchor" href="#说明"></a> <strong>说明</strong></h3><ol><li><strong>图片：</strong> <code>&lt;img src=&quot;https://via.placeholder.com/500&quot; usemap=&quot;#image-map&quot;&gt;</code>，这行代码指定了图片以及与其关联的图像映射 <code>#image-map</code>。</li><li><strong>图像映射：</strong> <code>&lt;map name=&quot;image-map&quot;&gt;</code>，指定了一个名为 <code>image-map</code> 的映射区域。所有的 <code>&lt;area&gt;</code> 元素定义了图片上的可点击区域。</li><li><strong>点击区域：</strong><ul><li><strong>矩形区域：</strong> 定义了一个矩形区域，点击后会跳转到 <code>https://www.example.com</code>。</li><li><strong>圆形区域：</strong> 定义了一个圆形区域，点击后会跳转到 <code>https://www.anotherexample.com</code>。</li><li><strong>多边形区域：</strong> 定义了一个多边形区域，点击后会跳转到 <code>https://www.yetanotherexample.com</code>。</li></ul></li></ol><h3 id="常见应用场景"><a class="markdownIt-Anchor" href="#常见应用场景"></a> <strong>常见应用场景</strong></h3><ul><li><strong>地图：</strong> 可以用图像映射做互动式地图，点击不同区域显示不同内容。</li><li><strong>产品展示：</strong> 将产品图像与各个部件的链接区域结合，点击某个区域显示该部分的详细信息。</li><li><strong>广告和营销：</strong> 用于图像上的广告链接，点击不同的部分跳转到不同的广告页面。</li></ul><h3 id="小贴士"><a class="markdownIt-Anchor" href="#小贴士"></a> <strong>小贴士</strong></h3><ul><li>在现代设计中，<code>&lt;map&gt;</code> 和 <code>&lt;area&gt;</code> 逐渐被其他方法替代，如 <code>CSS</code> 和 <code>JavaScript</code> 提供的交互效果。</li><li>对于响应式布局，使用图像映射时要注意，不同设备屏幕上的区域可能需要不同的尺寸和坐标，需要进行适配。</li></ul><hr><p><strong>网站图标（左边的那个）</strong></p><h3 id="html-favicon-详细讲解"><a class="markdownIt-Anchor" href="#html-favicon-详细讲解"></a> <strong>HTML Favicon 详细讲解</strong></h3><p><strong>Favicon</strong>（即网站的图标）是显示在浏览器标签页、书签栏、历史记录等位置的小图标。它是网站品牌和标识的视觉表现，帮助用户快速识别网站。</p><p>在 HTML 中，<strong>favicon</strong> 是通过 <code>&lt;link&gt;</code> 标签来指定的，通常被放置在页面的 <code>&lt;head&gt;</code> 部分。它支持多种图像格式，比如 <code>.ico</code>、<code>.png</code>、<code>.jpg</code>、<code>.svg</code> 等。</p><h3 id="基本语法-2"><a class="markdownIt-Anchor" href="#基本语法-2"></a> <strong>基本语法</strong></h3><p>在 HTML 中，favicon 通过以下的 <code>&lt;link&gt;</code> 标签来定义：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ul><li><strong><code>&lt;link&gt;</code></strong>: 用来定义当前页面与外部资源的关系。</li><li><strong><code>rel=&quot;icon&quot;</code></strong>: 指明此链接是网站的 favicon。</li><li><strong><code>href=&quot;favicon.ico&quot;</code></strong>: 指定 favicon 的文件路径。<code>favicon.ico</code> 是传统的 favicon 文件名，通常是 <code>.ico</code> 格式。</li><li><strong><code>type=&quot;image/x-icon&quot;</code></strong>: 可选项，指定 favicon 的文件类型。默认情况下，如果是 <code>.ico</code> 文件，浏览器会自动识别。</li></ul><h3 id="常见的-favicon-格式"><a class="markdownIt-Anchor" href="#常见的-favicon-格式"></a> <strong>常见的 Favicon 格式</strong></h3><ol><li><strong>ICO 格式</strong>:<ul><li><code>.ico</code> 是传统的 favicon 格式，它支持多种不同的图像尺寸和色深。</li><li><code>.ico</code> 文件支持 16x16px 和 32x32px 等多个不同分辨率图像，适应不同设备和浏览器的显示需求。</li></ul></li><li><strong>PNG 格式</strong>:<ul><li>现代浏览器支持 <code>.png</code> 格式的 favicon，通常选择 16x16 或 32x32 像素的 <code>.png</code> 文件。</li><li>使用 PNG 格式时，需要指定正确的类型：<code>type=&quot;image/png&quot;</code>。</li></ul></li><li><strong>SVG 格式</strong>:<ul><li>使用 <code>.svg</code> 格式的 favicon 具有更高的清晰度，适合现代浏览器。</li><li>需要指定 <code>type=&quot;image/svg+xml&quot;</code>。</li><li>优点是 SVG 是矢量图，可以在不同尺寸下保持清晰。</li></ul></li><li><strong>其他格式</strong>:<ul><li>也可以使用 <code>.jpg</code>、<code>.gif</code> 等格式，但这些格式通常不推荐用于 favicon，因为它们不像 <code>.ico</code> 和 <code>.png</code> 那样能够灵活适配不同的屏幕尺寸。</li></ul></li></ol><h3 id="不同格式的-favicon-示例"><a class="markdownIt-Anchor" href="#不同格式的-favicon-示例"></a> <strong>不同格式的 Favicon 示例</strong></h3><ol><li><strong>ICO 格式的 Favicon</strong>:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><strong>PNG 格式的 Favicon</strong>:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.png&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><ol><li><strong>SVG 格式的 Favicon</strong>:</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.svg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/svg+xml&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="不同设备和分辨率支持"><a class="markdownIt-Anchor" href="#不同设备和分辨率支持"></a> <strong>不同设备和分辨率支持</strong></h3><p>为了在不同的设备上显示最佳的图标，通常需要准备不同尺寸的 favicon。现代网站常常使用多个 <code>link</code> 标签，提供不同尺寸的 favicon 以适配各种设备（如高分辨率屏幕、移动设备等）。</p><p>例如，提供不同尺寸的 favicon 图标：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon-16x16.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;16x16&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon-32x32.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;32x32&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon-48x48.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;48x48&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon-96x96.png&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;96x96&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="apple-touch-iconios-图标"><a class="markdownIt-Anchor" href="#apple-touch-iconios-图标"></a> <strong>Apple Touch Icon（iOS 图标）</strong></h3><p>iOS 设备（如 iPhone、iPad）通常使用 <strong>Apple Touch Icon</strong> 作为网页图标，特别是在用户将网页添加到主屏幕时。你可以通过指定 <code>&lt;link rel=&quot;apple-touch-icon&quot;&gt;</code> 来设置 iOS 的图标。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;apple-icon.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此外，iOS 设备也支持不同尺寸的图标。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;57x57&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;apple-icon-57x57.png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;72x72&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;apple-icon-72x72.png&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;apple-touch-icon&quot;</span> <span class="hljs-attr">sizes</span>=<span class="hljs-string">&quot;114x114&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;apple-icon-114x114.png&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="主题颜色与-favicon"><a class="markdownIt-Anchor" href="#主题颜色与-favicon"></a> <strong>主题颜色与 Favicon</strong></h3><p>现代浏览器（特别是移动设备）允许你设置网页的主题颜色，控制浏览器的工具栏颜色。你可以使用以下代码定义网页的主题颜色，同时配合使用 favicon：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;theme-color&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;#ffffff&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;favicon.ico&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/x-icon&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="如何选择合适的-favicon"><a class="markdownIt-Anchor" href="#如何选择合适的-favicon"></a> <strong>如何选择合适的 Favicon</strong></h3><ul><li><strong>尺寸</strong>：常见的尺寸是 16x16px 和 32x32px，适用于大多数浏览器和设备。如果需要支持高分辨率显示器（如 Retina 屏幕），则需要更大的图标尺寸（如 64x64px 或更大）。</li><li><strong>格式</strong>：<code>.ico</code> 是最传统和兼容性最好的格式，但如果你不需要兼容旧版浏览器，<code>.png</code> 或 <code>.svg</code> 是更现代且优质的选择。</li><li><strong>透明背景</strong>：为了让 favicon 在不同的背景下显示得更好，建议使用透明背景的图片（例如 <code>.png</code> 或 <code>.svg</code> 格式）。</li></ul><h3 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> <strong>总结</strong></h3><ol><li>Favicon 通过 <code>&lt;link&gt;</code> 标签在 <code>&lt;head&gt;</code> 中定义，使用 <code>rel=&quot;icon&quot;</code> 来指定图标。</li><li>常见的格式有 <code>.ico</code>、<code>.png</code> 和 <code>.svg</code>。</li><li>对于不同的设备，使用多个 <code>link</code> 标签来提供不同尺寸的图标。</li><li>对于 iOS 设备，可以使用 <code>apple-touch-icon</code> 来设置应用图标。</li><li>主题颜色和 favicon 可以一起使用，为用户提供一致的视觉体验。</li></ol><p>使用合适的 favicon 能提高网站的品牌辨识度，也能提升用户的体验。</p><hr><p>The CSS font size unit you’re referring to is:</p><h3 id="vw-viewport-width-vw-视口宽度"><a class="markdownIt-Anchor" href="#vw-viewport-width-vw-视口宽度"></a> ✅ <code>vw</code> — <em>Viewport Width</em>✅ <code>vw</code> —  <em>视口宽度</em></h3><hr><h3 id="what-is-vw"><a class="markdownIt-Anchor" href="#what-is-vw"></a> 🔍 <strong>What is <code>vw</code>?</strong></h3><ul><li><code>vw</code> stands for <strong>viewport width</strong>.</li><li><code>1vw</code> = <strong>1% of the width of the browser window</strong> (the viewport).</li><li>It’s a <strong>relative unit</strong>, so it scales depending on the device/screen size.</li></ul><hr><p>定义变量：用<code>&lt;var&gt;&lt;/var&gt;</code></p><hr><p>当然可以！下面是关于 <strong>HTML 实体（HTML Entities）</strong> 的全面知识点，结构清晰，适合你用在 Typora 或做速通总结，使用 Markdown 编写，从 <code>###</code> 标题开始：</p><hr><h3 id="html-实体html-entities"><a class="markdownIt-Anchor" href="#html-实体html-entities"></a> HTML 实体（HTML Entities）</h3><p>HTML 实体用于在网页中显示一些特殊字符，这些字符在 HTML 语法中具有特殊含义，或者在键盘上不容易输入。</p><hr><h4 id="为什么需要实体"><a class="markdownIt-Anchor" href="#为什么需要实体"></a> 为什么需要实体？</h4><ul><li>避免和 HTML 语法冲突（例如 <code>&lt;</code>, <code>&gt;</code>）</li><li>显示不可输入或保留的字符（例如版权符号 ©）</li><li>保证在不同浏览器中一致显示字符</li></ul><hr><h3 id="常用-html-实体一览表"><a class="markdownIt-Anchor" href="#常用-html-实体一览表"></a> 常用 HTML 实体一览表</h3><table><thead><tr><th>字符</th><th>描述</th><th>实体名称</th><th>实体编号</th></tr></thead><tbody><tr><td><code>&amp;</code></td><td>和号</td><td><code>&amp;</code></td><td><code>&amp;</code></td></tr><tr><td><code>&lt;</code></td><td>小于号</td><td><code>&lt;</code></td><td><code>&lt;</code></td></tr><tr><td><code>&gt;</code></td><td>大于号</td><td><code>&gt;</code></td><td><code>&gt;</code></td></tr><tr><td><code>&quot;</code></td><td>双引号</td><td><code>&quot;</code></td><td><code>&quot;</code></td></tr><tr><td><code>'</code></td><td>单引号</td><td><code>'</code></td><td><code>'</code></td></tr><tr><td><code>©</code></td><td>版权符号</td><td><code>©</code></td><td><code>©</code></td></tr><tr><td><code>®</code></td><td>注册商标</td><td><code>®</code></td><td><code>®</code></td></tr><tr><td><code>€</code></td><td>欧元符号</td><td><code>€</code></td><td><code>€</code></td></tr><tr><td><code> </code></td><td>不断行空格</td><td><code> </code></td><td><code> </code></td></tr></tbody></table><hr><h3 id="两种写法命名-vs-数值"><a class="markdownIt-Anchor" href="#两种写法命名-vs-数值"></a> 两种写法：命名 vs 数值</h3><ul><li><strong>命名实体</strong>（更常用，可读性高）：<code>&lt;</code>, <code>©</code></li><li><strong>数值实体</strong>（兼容性好）：<code>&lt;</code>, <code>©</code></li></ul><p>两者效果完全一样，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>div<span class="hljs-symbol">&amp;gt;</span>Hello<span class="hljs-symbol">&amp;lt;</span>/div<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>会显示：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">&lt;<span class="hljs-keyword">div</span>&gt;Hello&lt;/<span class="hljs-keyword">div</span>&gt;<br></code></pre></td></tr></table></figure><hr><h3 id="特殊空格"><a class="markdownIt-Anchor" href="#特殊空格"></a> 特殊空格：<code> </code></h3><ul><li>表示不间断空格（Non-Breaking Space）</li><li>常用于强制两个词不被断行、手动控制排版空格</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>我喜欢<span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span><span class="hljs-symbol">&amp;nbsp;</span>你。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><hr><h3 id="在代码中显示-html-标签的方法"><a class="markdownIt-Anchor" href="#在代码中显示-html-标签的方法"></a> 在代码中显示 HTML 标签的方法：</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><span class="hljs-symbol">&amp;lt;</span>h1<span class="hljs-symbol">&amp;gt;</span>Title<span class="hljs-symbol">&amp;lt;</span>/h1<span class="hljs-symbol">&amp;gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id=""><a class="markdownIt-Anchor" href="#"></a> </h3>]]></content>
    
    
    
    <tags>
      
      <tag>学习笔记</tag>
      
      <tag>HTML</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2025/04/24/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2025/04/24/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<img src="/2025/04/24/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/DIY%E6%B5%B7%E7%BB%B5%E5%AE%9D%E5%AE%9D.jpg" class=""><p>这是我的第一次博客网站创建尝试，参考很多人的教程，修删改很多次。。。</p><p>这个<code>yaml</code>的语法真的很严谨啊，光是这个缩进我都报错好多次，感谢GPT大大和csdn各路大佬的教程贴！！！！</p>]]></content>
    
    
    <categories>
      
      <category>markdown</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/04/24/hello-world/"/>
    <url>/2025/04/24/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
